[{"title":"Jetson Xavier NX 查看GPU等信息","url":"/2023/11/21/Jetson-Xavier-NX-%E6%9F%A5%E7%9C%8BGPU%E7%AD%89%E4%BF%A1%E6%81%AF/","content":"<p>本博客讲解了如何在Jetson上查看GPU、CPU、Memory等信息，类似<code>nvidia-smi</code>，以及如何将Jetson Xavier NX开启性能最强模式。</p>\n<span id=\"more\"></span>\n<h2 id=\"如何安装jtop\">如何安装jtop</h2>\n<h3 id=\"安装依赖包\">安装依赖包</h3>\n<p>有许多博客说明要先安装这几个依赖包，就先安装上。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git cmake</span><br><span class=\"line\">sudo apt-get install python3-dev</span><br><span class=\"line\">sudo apt-get install libhdf5-serial-dev hdf5-tools</span><br><span class=\"line\">sudo apt-get install libatlas-base-dev gfortran</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装jtop\">安装jtop</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo -H pip3 install -U jetson-stats</span><br></pre></td></tr></table></figure>\n<p>安装完成之后，要在终端输入重新启动jtop服务的指令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart jetson_stats.service</span><br></pre></td></tr></table></figure>\n<p>随后就可以在终端输入指令来开启jtop</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">jtop</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311212052057.png\" alt=\"image-20231121205242917\" style=\"zoom:67%;\" /></p>\n<h2 id=\"打开jetson-xavier-nx最高性能\">打开Jetson Xavier NX最高性能</h2>\n<p>如果一个Jetson并没有打开过性能模式，那么他的CPU使用是不会满的，如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311212055062.png\" alt=\"image-20231121205533992\" style=\"zoom:67%;\" /></p>\n<p>可以看到，板子的两个CPU核是没有使用的，要想打开所有CPU核心，就要开启最高的性能模式！</p>\n<p>安装完jtop之后，在界面中点击<kbd>6CTRL</kbd>，跳转页面</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311212056181.png\" alt=\"image-20231121205634302\" style=\"zoom:67%;\" /></p>\n<p>进入到板子的控制页面：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311212059096.png\" alt=\"image-20231121205924009\" style=\"zoom:67%;\" /></p>\n<ol type=\"1\">\n<li><strong>控制整个板子的风扇模式：</strong>cool就是风扇全开</li>\n<li><strong>控制整个板子的性能模式：</strong><kbd>MODE_20W_6CORE</kbd>为最高性能模式，用鼠标点击即可。</li>\n</ol>\n","categories":["Others"],"tags":["Tutorial"]},{"title":"GO 语言进阶笔记","url":"/2023/11/13/GO-%E8%AF%AD%E8%A8%80%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0/","content":"<p>此笔记跳出了最基本的<code>Go</code>语言教程，专注于适配于开发项目的一些进阶技术。比如说工作区的概念、包与模块、错误和Log等。</p>\n<p>Ready to take off ？</p>\n<span id=\"more\"></span>\n<h2 id=\"工作区\">工作区</h2>\n<p><code>Go</code>语言是有一个工作区的概念，也就是项目区域，在老版本的<code>Go</code>语言中，需要对工作区进行创建，并且要更改<code>GOPATH</code>来完成对该项目的根目录的定义。但是在新版本的<code>Go 1.11</code>语言中，引入了模块系统，至此，可以在任何位置创建项目，并利用<code>go.mod</code>来管理依赖。</p>\n<h3 id=\"goland使用\">Goland使用</h3>\n<p>创建一个新的项目，直接就可以在文件 -&gt; 新建 -&gt; 项目，IDE会自动生成<code>go.mod</code>，从而创建一个工作区，一键搞定！</p>\n<blockquote>\n<p>PS：在新建文件的时候，会有两个选择：1. 新建go文件；2. 新建go工作区文件。</p>\n<p>前者是简单的一个文件，后者是新建一个工作区（项目）</p>\n</blockquote>\n<h3 id=\"文件夹习惯\">文件夹习惯</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/</span><br><span class=\"line\">    hello</span><br><span class=\"line\">    coolapp</span><br><span class=\"line\">pkg/</span><br><span class=\"line\">    github.com/gorilla/</span><br><span class=\"line\">        mux.a</span><br><span class=\"line\">src/</span><br><span class=\"line\">    github.com/golang/example/</span><br><span class=\"line\">        .git/</span><br><span class=\"line\">    hello/</span><br><span class=\"line\">        hello.go</span><br></pre></td></tr></table></figure>\n<p>每个 Go 工作区都包含三个基本文件夹：</p>\n<ul>\n<li><em>bin</em>：包含应用程序中的可执行文件。</li>\n<li><em>src</em>：包括位于工作站中的所有应用程序源代码。</li>\n<li><em>pkg</em>：包含可用库的已编译版本。 编译器可以链接这些库，而无需重新编译它们。</li>\n</ul>\n<h2 id=\"包\">包</h2>\n<p>包的概念像是<code>python</code>中的库，可以说是在项目中的封装体现。</p>\n<h3 id=\"main包\">main包</h3>\n<p>可以发现，在<code>Go</code>中，所有的程序都是包的一部分，通常的默认包时<code>main</code>，也就是在程序开头的<code>package main</code>语句。如果程序是<code>main</code>包里的一部分，那么<code>Go</code>就会为此生成二进制文件，从而可以被运行（调用<code>main</code>函数）</p>\n<p>这也就说明了：为什么必须是<code>main</code>包，该文件才可以被执行。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">package command-line-arguments is not a main package</span><br></pre></td></tr></table></figure>\n<p>↑，如果调用非<code>main</code>的运行结果。</p>\n<blockquote>\n<p>在该语言中，包调用的名称采用其导入路径的最后一部分，比如导入<code>math/cmplx</code>包，引用其中的对象采用的语句为<code>cmplx.Inf()</code></p>\n</blockquote>\n<h3 id=\"创建包\">创建包</h3>\n<p>例如我想创建一个<code>myPackage</code>的包，那我就在目录下新建一个<code>myPackage</code>的文件夹，并在里面创建go文件。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">myPackage/</span><br><span class=\"line\">\tsum.go</span><br></pre></td></tr></table></figure>\n<p>Goland会自动为文件生成文件头：<code>package myPackage</code></p>\n<p>我们可以在这里进行包功能的定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> myPackage</span><br><span class=\"line\"><span class=\"keyword\">var</span> logMessage = <span class=\"string\">&quot;[LOG]&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Version of the calculator</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Version = <span class=\"string\">&quot;1.0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">internalSum</span><span class=\"params\">(number <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number - <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Sum two integer numbers</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Sum</span><span class=\"params\">(number1, number2 <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number1 + number2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>无论是变量还是函数，都遵循：大写 = public；小写 = private</p>\n<p>所以只能在包外调用：<code>Version</code>，<code>Sum()</code></p>\n</blockquote>\n<h3 id=\"创建模块\">创建模块</h3>\n<p>Go 模块通常包含可提供相关功能的包。 <strong>包的模块还指定了 Go 运行你组合在一起的代码所需的上下文。 此上下文信息包括编写代码时所用的 Go 版本。</strong></p>\n<p>如果要为上述的<code>myPackage</code>床检模块，需要在<code>/myPackage</code>目录下运行以下命令</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// go mod init 包的名称</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> mod init github.com/myuser/myPackage</span><br></pre></td></tr></table></figure>\n<p>运行此命令后，<code>github.com/myuser/myPackage</code> 就会变成模块的名称。 在其他程序中，你将使用该名称进行引用。 命令还会创建一个名为 <code>go.mod</code> 的新文件。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">module github.com/myuser/myPackage</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"number\">1.21</span><span class=\"number\">.3</span></span><br></pre></td></tr></table></figure>\n<p>此时该模块会被上传到远程的代码管理仓库中，比如<code>github.com</code>，如果项目需要使用该包，就要在终端输入</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get github.com/myuser/myPackage</span><br></pre></td></tr></table></figure>\n<p>引用模块的话直接用<code>github.com/myuser/myPackage</code>引用就行。</p>\n<p>教程上说如果想用本地的副本需要更改<code>main.go</code>模块的<code>go.mod</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">module github.com/myPackage</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"number\">1.21</span><span class=\"number\">.3</span></span><br><span class=\"line\">replace github.com/myPackage =&gt; ../myPackage</span><br></pre></td></tr></table></figure>\n<p>但是报错……拉倒吧</p>\n<blockquote>\n<p>！！如果是本地自己写的包，就别变成模块了，模块主要是项目间复用，感觉不如copy来得快。试了试一直引用不了模块，不知道哪出了问题。服了……</p>\n</blockquote>\n<h3 id=\"引用第三方包\">引用第三方包</h3>\n<p>在终端直接输入</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get -u [url]</span><br></pre></td></tr></table></figure>\n<p>下载完之后，直接在<code>.go</code>文件中<code>import</code>就行，<code>go.mod</code>会自动创建<code>require()</code></p>\n<h2 id=\"defer-panic-recover\">defer &amp; panic &amp; recover</h2>\n<h3 id=\"defer-函数\">defer 函数</h3>\n<p>在 Go 中，<code>defer</code> 语句会推迟函数（包括任何参数）的运行，<strong>直到包含 <code>defer</code> 语句的函数完成</strong>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">4</span>; i++ &#123;</span><br><span class=\"line\">        <span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">&quot;deferred&quot;</span>, -i)</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;regular&quot;</span>, i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">regular 1</span><br><span class=\"line\">regular 2</span><br><span class=\"line\">regular 3</span><br><span class=\"line\">regular 4</span><br><span class=\"line\">deferred -4</span><br><span class=\"line\">deferred -3</span><br><span class=\"line\">deferred -2</span><br><span class=\"line\">deferred -1</span><br></pre></td></tr></table></figure>\n<p>这里的<code>defer</code>语句在<code>for</code>中，所以当该循环运行结束后才运行<code>defer</code>后面的函数。</p>\n<ul>\n<li><code>defer</code>的运行和栈是一样的，后入栈的先出栈</li>\n<li>并且函数的状态是被保留的，即输入的参数是在<code>defer</code>语句声明的时候就保存好了。</li>\n</ul>\n<p>例如，文件的关闭可以用<code>defer</code>，在所有语句结束之后，关闭文件。</p>\n<h3 id=\"panic-函数\">panic 函数</h3>\n<p>内置 <code>panic()</code> 函数可以<strong>停止 Go 程序中的正常控制流。</strong> 当你使用 <code>panic</code> 调用时，<strong>任何延迟的函数调用都将正常运行。</strong> 进程会在堆栈中继续，直到所有函数都返回。 然后，程序会崩溃并记录日志消息。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">highlow</span><span class=\"params\">(high <span class=\"keyword\">int</span>, low <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> high &lt; low &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;Panic!&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(<span class=\"string\">&quot;highlow() low greater than high&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">&quot;Deferred: highlow(&quot;</span>, high, <span class=\"string\">&quot;,&quot;</span>, low, <span class=\"string\">&quot;)&quot;</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Call: highlow(&quot;</span>, high, <span class=\"string\">&quot;,&quot;</span>, low, <span class=\"string\">&quot;)&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    highlow(high, low + <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    highlow(<span class=\"number\">2</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Program finished successfully!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">Call: highlow( 2 , 0 )</span><br><span class=\"line\">Call: highlow( 2 , 1 )</span><br><span class=\"line\">Call: highlow( 2 , 2 )</span><br><span class=\"line\">Panic!</span><br><span class=\"line\">Deferred: highlow( 2 , 2 )</span><br><span class=\"line\">Deferred: highlow( 2 , 1 )</span><br><span class=\"line\">Deferred: highlow( 2 , 0 )</span><br><span class=\"line\">panic: highlow() low greater than high</span><br><span class=\"line\"></span><br><span class=\"line\">goroutine 1 [running]:</span><br><span class=\"line\">main.highlow(0x2, 0x3)</span><br><span class=\"line\">\t/tmp/sandbox/prog.go:13 +0x34c</span><br><span class=\"line\">main.highlow(0x2, 0x2)</span><br><span class=\"line\">\t/tmp/sandbox/prog.go:18 +0x298</span><br><span class=\"line\">main.highlow(0x2, 0x1)</span><br><span class=\"line\">\t/tmp/sandbox/prog.go:18 +0x298</span><br><span class=\"line\">main.highlow(0x2, 0x0)</span><br><span class=\"line\">\t/tmp/sandbox/prog.go:18 +0x298</span><br><span class=\"line\">main.main()</span><br><span class=\"line\">\t/tmp/sandbox/prog.go:6 +0x37</span><br><span class=\"line\"></span><br><span class=\"line\">Program exited: status 2.</span><br></pre></td></tr></table></figure>\n<p>在发生<code>panic</code>的时候，只有<code>defer</code>的函数会立刻执行，执行完毕之后整个程序停止。没有运行的语句不再运行。</p>\n<h3 id=\"recover-函数\">recover 函数</h3>\n<p>Go 提供内置 <code>recover()</code> 函数，让你可以在程序崩溃之后重新获得控制权。 <strong>你只会在你同时调用 <code>defer</code> 的函数中调用 <code>recover</code>。</strong> 如果调用 <code>recover()</code> 函数，则在正常运行的情况下，它会返回 <code>nil</code>，没有任何其他作用。</p>\n<p>所以说，当<code>panic</code>起效的时候，只有<code>defer</code>运行，在<code>defer</code>中使用<code>recover</code>函数，如果返回非<code>nil</code>，则说明程序崩溃，并恢复进程。如果返回<code>nil</code>则没有效果。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thandler := <span class=\"built_in\">recover</span>() <span class=\"comment\">// 恢复程序进程</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> handler != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            fmt.Println(<span class=\"string\">&quot;main(): recover&quot;</span>, handler)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    highlow(<span class=\"number\">2</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Program finished successfully!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>panic</code> 和 <code>recover</code> 函数的组合是 Go 处理异常的惯用方式。</p>\n</blockquote>\n<h2 id=\"错误进阶\">错误进阶</h2>\n<ul>\n<li>Go 具有 <code>panic</code> 和 <code>recover</code> 之类的内置函数来管理程序中的异常或意外行为</li>\n<li>Go 用<code>error</code>来处理错误（已知的失败）</li>\n</ul>\n<h3 id=\"错误处理策略\">错误处理策略</h3>\n<p>当函数返回错误的时候，该错误通常是最后一个返回值。在函数声明的时候用<code>error</code>作为错误的定义。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getInformation</span><span class=\"params\">(id <span class=\"keyword\">int</span>)</span> <span class=\"params\">(*Employee, error)</span></span> &#123;</span><br><span class=\"line\">    employee, err := apiCallEmployee(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;Got an error when getting the employee information: %v&quot;</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> employee, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是有错误的，我们可以用函数<code>fmt.Errorf()</code>来说明错误类型，例如下面的这个函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getInformation</span><span class=\"params\">(id <span class=\"keyword\">int</span>)</span> <span class=\"params\">(*Employee, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> tries := <span class=\"number\">0</span>; tries &lt; <span class=\"number\">3</span>; tries++ &#123; <span class=\"comment\">// 出现错误先重复操作三次。</span></span><br><span class=\"line\">        employee, err := apiCallEmployee(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> employee, <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;Server is not responding, retrying ...&quot;</span>)</span><br><span class=\"line\">        time.Sleep(time.Second * <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;server has failed to respond to get the employee information&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 返回fmt.Errorf()的错误</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建可重用的错误\">创建可重用的错误</h3>\n<p>当错误需要重用并且常见的时候，我们可以为其创建一个库，利用<code>errors.New()</code>函数创建错误并在若干部分中重复使用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ErrNotFound = errors.New(<span class=\"string\">&quot;Employee not found!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getInformation</span><span class=\"params\">(id <span class=\"keyword\">int</span>)</span> <span class=\"params\">(*Employee, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> id != <span class=\"number\">1001</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, ErrNotFound</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    employee := Employee&#123;LastName: <span class=\"string\">&quot;Doe&quot;</span>, FirstName: <span class=\"string\">&quot;John&quot;</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;employee, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们想判断错误信息，可以使用函数<code>errors.Is(_, _)</code>，判断之后可以进行打印等操作。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> errors.Is(err, ErrorNotFound) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">&quot;Not 0!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>处理错误的推荐做法：</p>\n<ul>\n<li>始终检查是否存在错误，即使预期不存在。 然后正确处理它们，以免向最终用户公开不必要的信息。</li>\n<li>在错误消息中包含一个前缀，以便了解错误的来源。 例如，可以包含包和函数的名称。</li>\n<li>创建尽可能多的可重用错误变量。</li>\n<li>在记录错误时记录尽可能多的详细信息，并打印出最终用户能够理解的错误。</li>\n</ul>\n</blockquote>\n<h2 id=\"日志\">日志</h2>\n<h3 id=\"log-包\">log 包</h3>\n<p>Go 提供了一个用于处理日志的简单标准包。 可以像使用 <code>fmt</code> 包一样使用此包。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    log.Print(<span class=\"string\">&quot;Hey, I&#x27;m a log!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认情况下，<code>log.Print()</code> 函数将日期和时间添加为日志消息的前缀。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">2023/11/14 09:48:49 Hey, I&#x27;m a log!</span><br></pre></td></tr></table></figure>\n<p><code>log.Fatal()</code>函数用来记录错误并结束程序，和<code>os.Exit(1)</code>一样</p>\n<p><code>log.SetPrefix()</code>，功能是向程序的日志消息添加前缀。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    log.SetPrefix(<span class=\"string\">&quot;main(): &quot;</span>)</span><br><span class=\"line\">    log.Print(<span class=\"string\">&quot;Hey, I&#x27;m a log!&quot;</span>)</span><br><span class=\"line\">    log.Fatal(<span class=\"string\">&quot;Hey, I&#x27;m an error log!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">main(): <span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">05</span> <span class=\"number\">13</span>:<span class=\"number\">59</span>:<span class=\"number\">58</span> Hey, I<span class=\"string\">&#x27;m a log!</span></span><br><span class=\"line\"><span class=\"string\">main(): 2021/01/05 13:59:58 Hey, I&#x27;</span>m an error log!</span><br><span class=\"line\">exit status <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"记录到文件\">记录到文件</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    file, err := os.OpenFile(<span class=\"string\">&quot;info.log&quot;</span>, os.O_CREATE|os.O_APPEND|os.O_WRONLY, <span class=\"number\">0644</span>) <span class=\"comment\">// 打开文件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> file.Close() <span class=\"comment\">// 采用延迟函数来关闭文件。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    log.SetOutput(file) <span class=\"comment\">// 对所有的log进行输出。</span></span><br><span class=\"line\">    log.Print(<span class=\"string\">&quot;Hey, I&#x27;m a log!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数如果<code>log.Fatal(err)</code>运行了，则在控制太输出err，并不会输入到文件中。在这个函数中，只有<code>log.Print()</code>的消息在文件中。</p>\n<h2 id=\"接口进阶\">接口进阶</h2>\n<h3 id=\"个人理解\">个人理解</h3>\n<p>我对接口的理解就是他为函数的输入定义了一个范式，只要符合这个接口内部定义函数的结构体都可以传入这个函数。</p>\n<p>举个例子，我先定义了一个接口叫做<code>Shape</code>，指的是所有的形状，里面有周长和面积两个方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Shape <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Perimeter() <span class=\"keyword\">float32</span></span><br><span class=\"line\">    Area() <span class=\"keyword\">float32</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后我定义了一个函数，这个函数是打印<code>Shape</code>的周长与面积</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printAreaAndPerimeter</span><span class=\"params\">(s Shape)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">&quot;Area:&quot;</span>, s.Area())</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">&quot;Perimeter:&quot;</span>, s.Perimeter())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我只需要定义不同的结构体，这些结构体中包含<code>Shape</code>定义的两种方法，其就可以被传入到<code>printAreaAndPerimeter()</code>函数中。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Circle <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    radius <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c Circle)</span> <span class=\"title\">Area</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Pi * c.radius * c.radius</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c Circle)</span> <span class=\"title\">Perimeter</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * math.Pi * c.radius</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**********************/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Square <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    size <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s Square)</span> <span class=\"title\">Area</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.size * s.size</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s Square)</span> <span class=\"title\">Perimeter</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.size * <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Go"],"tags":["Tutorial"]},{"title":"关于JavaScript的简单笔记","url":"/2023/11/10/%E5%85%B3%E4%BA%8EJavaScript%E7%9A%84%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/","content":"<p>此博客记录参加2022 China Vis的JavaScript笔记📒</p>\n<span id=\"more\"></span>\n<h3 id=\"注释\">注释</h3>\n<p>源码中被 JavaScript 引擎忽略的部分就叫做注释，它的作用是对代码进行解释。JavaScript 提供两种注释的写法：一种是单行注释，用<code>//</code>起头；另一种是多行注释，放在<code>/*</code>和<code>*/</code>之间。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是单行注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> 这是</span></span><br><span class=\"line\"><span class=\"comment\"> 多行</span></span><br><span class=\"line\"><span class=\"comment\"> 注释</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>此外，由于历史上 JavaScript 可以兼容 HTML 代码的注释，所以<code>&lt;!--</code>和<code>--&gt;</code>也被视为合法的单行注释。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">1</span>; &lt;!-- x = <span class=\"number\">2</span>;</span><br><span class=\"line\">--&gt; x = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，只有<code>x = 1</code>会执行，其他的部分都被注释掉了。</p>\n<p>需要注意的是，<code>--&gt;</code>只有在行首，才会被当成单行注释，否则会当作正常的运算。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countdown</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (n --&gt; <span class=\"number\">0</span>) <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">countdown(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>n --&gt; 0</code>实际上会当作<code>n-- &gt; 0</code>，因此输出2、1、0。</p>\n<h3 id=\"区块\">区块</h3>\n<p>JavaScript 使用大括号，将多个相关的语句组合在一起，称为“区块”（block）。</p>\n<p>对于<code>var</code>命令来说，<strong>JavaScript 的区块不构成单独的作用域（scope）。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>上面代码在区块内部，使用<code>var</code>命令声明并赋值了变量<code>a</code>，然后在区块外部，变量<code>a</code>依然有效，区块对于<code>var</code>命令不构成单独的作用域，与不使用区块的情况没有任何区别。在 JavaScript 语言中，单独使用区块并不常见，区块往往用来构成其他更复杂的语法结构，比如<code>for</code>、<code>if</code>、<code>while</code>、<code>function</code>等。</p>\n<h3 id=\"switch\">Switch</h3>\n<p><strong>switch中用的是<kbd>隐式贯穿</kbd></strong></p>\n<p>多个<code>if...else</code>连在一起使用的时候，可以转为使用更方便的<code>switch</code>结构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (fruit) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&quot;banana&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&quot;apple&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码根据变量<code>fruit</code>的值，选择执行相应的<code>case</code>。如果所有<code>case</code>都不符合，则执行最后的<code>default</code>部分。需要注意的是，每个<code>case</code>代码块内部的<code>break</code>语句不能少，否则会接下去执行下一个<code>case</code>代码块，而不是跳出<code>switch</code>结构。</p>\n<h3 id=\"标签\">标签</h3>\n<p>JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">label:</span><br><span class=\"line\">  语句</span><br></pre></td></tr></table></figure>\n<p>标签可以是任意的标识符，但不能是保留字，语句部分可以是任意语句。</p>\n<p>标签通常与<code>break</code>语句和<code>continue</code>语句配合使用，跳出特定的循环。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">top:</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i === <span class=\"number\">1</span> &amp;&amp; j === <span class=\"number\">1</span>) <span class=\"keyword\">break</span> top;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i=&#x27;</span> + i + <span class=\"string\">&#x27;, j=&#x27;</span> + j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// i=0, j=0</span></span><br><span class=\"line\"><span class=\"comment\">// i=0, j=1</span></span><br><span class=\"line\"><span class=\"comment\">// i=0, j=2</span></span><br><span class=\"line\"><span class=\"comment\">// i=1, j=0</span></span><br></pre></td></tr></table></figure>\n<p>上面代码为一个双重循环区块，<code>break</code>命令后面加上了<code>top</code>标签（注意，<code>top</code>不用加引号），满足条件时，直接跳出双层循环。如果<code>break</code>语句后面不使用标签，则只能跳出内层循环，进入下一次的外层循环。</p>\n<p>标签也可以用于跳出代码块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">foo: &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">break</span> foo;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;本行不会输出&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>上面代码执行到<code>break foo</code>，就会跳出区块。</p>\n<p><code>continue</code>语句也可以与标签配合使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">top:</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i === <span class=\"number\">1</span> &amp;&amp; j === <span class=\"number\">1</span>) <span class=\"keyword\">continue</span> top;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i=&#x27;</span> + i + <span class=\"string\">&#x27;, j=&#x27;</span> + j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// i=0, j=0</span></span><br><span class=\"line\"><span class=\"comment\">// i=0, j=1</span></span><br><span class=\"line\"><span class=\"comment\">// i=0, j=2</span></span><br><span class=\"line\"><span class=\"comment\">// i=1, j=0</span></span><br><span class=\"line\"><span class=\"comment\">// i=2, j=0</span></span><br><span class=\"line\"><span class=\"comment\">// i=2, j=1</span></span><br><span class=\"line\"><span class=\"comment\">// i=2, j=2</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>continue</code>命令后面有一个标签名，满足条件时，会跳过当前循环，直接进入下一轮外层循环。如果<code>continue</code>语句后面不使用标签，则只能进入下一轮的内层循环。</p>\n<h3 id=\"确定值类型\">确定值类型</h3>\n<p>JavaScript 有三种方法，可以确定一个值到底是什么类型。</p>\n<ul>\n<li><code>typeof</code>运算符</li>\n<li><code>instanceof</code>运算符</li>\n<li><code>Object.prototype.toString</code>方法</li>\n</ul>\n<hr />\n<h4 id=\"typeof-运算符\">typeof 运算符</h4>\n<p><code>typeof</code>运算符可以<em>返回</em>一个值的数据类型。</p>\n<p>数值、字符串、布尔值分别返回<code>number</code>、<code>string</code>、<code>boolean</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">123</span> <span class=\"comment\">// &quot;number&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;123&#x27;</span> <span class=\"comment\">// &quot;string&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">false</span> <span class=\"comment\">// &quot;boolean&quot;</span></span><br></pre></td></tr></table></figure>\n<p>函数返回<code>function</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> f</span><br><span class=\"line\"><span class=\"comment\">// &quot;function&quot;</span></span><br></pre></td></tr></table></figure>\n<p><code>undefined</code>返回<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure>\n<p>利用这一点，<code>typeof</code>可以用来<strong>检查一个没有声明的变量，而不报错。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">v</span><br><span class=\"line\"><span class=\"comment\">// ReferenceError: v is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> v</span><br><span class=\"line\"><span class=\"comment\">// &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，变量<code>v</code>没有用<code>var</code>命令声明，直接使用就会报错。但是，放在<code>typeof</code>后面，就不报错了，而是返回<code>undefined</code>。</p>\n<p>实际编程中，这个特点通常用在判断语句。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误的写法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (v) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ReferenceError: v is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确的写法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> v === <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对象返回<code>object</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125; <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [] <span class=\"comment\">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，空数组（<code>[]</code>）的类型也是<code>object</code>，这表示在 JavaScript 内部，数组本质上只是一种特殊的对象。这里顺便提一下，<code>instanceof</code>运算符可以区分数组和对象。<code>instanceof</code>运算符的详细解释。</p>\n<p><code>null</code>返回<code>object</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> <span class=\"comment\">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure>\n<p><code>null</code>的类型是<code>object</code>，这是由于历史原因造成的。1995年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑<code>null</code>，只把它当作<code>object</code>的一种特殊值。后来<code>null</code>独立出来，作为一种单独的数据类型，为了兼容以前的代码，<code>typeof null</code>返回<code>object</code>就没法改变了。</p>\n<h3 id=\"null-和-undefined\">null 和 undefined</h3>\n<h4 id=\"概述\">概述</h4>\n<p><code>null</code>与<code>undefined</code>都可以表示“没有”，含义非常相似。将一个变量赋值为<code>undefined</code>或<code>null</code>，老实说，语法效果几乎没区别。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，变量<code>a</code>分别被赋值为<code>undefined</code>和<code>null</code><sup>这两种写法的效果几乎等价</sup></p>\n<p><strong>在<code>if</code>语句中，它们都会被自动转为<code>false</code>，相等运算符（<code>==</code>）甚至直接报告两者相等。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;undefined is false&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// undefined is false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;null is false&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// null is false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>从上面代码可见，两者的行为是何等相似！谷歌公司开发的 JavaScript 语言的替代品 Dart 语言，就明确规定只有<code>null</code>，没有<code>undefined</code>！</p>\n<p>既然含义与用法都差不多，为什么要同时设置两个这样的值，这不是无端增加复杂度，令初学者困扰吗？这与历史原因有关。</p>\n<p>1995年 JavaScript 诞生时，最初像 Java 一样，只设置了<code>null</code>表示\"无\"。根据 C 语言的传统，<code>null</code>可以自动转为<code>0</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"number\">5</span> + <span class=\"literal\">null</span> <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>null</code>转为数字时，自动变成0。</p>\n<p>但是，JavaScript 的设计者 Brendan Eich，觉得这样做还不够。首先，第一版的 JavaScript 里面，<code>null</code>就像在 Java 里一样，被当成一个对象，Brendan Eich 觉得表示“无”的值最好不是对象。其次，那时的 JavaScript 不包括错误处理机制，Brendan Eich 觉得，如果<code>null</code>自动转为0，很不容易发现错误。</p>\n<p>因此，他又设计了一个<code>undefined</code>。</p>\n<blockquote>\n<p>区别是这样的：</p>\n<p><code>null</code>是一个表示“空”的对象，转为数值时为<code>0</code>；</p>\n<p><code>undefined</code>是一个表示\"此处无定义\"的原始值，转为数值时为<code>NaN</code>。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"number\">5</span> + <span class=\"literal\">undefined</span> <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"用法和含义\">用法和含义</h4>\n<p>对于<code>null</code>和<code>undefined</code>，大致可以像下面这样理解。</p>\n<p><code>null</code>表示<kbd>空值</kbd>，即该处的值现在为空。调用函数时，某个参数未设置任何值，这时就可以传入<code>null</code>，表示该<kbd>参数为空</kbd>。比如，某个函数接受引擎抛出的错误作为参数，如果运行过程中未出错，那么这个参数就会传入<code>null</code>，表示未发生错误。</p>\n<p><code>undefined</code>表示<kbd>未定义</kbd>，下面是返回<code>undefined</code>的典型场景。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量声明了，但没有赋值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\">i <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用函数时，应该提供的参数没有提供，该参数等于 undefined</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f() <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象没有赋值的属性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span>  o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">o.p <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数没有返回值时，默认返回 undefined</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">f() <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"布尔值\">布尔值</h3>\n<p>布尔值代表“真”和“假”两个状态。“真”用关键字<code>true</code>表示，“假”用关键字<code>false</code>表示。布尔值只有这两个值。</p>\n<p><strong>下列运算符会返回布尔值：</strong></p>\n<ul>\n<li>前置逻辑运算符： <code>!</code> (Not)</li>\n<li>相等运算符：<code>===</code>，<code>!==</code>，<code>==</code>，<code>!=</code></li>\n<li>比较运算符：<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code></li>\n</ul>\n<p>如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。</p>\n<p><strong>转换规则是除了下面六个值被转为<code>false</code>，其他值都视为<code>true</code>。</strong></p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>false</code></li>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li><code>\"\"</code>或<code>''</code>（空字符串）</li>\n</ul>\n<p>布尔值往往用于程序流程的控制，请看一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;true&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 没有任何输出</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>if</code>命令后面的判断条件，预期应该是一个布尔值，所以 JavaScript 自动将空字符串，转为布尔值<code>false</code>，导致程序不会进入代码块，所以没有任何输出。</p>\n<p>注意，空数组（<code>[]</code>）和空对象（<code>&#123;&#125;</code>）对应的布尔值，都是<code>true</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ([]) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;true&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (&#123;&#125;) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;true&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"数值\">数值</h3>\n<h4 id=\"数值范围\">数值范围</h4>\n<p>根据标准，64位浮点数的指数部分的长度是11个二进制位，意味着指数部分的最大值是2047（2的11次方减1）。也就是说，64位浮点数的指数部分的值最大为2047，分出一半表示负数，则 JavaScript 能够表示的数值范围为21024到2-1023（开区间），超出这个范围的数无法表示。</p>\n<p>如果一个数大于等于2的1024次方，那么就会发生“<strong>正向溢出</strong>”，即 JavaScript 无法表示这么大的数，<strong><u><em>这时就会返回<code>Infinity</code></em></u></strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">1024</span>) <span class=\"comment\">// Infinity</span></span><br></pre></td></tr></table></figure>\n<p>如果一个数小于等于2的-1075次方（指数部分最小值-1023，再加上小数部分的52位），那么就会发生为“<strong>负向溢出</strong>”，即 JavaScript 无法表示这么小的数，<strong><u><em>这时会直接返回<code>0</code></em></u></strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, -<span class=\"number\">1075</span>) <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数值的表示法\">数值的表示法</h4>\n<p>JavaScript 的数值有多种表示方法，可以用字面形式直接表示，比如<code>35</code>（十进制）和<code>0xFF</code>（十六进制）。</p>\n<p>数值也可以采用科学计数法表示，下面是几个科学计数法的例子。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">123e3 // 123000</span><br><span class=\"line\">123e-3 // 0.123</span><br><span class=\"line\">-3.1E+12</span><br><span class=\"line\">.1e-23</span><br></pre></td></tr></table></figure>\n<p>科学计数法允许字母<code>e</code>或<code>E</code>的后面，跟着一个整数，表示这个数值的指数部分。</p>\n<p>以下两种情况，JavaScript 会自动将数值转为科学计数法表示，其他情况都采用字面形式直接表示。</p>\n<p><strong>（1）小数点前的数字多于21位。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1234567890123456789012</span><br><span class=\"line\">// 1.2345678901234568e+21</span><br><span class=\"line\"></span><br><span class=\"line\">123456789012345678901</span><br><span class=\"line\">// 123456789012345680000</span><br></pre></td></tr></table></figure>\n<p><strong>（2）小数点后的零多于5个。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 小数点后紧跟5个以上的零，</span><br><span class=\"line\">// 就自动转为科学计数法</span><br><span class=\"line\">0.0000003 // 3e-7</span><br><span class=\"line\"></span><br><span class=\"line\">// 否则，就保持原来的字面形式</span><br><span class=\"line\">0.000003 // 0.000003</span><br></pre></td></tr></table></figure>\n<h3 id=\"特殊数值\">特殊数值</h3>\n<p>JavaScript 提供了几个特殊的数值。</p>\n<h4 id=\"正零和负零\">正零和负零</h4>\n<p>前面说过，JavaScript 的64位浮点数之中，有一个二进制位是符号位。这意味着，任何一个数都有一个对应的负值，就连<code>0</code>也不例外。</p>\n<p>JavaScript 内部实际上存在2个<code>0</code>：一个是<code>+0</code>，一个是<code>-0</code>，区别就是64位浮点数表示法的符号位不同。它们是等价的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">-<span class=\"number\">0</span> === +<span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> === -<span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> === +<span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>几乎所有场合，正零和负零都会被当作正常的<code>0</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">+<span class=\"number\">0</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">-<span class=\"number\">0</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">(-<span class=\"number\">0</span>).toString() <span class=\"comment\">// &#x27;0&#x27;</span></span><br><span class=\"line\">(+<span class=\"number\">0</span>).toString() <span class=\"comment\">// &#x27;0&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>唯一有区别的场合是，<code>+0</code>或<code>-0</code>当作分母，返回的值是不相等的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span> / +<span class=\"number\">0</span>) === (<span class=\"number\">1</span> / -<span class=\"number\">0</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码之所以出现这样结果，是因为除以正零得到<code>+Infinity</code>，除以负零得到<code>-Infinity</code>，这两者是不相等的（关于<code>Infinity</code>详见下文）。</p>\n<h4 id=\"nan\">NaN</h4>\n<p><strong>（1）含义</strong></p>\n<p><code>NaN</code>是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span> - <span class=\"string\">&#x27;x&#x27;</span> <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>上面代码运行时，会自动将字符串<code>x</code>转为数值，但是由于<code>x</code>不是数值，所以最后得到结果为<code>NaN</code>，表示它是“非数字”（<code>NaN</code>）。</p>\n<p>另外，一些数学函数的运算结果会出现<code>NaN</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.acos(<span class=\"number\">2</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.log(-<span class=\"number\">1</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.sqrt(-<span class=\"number\">1</span>) <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p><code>0</code>除以<code>0</code>也会得到<code>NaN</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> / <span class=\"number\">0</span> <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>需要注意的是，<code>NaN</code>不是独立的数据类型，而是一个特殊数值，它的数据类型依然属于<code>Number</code>，使用<code>typeof</code>运算符可以看得很清楚。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">NaN</span> <span class=\"comment\">// &#x27;number&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>（2）运算规则</strong></p>\n<p><code>NaN</code>不等于任何值，包括它本身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>数组的<code>indexOf</code>方法内部使用的是严格相等运算符，所以该方法对<code>NaN</code>不成立。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"literal\">NaN</span>].indexOf(<span class=\"literal\">NaN</span>) <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n<p><code>NaN</code>在布尔运算时被当作<code>false</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"literal\">NaN</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p><code>NaN</code>与任何数（包括它自己）的运算，得到的都是<code>NaN</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">NaN</span> + <span class=\"number\">32</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> - <span class=\"number\">32</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> * <span class=\"number\">32</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> / <span class=\"number\">32</span> <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"infinity\">Infinity</h4>\n<p><strong>（1）含义</strong></p>\n<p><code>Infinity</code>表示“无穷”，用来表示两种场景。一种是一个正的数值太大，或一个负的数值太小，无法表示；另一种是非0数值除以0，得到<code>Infinity</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 场景一</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\"><span class=\"comment\">// Infinity</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 场景二</span></span><br><span class=\"line\"><span class=\"number\">0</span> / <span class=\"number\">0</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"number\">1</span> / <span class=\"number\">0</span> <span class=\"comment\">// Infinity</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，第一个场景是一个表达式的计算结果太大，超出了能够表示的范围，因此返回<code>Infinity</code>。第二个场景是<code>0</code>除以<code>0</code>会得到<code>NaN</code>，而非0数值除以<code>0</code>，会返回<code>Infinity</code>。</p>\n<p><code>Infinity</code>有正负之分，<code>Infinity</code>表示正的无穷，<code>-Infinity</code>表示负的无穷。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">Infinity</span> === -<span class=\"literal\">Infinity</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> / -<span class=\"number\">0</span> <span class=\"comment\">// -Infinity</span></span><br><span class=\"line\">-<span class=\"number\">1</span> / -<span class=\"number\">0</span> <span class=\"comment\">// Infinity</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，非零正数除以<code>-0</code>，会得到<code>-Infinity</code>，负数除以<code>-0</code>，会得到<code>Infinity</code>。</p>\n<p>由于数值正向溢出（overflow）、负向溢出（underflow）和被<code>0</code>除，JavaScript 都不报错，所以单纯的数学运算几乎没有可能抛出错误。</p>\n<p><code>Infinity</code>大于一切数值（除了<code>NaN</code>），<code>-Infinity</code>小于一切数值（除了<code>NaN</code>）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">Infinity</span> &gt; <span class=\"number\">1000</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">-<span class=\"literal\">Infinity</span> &lt; -<span class=\"number\">1000</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><code>Infinity</code>与<code>NaN</code>比较，总是返回<code>false</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">Infinity</span> &gt; <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">-<span class=\"literal\">Infinity</span> &gt; <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">Infinity</span> &lt; <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">-<span class=\"literal\">Infinity</span> &lt; <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p><strong>（2）运算规则</strong></p>\n<p><code>Infinity</code>的四则运算，符合无穷的数学计算规则。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span> * <span class=\"literal\">Infinity</span> <span class=\"comment\">// Infinity</span></span><br><span class=\"line\"><span class=\"number\">5</span> - <span class=\"literal\">Infinity</span> <span class=\"comment\">// -Infinity</span></span><br><span class=\"line\"><span class=\"literal\">Infinity</span> / <span class=\"number\">5</span> <span class=\"comment\">// Infinity</span></span><br><span class=\"line\"><span class=\"number\">5</span> / <span class=\"literal\">Infinity</span> <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<p>0乘以<code>Infinity</code>，返回<code>NaN</code>；0除以<code>Infinity</code>，返回<code>0</code>；<code>Infinity</code>除以0，返回<code>Infinity</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> * <span class=\"literal\">Infinity</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"number\">0</span> / <span class=\"literal\">Infinity</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"literal\">Infinity</span> / <span class=\"number\">0</span> <span class=\"comment\">// Infinity</span></span><br></pre></td></tr></table></figure>\n<p><code>Infinity</code>加上或乘以<code>Infinity</code>，返回的还是<code>Infinity</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">Infinity</span> + <span class=\"literal\">Infinity</span> <span class=\"comment\">// Infinity</span></span><br><span class=\"line\"><span class=\"literal\">Infinity</span> * <span class=\"literal\">Infinity</span> <span class=\"comment\">// Infinity</span></span><br></pre></td></tr></table></figure>\n<p><code>Infinity</code>减去或除以<code>Infinity</code>，得到<code>NaN</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">Infinity</span> - <span class=\"literal\">Infinity</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"literal\">Infinity</span> / <span class=\"literal\">Infinity</span> <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p><code>Infinity</code>与<code>null</code>计算时，<code>null</code>会转成0，等同于与<code>0</code>的计算。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span> * <span class=\"literal\">Infinity</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"literal\">null</span> / <span class=\"literal\">Infinity</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"literal\">Infinity</span> / <span class=\"literal\">null</span> <span class=\"comment\">// Infinity</span></span><br></pre></td></tr></table></figure>\n<p><code>Infinity</code>与<code>undefined</code>计算，返回的都是<code>NaN</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">undefined</span> + <span class=\"literal\">Infinity</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> - <span class=\"literal\">Infinity</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> * <span class=\"literal\">Infinity</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span> / <span class=\"literal\">Infinity</span> <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"literal\">Infinity</span> / <span class=\"literal\">undefined</span> <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"与数值相关的全局方法\">与数值相关的全局方法</h3>\n<h4 id=\"parseint\">parseInt()</h4>\n<p><strong>（1）基本用法</strong></p>\n<p><code>parseInt</code>方法用于将字符串转为整数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;123&#x27;</span>) <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></figure>\n<p>如果字符串头部有空格，空格会被自动去除。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;   81&#x27;</span>) <span class=\"comment\">// 81</span></span><br></pre></td></tr></table></figure>\n<p>如果<code>parseInt</code>的参数不是字符串，则会先转为字符串再转换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"number\">1.23</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;1.23&#x27;</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;8a&#x27;</span>) <span class=\"comment\">// 8</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;12**&#x27;</span>) <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;12.34&#x27;</span>) <span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;15e2&#x27;</span>) <span class=\"comment\">// 15</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;15px&#x27;</span>) <span class=\"comment\">// 15</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>parseInt</code>的参数都是字符串，结果只返回字符串头部可以转为数字的部分。</p>\n<p>如果字符串的第一个字符不能转化为数字（后面跟着数字的正负号除外），返回<code>NaN</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;abc&#x27;</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;.3&#x27;</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;+&#x27;</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;+1&#x27;</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>所以，<code>parseInt</code>的返回值只有两种可能，要么是一个十进制整数，要么是<code>NaN</code>。</p>\n<p>如果字符串以<code>0x</code>或<code>0X</code>开头，<code>parseInt</code>会将其按照十六进制数解析。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;0x10&#x27;</span>) <span class=\"comment\">// 16</span></span><br></pre></td></tr></table></figure>\n<p>如果字符串以<code>0</code>开头，将其按照10进制解析。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;011&#x27;</span>) <span class=\"comment\">// 11</span></span><br></pre></td></tr></table></figure>\n<p>对于那些会自动转为科学计数法的数字，<code>parseInt</code>会将科学计数法的表示方法视为字符串，因此导致一些奇怪的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"number\">1000000000000000000000.5</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;1e+21&#x27;</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"number\">0.0000008</span>) <span class=\"comment\">// 8</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;8e-7&#x27;</span>) <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n<p><strong>（2）进制转换</strong></p>\n<p><code>parseInt</code>方法还可以接受第二个参数（2到36之间），表示被解析的值的进制，返回该值对应的十进制数。默认情况下，<code>parseInt</code>的第二个参数为10，即默认是十进制转十进制。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;1000&#x27;</span>) <span class=\"comment\">// 1000</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;1000&#x27;</span>, <span class=\"number\">10</span>) <span class=\"comment\">// 1000</span></span><br></pre></td></tr></table></figure>\n<p>下面是转换指定进制的数的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;1000&#x27;</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 8</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;1000&#x27;</span>, <span class=\"number\">6</span>) <span class=\"comment\">// 216</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;1000&#x27;</span>, <span class=\"number\">8</span>) <span class=\"comment\">// 512</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，二进制、六进制、八进制的<code>1000</code>，分别等于十进制的8、216和512。这意味着，可以用<code>parseInt</code>方法进行进制的转换。</p>\n<p>如果第二个参数不是数值，会被自动转为一个整数。这个整数只有在2到36之间，才能得到有意义的结果，超出这个范围，则返回<code>NaN</code>。如果第二个参数是<code>0</code>、<code>undefined</code>和<code>null</code>，则直接忽略。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;10&#x27;</span>, <span class=\"number\">37</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;10&#x27;</span>, <span class=\"number\">1</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;10&#x27;</span>, <span class=\"number\">0</span>) <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;10&#x27;</span>, <span class=\"literal\">null</span>) <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;10&#x27;</span>, <span class=\"literal\">undefined</span>) <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>如果字符串包含对于指定进制无意义的字符，则从最高位开始，只返回可以转换的数值。如果最高位无法转换，则直接返回<code>NaN</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;1546&#x27;</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;546&#x27;</span>, <span class=\"number\">2</span>) <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，对于二进制来说，<code>1</code>是有意义的字符，<code>5</code>、<code>4</code>、<code>6</code>都是无意义的字符，所以第一行返回1，第二行返回<code>NaN</code>。</p>\n<p>前面说过，如果<code>parseInt</code>的第一个参数不是字符串，会被先转为字符串。这会导致一些令人意外的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"number\">0x11</span>, <span class=\"number\">36</span>) <span class=\"comment\">// 43</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"number\">0x11</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"built_in\">String</span>(<span class=\"number\">0x11</span>), <span class=\"number\">36</span>)</span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"built_in\">String</span>(<span class=\"number\">0x11</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;17&#x27;</span>, <span class=\"number\">36</span>)</span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;17&#x27;</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>上面代码中，十六进制的<code>0x11</code>会被先转为十进制的17，再转为字符串。然后，再用36进制或二进制解读字符串<code>17</code>，最后返回结果<code>43</code>和<code>1</code>。</p>\n<p>这种处理方式，对于八进制的前缀0，尤其需要注意。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"number\">011</span>, <span class=\"number\">2</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"built_in\">String</span>(<span class=\"number\">011</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"built_in\">String</span>(<span class=\"number\">9</span>), <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>上面代码中，第一行的<code>011</code>会被先转为字符串<code>9</code>，因为<code>9</code>不是二进制的有效字符，所以返回<code>NaN</code>。如果直接计算<code>parseInt('011', 2)</code>，<code>011</code>则是会被当作二进制处理，返回3。</p>\n<p>JavaScript 不再允许将带有前缀0的数字视为八进制数，而是要求忽略这个<code>0</code>。但是，为了保证兼容性，大部分浏览器并没有部署这一条规定。</p>\n<h4 id=\"parsefloat\">parseFloat()</h4>\n<p><code>parseFloat</code>方法用于将一个字符串转为浮点数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;3.14&#x27;</span>) <span class=\"comment\">// 3.14</span></span><br></pre></td></tr></table></figure>\n<p>如果字符串符合科学计数法，则会进行相应的转换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;314e-2&#x27;</span>) <span class=\"comment\">// 3.14</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;0.0314E+2&#x27;</span>) <span class=\"comment\">// 3.14</span></span><br></pre></td></tr></table></figure>\n<p>如果字符串包含不能转为浮点数的字符，则不再进行往后转换，返回已经转好的部分。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;3.14more non-digit characters&#x27;</span>) <span class=\"comment\">// 3.14</span></span><br></pre></td></tr></table></figure>\n<p><code>parseFloat</code>方法会自动过滤字符串前导的空格。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;\\t\\v\\r12.34\\n &#x27;</span>) <span class=\"comment\">// 12.34</span></span><br></pre></td></tr></table></figure>\n<p>如果参数不是字符串，或者字符串的第一个字符不能转化为浮点数，则返回<code>NaN</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseFloat</span>([]) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;FF2&#x27;</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，尤其值得注意，<code>parseFloat</code>会将空字符串转为<code>NaN</code>。</p>\n<p>这些特点使得<code>parseFloat</code>的转换结果不同于<code>Number</code>函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"literal\">true</span>)  <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">true</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">&#x27;123.45#&#x27;</span>) <span class=\"comment\">// 123.45</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;123.45#&#x27;</span>) <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"isnan\">isNaN()</h4>\n<p><code>isNaN</code>方法可以用来判断一个值是否为<code>NaN</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"number\">123</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>但是，<code>isNaN</code>只对数值有效，如果传入其他值，会被先转成数值。比如，传入字符串的时候，字符串会被先转成<code>NaN</code>，所以最后返回<code>true</code>，这一点要特别引起注意。也就是说，<code>isNaN</code>为<code>true</code>的值，有可能不是<code>NaN</code>，而是一个字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"string\">&#x27;Hello&#x27;</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 相当于</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"built_in\">Number</span>(<span class=\"string\">&#x27;Hello&#x27;</span>)) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>出于同样的原因，对于对象和数组，<code>isNaN</code>也返回<code>true</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(&#123;&#125;) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"built_in\">Number</span>(&#123;&#125;)) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>([<span class=\"string\">&#x27;xzy&#x27;</span>]) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"built_in\">Number</span>([<span class=\"string\">&#x27;xzy&#x27;</span>])) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>但是，对于空数组和只有一个数值成员的数组，<code>isNaN</code>返回<code>false</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>([]) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>([<span class=\"number\">123</span>]) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>([<span class=\"string\">&#x27;123&#x27;</span>]) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>上面代码之所以返回<code>false</code>，原因是这些数组能被<code>Number</code>函数转成数值，请参见《数据类型转换》一章。</p>\n<p>因此，使用<code>isNaN</code>之前，最好判断一下数据类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myIsNaN</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> value === <span class=\"string\">&#x27;number&#x27;</span> &amp;&amp; <span class=\"built_in\">isNaN</span>(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>判断<code>NaN</code>更可靠的方法是，利用<code>NaN</code>为唯一不等于自身的值的这个特点，进行判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myIsNaN</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value !== value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"isfinite\">isFinite()</h4>\n<p><code>isFinite</code>方法返回一个布尔值，表示某个值是否为正常的数值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isFinite</span>(<span class=\"literal\">Infinity</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isFinite</span>(-<span class=\"literal\">Infinity</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isFinite</span>(<span class=\"literal\">NaN</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isFinite</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isFinite</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">isFinite</span>(-<span class=\"number\">1</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>除了<code>Infinity</code>、<code>-Infinity</code>、<code>NaN</code>和<code>undefined</code>这几个值会返回<code>false</code>，<code>isFinite</code>对于其他的数值都会返回<code>true</code>。</p>\n<h3 id=\"属性\">属性</h3>\n<h4 id=\"属性的查看\">属性的查看</h4>\n<p>查看一个对象本身的所有属性，可以使用<code>Object.keys</code>方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">key1</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">key2</span>: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;key1&#x27;, &#x27;key2&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"属性的删除delete-命令\">属性的删除：delete 命令</h4>\n<p><code>delete</code>命令用于删除对象的属性，删除成功后返回<code>true</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">p</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(obj) <span class=\"comment\">// [&quot;p&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.p <span class=\"comment\">// true</span></span><br><span class=\"line\">obj.p <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(obj) <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>delete</code>命令删除对象<code>obj</code>的<code>p</code>属性。删除后，再读取<code>p</code>属性就会返回<code>undefined</code>，而且<code>Object.keys</code>方法的返回值也不再包括该属性。</p>\n<p>注意，删除一个不存在的属性，<code>delete</code>不报错，而且返回<code>true</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.p <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码中，对象<code>obj</code>并没有<code>p</code>属性，但是<code>delete</code>命令照样返回<code>true</code>。因此，不能根据<code>delete</code>命令的结果，认定某个属性是存在的。</p>\n</blockquote>\n<p>只有一种情况，<code>delete</code>命令会返回<code>false</code>，那就是该属性存在，且不得删除。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.defineProperty(&#123;&#125;, <span class=\"string\">&#x27;p&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">123</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.p <span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.p <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>上面代码之中，对象<code>obj</code>的<code>p</code>属性是不能删除的，所以<code>delete</code>命令返回<code>false</code>（关于<code>Object.defineProperty</code>方法的介绍，请看《标准库》的 Object 对象一章）。</p>\n<p>另外，需要注意的是，<code>delete</code>命令只能删除对象本身的属性，无法删除继承的属性（关于继承参见《面向对象编程》章节）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.toString <span class=\"comment\">// true</span></span><br><span class=\"line\">obj.toString <span class=\"comment\">// function toString() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>toString</code>是对象<code>obj</code>继承的属性，虽然<code>delete</code>命令返回<code>true</code>，但该属性并没有被删除，依然存在。这个例子还说明，即使<code>delete</code>返回<code>true</code>，该属性依然可能读取到值。</p>\n<h4 id=\"属性是否存在in-运算符\">属性是否存在：in 运算符</h4>\n<p><code>in</code>运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回<code>true</code>，否则返回<code>false</code>。它的左边是一个字符串，表示属性名，右边是一个对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">p</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"string\">&#x27;p&#x27;</span> <span class=\"keyword\">in</span> obj <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&#x27;toString&#x27;</span> <span class=\"keyword\">in</span> obj <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><strong><code>in</code>运算符的一个问题是，它不能识别哪些属性是对象自身的，哪些属性是继承的</strong>。就像上面代码中，对象<code>obj</code>本身并没有<code>toString</code>属性，但是<code>in</code>运算符会返回<code>true</code>，因为这个属性是继承的。</p>\n<p>这时，<strong>可以使用对象的<code>hasOwnProperty</code>方法判断一下，是否为对象自身的属性。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&#x27;toString&#x27;</span> <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj.hasOwnProperty(<span class=\"string\">&#x27;toString&#x27;</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"with-语句\">with 语句</h4>\n<p><code>with</code>语句的格式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> (对象) &#123;</span><br><span class=\"line\">  语句;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>它的作用是操作同一个对象的多个属性时，提供一些书写的方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">p1</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">p2</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">with</span> (obj) &#123;</span><br><span class=\"line\">  p1 = <span class=\"number\">4</span>;</span><br><span class=\"line\">  p2 = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">obj.p1 = <span class=\"number\">4</span>;</span><br><span class=\"line\">obj.p2 = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例二</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> (<span class=\"built_in\">document</span>.links[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(href);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(title);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(style);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.links[<span class=\"number\">0</span>].href);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.links[<span class=\"number\">0</span>].title);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.links[<span class=\"number\">0</span>].style);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，如果<code>with</code>区块内部有变量的赋值操作，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">with</span> (obj) &#123;</span><br><span class=\"line\">  p1 = <span class=\"number\">4</span>;</span><br><span class=\"line\">  p2 = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.p1 <span class=\"comment\">// undefined</span></span><br><span class=\"line\">p1 <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，对象<code>obj</code>并没有<code>p1</code>属性，对<code>p1</code>赋值等于创造了一个全局变量<code>p1</code>。正确的写法应该是，先定义对象<code>obj</code>的属性<code>p1</code>，然后在<code>with</code>区块内操作它。</p>\n<p>这是因为<code>with</code>区块没有改变作用域，它的内部依然是当前作用域。这造成了<code>with</code>语句的一个很大的弊病，就是绑定对象不明确。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> (obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>单纯从上面的代码块，根本无法判断<code>x</code>到底是全局变量，还是对象<code>obj</code>的一个属性。这非常不利于代码的除错和模块化，编译器也无法对这段代码进行优化，只能留到运行时判断，这就拖慢了运行速度。因此，建议不要使用<code>with</code>语句，可以考虑用一个临时变量代替<code>with</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">with</span>(<span class=\"params\">obj1.obj2.obj3</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p1 + p2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以写成</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = obj1.obj2.obj3;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(temp.p1 + temp.p2);</span><br></pre></td></tr></table></figure>\n","categories":["JavaScript"],"tags":["Tutorial"]},{"title":"关于SwiftUI简单笔记","url":"/2023/11/10/%E5%85%B3%E4%BA%8ESwiftUI%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/","content":"<p>此博客记录在TwT时开发WeiPeiyang 4.0的SwiftUI笔记📒</p>\n<p><span id=\"more\"></span></p>\n<h1 id=\"基础模块\">基础模块</h1>\n<p><strong>关于照片变成纯蓝色</strong></p>\n<p>如果您发现图像已被某种颜色填充，例如显示为纯蓝色而不是实际图片，则可能是SwiftUI为它们着色以显示它们是可轻敲的。要解决此问题，请使用<code>renderingMode(.original)</code>修饰符强制SwiftUI显示原始图像，而不是重新着色的版本。</p>\n<h2 id=\"自定义修饰符\">自定义修饰符</h2>\n<p>SwiftUI为我们提供了内置的改性剂，如一系列的<code>font()</code>，<code>background()</code>和<code>clipShape()</code>。但是，也可以创建执行特定操作的自定义修饰符。</p>\n<p>例如，我们可能会说应用程序中的所有标题都应具有特定的样式，因此首先我们需要创建一个自定义<code>ViewModifier</code>结构来实现我们想要的功能：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Title</span>: <span class=\"title\">ViewModifier</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">body</span>(<span class=\"params\">content</span>: <span class=\"type\">Content</span>)</span> -&gt; <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        content</span><br><span class=\"line\">            .font(.largeTitle)</span><br><span class=\"line\">            .foregroundColor(.white)</span><br><span class=\"line\">            .padding()</span><br><span class=\"line\">            .background(<span class=\"type\">Color</span>.blue)</span><br><span class=\"line\">            .clipShape(<span class=\"type\">RoundedRectangle</span>(cornerRadius: <span class=\"number\">10</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，我们可以将其与<code>modifier()</code>修饰符一起使用-是的，它是一个称为“修饰符”的修饰符，但是它允许我们将任何种类的修饰符应用于视图，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">    .modifier(<span class=\"type\">Title</span>())</span><br></pre></td></tr></table></figure>\n<p>使用自定义修饰符时，通常在其上创建扩展<code>View</code>使其易于使用的明智之举。例如，我们可以将<code>Title</code>修饰符包装在如下扩展中：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">titleStyle</span>()</span> -&gt; <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.modifier(<span class=\"type\">Title</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们现在可以像这样使用修饰符：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">    .titleStyle()</span><br></pre></td></tr></table></figure>\n<p>自定义修改器不仅可以应用其他现有修改器，还可以做更多的工作-它们还可以根据需要创建新的视图结构。记住，修饰符会返回新对象，而不是修改现有对象，因此我们可以创建一个将视图嵌入堆栈并添加另一个视图的对象：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Watermark</span>: <span class=\"title\">ViewModifier</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> text: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">body</span>(<span class=\"params\">content</span>: <span class=\"type\">Content</span>)</span> -&gt; <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ZStack</span>(alignment: .bottomTrailing) &#123;</span><br><span class=\"line\">            content</span><br><span class=\"line\">            <span class=\"type\">Text</span>(text)</span><br><span class=\"line\">                .font(.caption)</span><br><span class=\"line\">                .foregroundColor(.white)</span><br><span class=\"line\">                .padding(<span class=\"number\">5</span>)</span><br><span class=\"line\">                .background(<span class=\"type\">Color</span>.black)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">watermarked</span>(<span class=\"params\">with</span> <span class=\"params\">text</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.modifier(<span class=\"type\">Watermark</span>(text: text))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有了它，我们现在可以为任何视图添加水印，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Color</span>.blue</span><br><span class=\"line\">    .frame(width: <span class=\"number\">300</span>, height: <span class=\"number\">200</span>)</span><br><span class=\"line\">    .watermarked(with: <span class=\"string\">&quot;Hacking with Swift&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义容器\">自定义容器</h2>\n<p>尽管您不太可能经常这样做，但我至少想向您展示，在SwiftUI应用程序中完全有可能创建自定义容器。这需要更高级的Swift知识，因为它利用了Swift的一些强大功能，因此，如果发现太多，可以跳过。</p>\n<p>为了进行试验，我们将创建一种称为a的新型堆栈<code>GridStack</code>，这将使我们能够在网格内创建任意数量的视图。我们要说的是，有一个名为struct的新结构<code>GridStack</code>，它符合<code>View</code>协议并且具有一定数量的行和列，并且在网格内部将有很多内容单元格，它们本身必须符合<code>View</code>协议。</p>\n<p>在Swift中，我们可以这样写：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">GridStack</span>&lt;<span class=\"title\">Content</span>: <span class=\"title\">View</span>&gt;: <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rows: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> columns: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> content: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Content</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// more to come</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一行– <code>struct GridStack: View</code>使用Swift的一个更高级的功能，称为<em>通用（generics）</em>，在这种情况下，这意味着“您可以提供所需的任何种类的内容，但是无论其内容必须符合<code>View</code>协议。” 在冒号之后，我们<code>View</code>再次重复说，<code>GridStack</code>它本身也符合<code>View</code>协议。</p>\n<p>请特别注意这一<code>let content</code>行–定义了一个闭包，该闭包必须能够接受两个整数并返回我们可以显示的某种内容。</p>\n<p>我们需要通过<code>body</code>组合多个垂直和水平堆栈以创建所需数量的单元格来完成该属性。我们不需要说什么是<em>在</em>每个单元中，因为我们可以得到通过拨打我们<code>content</code>用适当的行和列关闭。</p>\n<p>因此，我们可以这样填写：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ForEach</span>(<span class=\"number\">0</span><span class=\"operator\">..&lt;</span>rows, id: \\.<span class=\"keyword\">self</span>) &#123; row <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"type\">HStack</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">ForEach</span>(<span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"keyword\">self</span>.columns, id: \\.<span class=\"keyword\">self</span>) &#123; column <span class=\"keyword\">in</span></span><br><span class=\"line\">                    <span class=\"keyword\">self</span>.content(row, column)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong>在范围上循环时，只有在我们确定范围内的值不会随时间变化时，SwiftUI才能直接使用范围。在这里，我们使用<code>ForEach</code>with <code>0..和</code>0..，这两个值都是<em>可以</em>随时间变化的值-例如，我们可以添加更多行。在这种情况下，我们需要添加第二个参数<code>ForEach</code>，<code>id: \\.self</code>以告诉SwiftUI它如何能够识别环路中的每个视图。我们将在项目5中对此进行更详细的介绍。</p>\n<p>现在我们有了一个自定义容器，我们可以使用它来编写一个视图，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ContentView</span>: <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">GridStack</span>(rows: <span class=\"number\">4</span>, columns: <span class=\"number\">4</span>) &#123; row, col <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;R<span class=\"subst\">\\(row)</span> C<span class=\"subst\">\\(col)</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>GridStack</code>只要符合<code>View</code>协议，我们就能接受任何种类的细胞内容。因此，如果需要，我们可以给单元格一个堆栈：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">GridStack</span>(rows: <span class=\"number\">4</span>, columns: <span class=\"number\">4</span>) &#123; row, col <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"type\">HStack</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Image</span>(systemName: <span class=\"string\">&quot;<span class=\"subst\">\\(row <span class=\"operator\">*</span> <span class=\"number\">4</span> <span class=\"operator\">+</span> col)</span>.circle&quot;</span>)</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"string\">&quot;R<span class=\"subst\">\\(row)</span> C<span class=\"subst\">\\(col)</span>&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"想走得更远吗\">想走得更远吗？</h3>\n<p>为了获得更大的灵活性，我们可以利用SwiftUI的一种称为<em>视图构建器</em>的功能，该功能允许我们发送多个视图并将其形成隐式堆栈。</p>\n<p>要使用此功能，我们需要为我们的<code>GridStack</code>结构创建一个自定义初始化程序，因此我们可以将<code>content</code>关闭标记为使用SwiftUI的视图构建器系统：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"params\">rows</span>: <span class=\"type\">Int</span>, <span class=\"params\">columns</span>: <span class=\"type\">Int</span>, <span class=\"meta\">@ViewBuilder</span> <span class=\"params\">content</span>: <span class=\"keyword\">@escaping</span> (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Content</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.rows <span class=\"operator\">=</span> rows</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.columns <span class=\"operator\">=</span> columns</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.content <span class=\"operator\">=</span> content</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多数情况下，只是将参数直接复制到结构的属性中，但请注意该<code>@ViewBuilder</code>属性在那里。您还将看到该<code>@escaping</code>属性，该属性使我们可以存储闭包，以备后用。</p>\n<p>有了适当的设置，SwiftUI现在将在我们的单元格封闭内部自动创建一个隐式水平堆栈：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">GridStack</span>(rows: <span class=\"number\">4</span>, columns: <span class=\"number\">4</span>) &#123; row, col <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"type\">Image</span>(systemName: <span class=\"string\">&quot;<span class=\"subst\">\\(row <span class=\"operator\">*</span> <span class=\"number\">4</span> <span class=\"operator\">+</span> col)</span>.circle&quot;</span>)</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;R<span class=\"subst\">\\(row)</span> C<span class=\"subst\">\\(col)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这两个选项均有效，所以无论您喜欢哪个都可以。</p>\n<h2 id=\"用步进器输入数字\">用步进器输入数字</h2>\n<p>SwiftUI有两种让用户输入数字的方式，我们将在这里使用的一种方式是<code>Stepper</code>：一个简单的-和+按钮，可以点击以选择一个精确的数字。另一个选项是<code>Slider</code>，我们稍后将使用它-它也使我们可以从一系列值中进行选择，但不太精确。</p>\n<p>步进电机是足够聪明，将工作与任何类型的号码类型的你喜欢-你可以绑定他们<code>Int</code>，<code>Double</code>和更多的，它会自动适应。例如，我们可以创建如下属性：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> sleepAmount <span class=\"operator\">=</span> <span class=\"number\">8.0</span></span><br></pre></td></tr></table></figure>\n<p>然后，我们可以将其绑定到步进器，以使其显示当前值，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Stepper</span>(value: <span class=\"variable\">$sleepAmount</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(sleepAmount)</span> hours&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该代码运行时，您会看到800万小时，然后可以按-和+向下跳至7、6、5并变为负数，或者向上跳至9、10、11，依此类推。</p>\n<p>默认情况下，步进器仅受其存储范围的限制。<code>Double</code>在此示例中，我们使用a ，这意味着滑块的最大值将为1.7976931348623157e + 308。这是科学的表示法，但是它的意思是“ 1.79769乘以10的308的幂” –或更简单地说，确实是一个非常大的数字。</p>\n<p><code>Stepper</code>让我们通过提供一个<code>in</code>范围来限制我们想要接受的值，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Stepper</span>(value: <span class=\"variable\">$sleepAmount</span>, in: <span class=\"number\">4</span><span class=\"operator\">...</span><span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(sleepAmount)</span> hours&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有了这一更改，步进器将从8开始，然后允许用户在4到12（含）之间移动，但不能超过。这使我们可以控制睡眠范围，以使用户无法尝试24小时不睡觉，但也可以让我们拒绝不可能的值-例如，您不能睡眠-1小时。</p>\n<p>第三个有用的参数是<code>Stepper</code>，它是一个<code>step</code>值-每次将值移动多远-或+被点击。同样，它可以是任何类型的数字，但确实需要匹配用于绑定的类型。因此，如果要绑定到整数，则不能使用a <code>Double</code>作为步长值。</p>\n<p>在这种情况下，我们可以说用户可以选择4到12之间的任何睡眠值，以15分钟为增量移动：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Stepper</span>(value: <span class=\"variable\">$sleepAmount</span>, in: <span class=\"number\">4</span><span class=\"operator\">...</span><span class=\"number\">12</span>, step: <span class=\"number\">0.25</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(sleepAmount)</span> hours&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这开始看起来很有用–我们拥有合理范围的精确值，合理的步长增量，并且用户每次都能准确看到他们选择的内容。</p>\n<p>不过，在继续之前，让我们修复该文本：它现在显示为8.000000，这是准确的，但有点<em>过于</em>精确。以前，我们使用如下字符串内插说明符：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Text</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(sleepAmount, specifier: <span class=\"string\">&quot;%.2f&quot;</span>)</span> hours&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>我们可以在这里使用它，但看起来很奇怪：“ 8.00小时”似乎过于临床。这是“％g”说明符在其中有用的一个很好的示例，因为它会自动从数字末尾删除不重要的零。因此，它将显示8、8.25、8.5、8.75、9，依此类推，这对于用户而言更自然。</p>\n<h2 id=\"使用datepicker\">使用DatePicker</h2>\n<p>SwiftUI为我们提供了一种专用的选择器类型<code>DatePicker</code>，该类型可以绑定到date属性。是的，Swift有一个专用的日期类型，它被称为–毫不奇怪 <code>Date</code>。</p>\n<p>因此，要使用它，您将从一个<code>@State</code>这样的属性开始：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> wakeUp <span class=\"operator\">=</span> <span class=\"type\">Date</span>()</span><br></pre></td></tr></table></figure>\n<p>然后，您可以将其绑定到日期选择器，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">DatePicker</span>(<span class=\"string\">&quot;Please enter a date&quot;</span>, selection: <span class=\"variable\">$wakeUp</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>尝试在模拟器中运行该代码，以便查看其外观。您应该会看到带有日期和时间的手纺车轮，以及左侧的“请输入日期”标签。</p>\n<p>现在，您可能会认为该标签看起来丑陋，并尝试用以下标签替换它：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DatePicker</span>(<span class=\"string\">&quot;&quot;</span>, selection: <span class=\"variable\">$wakeUp</span>)</span><br></pre></td></tr></table></figure>\n<p>但是，如果这样做，您将遇到<em>两个</em>问题：日期选择器即使标签为空也仍然为标签留出空间，并且屏幕阅读器处于活动状态的用户（我们对VoiceOver更为熟悉）不会知道日期是什么选择器是为。</p>\n<p>有两种选择，都可以解决问题。</p>\n<p>首先，我们可以将包裹在<code>DatePicker</code>中<code>Form</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Form</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DatePicker</span>(<span class=\"string\">&quot;Please enter a date&quot;</span>, selection: <span class=\"variable\">$wakeUp</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就像常规一样，<code>Picker</code>这会改变SwiftUI呈现视图的方式。但是，这次我们没有得到新的观点<code>NavigationView</code>。取而代之的是，我们得到一个列表行，当点击它时它会折叠成日期选择器。</p>\n<p>这看起来<em>非常</em>好，并且将表单的简洁性与日期选择器熟悉的基于轮的用户界面相结合。可悲的是，现在这些选择器的显示方式有时会出现一些故障。我们稍后再讲。</p>\n<p>除了使用表单，还可以使用<code>labelsHidden()</code>修饰符，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">DatePicker</span>(<span class=\"string\">&quot;Please enter a date&quot;</span>, selection: <span class=\"variable\">$wakeUp</span>)</span><br><span class=\"line\">        .labelsHidden()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该标签仍包含原始标签，因此屏幕阅读器可以将其用于VoiceOver，但现在它们在屏幕上不再可见-日期选择器将占据屏幕上的所有水平空间。</p>\n<p>日期选择器为我们提供了几个配置选项，以控制它们的工作方式。首先，我们可以<code>displayedComponents</code>用来决定用户应该看到哪种选项：</p>\n<ul>\n<li>如果不提供此参数，则用户会看到一天，一小时和一分钟。</li>\n<li>如果使用<code>.date</code>用户，请查看月，日和年。</li>\n<li>如果使用<code>.hourAndMinute</code>用户，则仅会看到小时和分钟。</li>\n</ul>\n<p>因此，我们可以选择这样的精确时间：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DatePicker</span>(<span class=\"string\">&quot;Please enter a time&quot;</span>, selection: <span class=\"variable\">$wakeUp</span>, displayedComponents: .hourAndMinute)</span><br></pre></td></tr></table></figure>\n<p>最后，有一个<code>in</code>参数与之作用相同<code>Stepper</code>：我们可以为它提供一个日期范围，并且日期选择器将确保用户不能选择超出范围。</p>\n<p>现在，我们已经使用一段时间了，您已经习惯于看到诸如<code>1 ... 5</code>或的东西<code>0 ..&lt; 10</code>，但是我们也可以将Swift日期与范围一起使用。例如：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// when you create a new Date instance it will be set to the current date and time</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> now <span class=\"operator\">=</span> <span class=\"type\">Date</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// create a second Date instance set to one day in seconds from now</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tomorrow <span class=\"operator\">=</span> <span class=\"type\">Date</span>().addingTimeInterval(<span class=\"number\">86400</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// create a range from those two</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> range <span class=\"operator\">=</span> now <span class=\"operator\">...</span> tomorrow</span><br></pre></td></tr></table></figure>\n<p>确实对有用<code>DatePicker</code>，但还有更好的地方：Swift让我们形成<em>一个单边范围</em> –我们指定起始或结束但不同时指定两个范围的范围，而让Swift推断另一边。</p>\n<p>例如，我们可以这样创建一个日期选择器：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DatePicker</span>(<span class=\"string\">&quot;Please enter a date&quot;</span>, selection: <span class=\"variable\">$wakeUp</span>, in: <span class=\"type\">Date</span>()<span class=\"operator\">...</span>)</span><br></pre></td></tr></table></figure>\n<p>这将允许将来使用所有日期，但不能使用过去的日期-读作“从当前日期到任何日期”。</p>\n<h3 id=\"datecomponents\">DateComponents</h3>\n<p>Swift为此有一种略有不同的类型，称为<code>DateComponents</code>，它使我们可以读取或写入日期的特定部分而不是整个内容。</p>\n<p>因此，如果我们想要一个表示今天上午8点的日期，我们可以编写如下代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> components <span class=\"operator\">=</span> <span class=\"type\">DateComponents</span>()</span><br><span class=\"line\">components.hour <span class=\"operator\">=</span> <span class=\"number\">8</span></span><br><span class=\"line\">components.minute <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> date <span class=\"operator\">=</span> <span class=\"type\">Calendar</span>.current.date(from: components)</span><br></pre></td></tr></table></figure>\n<p>现在，由于日期验证方面的困难，该<code>date(from:)</code>方法实际上返回了一个可选日期，因此最好使用nil合并来表示“如果失败，请给我返回当前日期”，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> date <span class=\"operator\">=</span> <span class=\"type\">Calendar</span>.current.date(from: components) <span class=\"operator\">??</span> <span class=\"type\">Date</span>()</span><br></pre></td></tr></table></figure>\n<p>第二个挑战是我们如何阅读他们想要醒来的时间。请记住，<code>DatePicker</code>这势必<code>Date</code>会给我们带来很多信息，因此我们需要找到一种仅提取小时和分钟组成部分的方法。</p>\n<p>再一次，您<code>DateComponents</code>需要进行救援：我们可以要求iOS从某个日期开始提供特定的组件，然后再将其读取。一个令人困扰的事情是，我们<em>要求</em>的值和由于工作方式而<em>获得</em>的值之间存在脱节<code>DateComponents</code>：我们可以要求小时和分钟，但是我们将返回一个<code>DateComponents</code>实例，该实例的所有属性都带有可选值。是的，我们知道小时和分钟会在那儿，因为这些正是我们所要求的，但是我们仍然需要拆开可选件或提供默认值。</p>\n<p>因此，我们可能会编写如下代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> components <span class=\"operator\">=</span> <span class=\"type\">Calendar</span>.current.dateComponents([.hour, .minute], from: someDate)</span><br><span class=\"line\"><span class=\"keyword\">let</span> hour <span class=\"operator\">=</span> components.hour <span class=\"operator\">??</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> minute <span class=\"operator\">=</span> components.minute <span class=\"operator\">??</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"dateformatter\">DateFormatter</h3>\n<p>最后的挑战是如何格式化日期和时间，而Swift再次为我们提供了一种特定的类型来为我们完成大部分工作。这次称为<code>DateFormatter</code>，它使我们可以通过多种方式将日期转换为字符串。</p>\n<p>例如，如果我们只想从日期开始的时间，则可以这样写：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> formatter <span class=\"operator\">=</span> <span class=\"type\">DateFormatter</span>()</span><br><span class=\"line\">formatter.timeStyle <span class=\"operator\">=</span> .short</span><br><span class=\"line\"><span class=\"keyword\">let</span> dateString <span class=\"operator\">=</span> formatter.string(from: <span class=\"type\">Date</span>())</span><br></pre></td></tr></table></figure>\n<p>我们还可以设置<code>.dateStyle</code>为获取日期值，甚至可以使用完全自定义格式进行传递<code>dateFormat</code>，但这超出了该项目的范围！</p>\n<hr />\n<h2 id=\"self\">\\.self</h2>\n<p>在这个项目中，我们将使用<code>List</code>稍有不同的方法，因为我们将使它在字符串数组上循环。我们已经使用<code>ForEach</code>了很多范围，无论是硬编码（<code>0..&lt;5</code>）还是依赖变量数据（<code>0 ..&lt; students.count</code>），而且效果很好，因为SwiftUI可以根据其在范围内的位置唯一地标识每一行。</p>\n<p>当处理一组数据时，SwiftUI仍然需要知道如何唯一地标识每一行，因此，如果删除了一行，则可以简单地删除该行，而不必重新绘制整个列表。这是传入<code>id</code>参数的地方，并且在这两者中都相同，<code>List</code>并且<code>ForEach</code>–使我们能够准确地告诉SwiftUI是什么使数组中的每个项目变得唯一。</p>\n<p>当使用字符串和数字数组时，使这些值唯一的是值本身。也就是说，如果我们有array <code>[2, 4, 6, 8, 10]</code>，那么这些数字本身就是唯一的标识符。毕竟，我们没有其他可使用的东西了！</p>\n<p>当使用这种列表数据时，我们将使用<code>id: \\.self</code>以下代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ContentView</span>: <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> people <span class=\"operator\">=</span> [<span class=\"string\">&quot;Finn&quot;</span>, <span class=\"string\">&quot;Leia&quot;</span>, <span class=\"string\">&quot;Luke&quot;</span>, <span class=\"string\">&quot;Rey&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">List</span>(people, id: \\.<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与相同<code>ForEach</code>，因此，如果我们想混合使用静态行和动态行，则可以这样写：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">List</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ForEach</span>(people, id: \\.<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"num\">NUM</h2>\n<p>Here's the new function:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getHaterStatus</span>(<span class=\"params\">weather</span>: <span class=\"type\">WeatherType</span>)</span> -&gt; <span class=\"type\">String</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> weather &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> .sun:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> .wind(<span class=\"keyword\">let</span> speed) <span class=\"keyword\">where</span> speed <span class=\"operator\">&lt;</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;meh&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> .cloud, .wind:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;dislike&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> .rain, .snow:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hate&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getHaterStatus(weather: <span class=\"type\">WeatherType</span>.wind(speed: <span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<p>You can see <code>.wind</code> appears in there twice, but the first time is true only if the wind is slower than 10 kilometers per hour. If the wind is 10 or above, that won't match. The key is that you use <code>let</code> to get hold of the value inside the enum (i.e. to declare a constant name you can reference) then use a <code>where</code>condition to check.</p>\n<h2 id=\"property-observers\">Property observers</h2>\n<p>Swift lets you add code to be run when a property is about to be changed or has been changed. This is frequently a good way to have a user interface update when a value changes, for example.</p>\n<p>There are two kinds of property observer: <code>willSet</code> and <code>didSet</code>, and they are called before or after a property is changed. In <code>willSet</code> Swift provides your code with a special value called <code>newValue</code> that contains what the new property value is going to be, and in <code>didSet</code> you are given <code>oldValue</code> to represent the previous value.</p>\n<p>Let's attach two property observers to the <code>clothes</code> property of a <code>Person</code> struct:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> clothes: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">willSet</span> &#123;</span><br><span class=\"line\">            updateUI(msg: <span class=\"string\">&quot;I&#x27;m changing from <span class=\"subst\">\\(clothes)</span> to <span class=\"subst\">\\(newValue)</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</span><br><span class=\"line\">            updateUI(msg: <span class=\"string\">&quot;I just changed from <span class=\"subst\">\\(oldValue)</span> to <span class=\"subst\">\\(clothes)</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">updateUI</span>(<span class=\"params\">msg</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> taylor <span class=\"operator\">=</span> <span class=\"type\">Person</span>(clothes: <span class=\"string\">&quot;T-shirts&quot;</span>)</span><br><span class=\"line\">taylor.clothes <span class=\"operator\">=</span> <span class=\"string\">&quot;short skirts&quot;</span></span><br></pre></td></tr></table></figure>\n<p>That will print out the messages \"I'm changing from T-shirts to short skirts\" and \"I just changed from T-shirts to short skirts.\"</p>\n<h2 id=\"computed-properties\">Computed properties</h2>\n<p>It's possible to make properties that are actually code behind the scenes. We already used the <code>uppercased()</code> method of strings, for example, but there’s also a property called <code>capitalized</code> that gets calculated as needed, rather than every string always storing a capitalized version of itself.</p>\n<p>To make a computed property, place an open brace after your property then use either <code>get</code> or <code>set</code> to make an action happen at the appropriate time. For example, if we wanted to add a <code>ageInDogYears</code>property that automatically returned a person's age multiplied by seven, we'd do this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ageInDogYears: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> age <span class=\"operator\">*</span> <span class=\"number\">7</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fan <span class=\"operator\">=</span> <span class=\"type\">Person</span>(age: <span class=\"number\">25</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fan.ageInDogYears)</span><br></pre></td></tr></table></figure>\n<p>Computed properties are increasingly common in Apple's code, but less common in user code.</p>\n<p><strong>Note:</strong> If you intend to use them only for <em>reading</em> data you can just remove the <code>get</code> part entirely, like this:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ageInDogYears: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> age <span class=\"operator\">*</span> <span class=\"number\">7</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"environment-modifier\">Environment modifier</h2>\n<p>As an example, this shows our four text views with the title font, but one has a large title:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Gryffindor&quot;</span>)</span><br><span class=\"line\">        .font(.largeTitle)</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hufflepuff&quot;</span>)</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Ravenclaw&quot;</span>)</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Slytherin&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.font(.title)</span><br></pre></td></tr></table></figure>\n<p>There, <code>font()</code> is an environment modifier, which means the Gryffindor text view can override it with a custom font.</p>\n<p>However, this applies a blur effect to the <code>VStack</code> then attempts to disable blurring on one of the text views:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Gryffindor&quot;</span>)</span><br><span class=\"line\">        .blur(radius: <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hufflepuff&quot;</span>)</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Ravenclaw&quot;</span>)</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;Slytherin&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.blur(radius: <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>That won’t work the same way: <code>blur()</code> is a regular modifier, so any blurs applied to child views are <em>added</em> to the <code>VStack</code> blur rather than replacing it.</p>\n<h2 id=\"string\">5. String</h2>\n<h3 id=\"components\">components</h3>\n<p>Swift提供了一种称为的方法<code>components(separatedBy:)</code>，该方法可以通过在找到另一个字符串的地方将其分解来将单个字符串转换为字符串数组。例如，这将创建数组<code>[\"a\", \"b\", \"c\"]</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> input <span class=\"operator\">=</span> <span class=\"string\">&quot;a b c&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> letters <span class=\"operator\">=</span> input.components(separatedBy: <span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"trimmingcharacter\">TrimmingCharacter</h3>\n<p>另一个有用的字符串方法是<code>trimmingCharacters(in:)</code>，它要求Swift从字符串的开头和结尾删除某些种类的字符。这使用了一种称为的新类型<code>CharacterSet</code>，但是大多数时候我们想要一种特殊的行为：删除空格和换行符–指的是同时包含空格，制表符和换行符。</p>\n<p>这种行为非常普遍，它内置在<code>CharacterSet</code>结构中，因此我们可以要求Swift在字符串的开头和结尾处修剪所有空格，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> trimmed <span class=\"operator\">=</span> letter<span class=\"operator\">?</span>.trimmingCharacters(in: .whitespacesAndNewlines)</span><br></pre></td></tr></table></figure>\n<p>### random</p>\n<p>但是Swift提供了另一个有用的选择：该<code>randomElement()</code>方法从数组中返回一个随机项。</p>\n<p>例如，这将从我们的数组中读取一个随机字母：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> letter <span class=\"operator\">=</span> letters.randomElement()</span><br></pre></td></tr></table></figure>\n<p>现在，尽管我们可以看到字母数组将包含三个项目，但是Swift并不知道这一点–例如，也许我们试图拆分一个空字符串。结果，该<code>randomElement()</code>方法返回一个可选字符串，我们必须将其解开或与nil合并一起使用。</p>\n<h3 id=\"uitextchecker\">UITextChecker</h3>\n<p>检查拼写错误的单词的能力。</p>\n<p>该功能通过类提供<code>UITextChecker</code>。您可能没有意识到这一点，但是该名称的“ UI”部分带有两个附加含义：</p>\n<ol type=\"1\">\n<li>此类来自UIKit。但是，这并不意味着我们正在加载所有旧的用户界面框架。我们实际上是通过SwiftUI自动获取的。</li>\n<li>它是使用Apple的较旧语言Objective-C编写的。我们不需要编写Objective-C来使用它，但是对于Swift用户来说，API有点笨拙。</li>\n</ol>\n<p>检查字符串中拼写错误的单词总共需要四个步骤。首先，我们创建一个要检查的单词以及一个<code>UITextChecker</code>可以用来检查该字符串的实例：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> word <span class=\"operator\">=</span> <span class=\"string\">&quot;swift&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> checker <span class=\"operator\">=</span> <span class=\"type\">UITextChecker</span>()</span><br></pre></td></tr></table></figure>\n<p>其次，我们需要告诉检查器我们要检查多少字符串。如果您想象一个文字处理应用程序中的拼写检查器，则可能只想检查用户选择的文本，而不是整个文档。</p>\n<p>但是，有一个陷阱：Swift使用非常聪明，非常先进的字符串处理方式，从而使其可以使用复杂字符（例如表情符号）的方式与使用英语字母的方式完全相同。然而，Objective-C中并<em>没有</em>使用存储字母的这种方法，这意味着我们需要问swift利用我们的所有字符的整个长度，这样创造一个Objective-C字符串范围：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> range <span class=\"operator\">=</span> <span class=\"type\">NSRange</span>(location: <span class=\"number\">0</span>, length: word.utf16.count)</span><br></pre></td></tr></table></figure>\n<p>UTF-16是所谓的<em>字符编码</em> -一种将字母存储在字符串中的方法。我们在这里使用它，以便Objective-C可以了解Swift的字符串是如何存储的；对于我们来说，这是一种很好的桥接格式。</p>\n<p>第三，我们可以要求文本检查器报告在单词中发现任何拼写错误的地方，传递要检查的范围，在该范围内开始的位置（因此我们可以执行“查找下一个”之类的操作），是否应该换行一旦到达末尾，以及字典使用哪种语言：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> misspelledRange <span class=\"operator\">=</span> checker.rangeOfMisspelledWord(in: word, range: range, startingAt: <span class=\"number\">0</span>, wrap: <span class=\"literal\">false</span>, language: <span class=\"string\">&quot;en&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>这会返回另一个Objective-C字符串范围，告诉我们在哪里发现了拼写错误。即使那样，这里仍然存在一个复杂性：Objective-C没有任何可选概念，因此依赖于特殊值来表示丢失的数据。</p>\n<p>在这种情况下，如果Objective-C范围返回为空（即，因为字符串正确拼写而没有拼写错误），那么我们将返回特殊值<code>NSNotFound</code>。</p>\n<p>因此，我们可以检查拼写结果，看是否有这样的错误：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> allGood <span class=\"operator\">=</span> misspelledRange.location <span class=\"operator\">==</span> <span class=\"type\">NSNotFound</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"alert\">6. Alert</h2>\n<p>基本的SwiftUI警报具有标题，消息和一个关闭按钮，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Alert</span>(title: <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello SwiftUI!&quot;</span>), message: <span class=\"type\">Text</span>(<span class=\"string\">&quot;This is some detail message&quot;</span>), dismissButton: .default(<span class=\"type\">Text</span>(<span class=\"string\">&quot;OK&quot;</span>)))</span><br></pre></td></tr></table></figure>\n<p>如果需要，您可以添加更多代码来更详细地配置按钮，但这已经足够了。更有趣的是我们如何显示警报：我们不将警报分配给变量，而是编写类似之类的内容<code>myAlert.show()</code>，因为这将支持旧的“事件系列”思维方式。</p>\n<p>相反，我们创建一些状态来跟踪警报是否显示，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> showingAlert <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>然后，我们将警报附加到用户界面的某处，告诉它使用该状态来确定是否显示警报。SwiftUI将监视<code>showingAlert</code>，一旦变为true，它将显示警报。</p>\n<p>放在一起，下面是一些示例代码，当点击按钮时会显示警报：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ContentView</span>: <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> showingAlert <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Button</span>(<span class=\"string\">&quot;Show Alert&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.showingAlert <span class=\"operator\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .alert(isPresented: <span class=\"variable\">$showingAlert</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Alert</span>(title: <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello SwiftUI!&quot;</span>), message: <span class=\"type\">Text</span>(<span class=\"string\">&quot;This is some detail message&quot;</span>), dismissButton: .default(<span class=\"type\">Text</span>(<span class=\"string\">&quot;OK&quot;</span>)))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这会将警报附加到按钮上，但是说实话，在何处使用<code>alert()</code>修饰符都没关系–我们要做的只是说警报存在，并且在<code>showingAlert</code>true 时显示。</p>\n<p>仔细看一下<code>alert()</code>修饰符：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">.alert(isPresented: <span class=\"variable\">$showingAlert</span>)</span><br></pre></td></tr></table></figure>\n<p>这是另一种双向数据绑定，这是因为在取消<code>showingAlert</code>警报时，SwiftUI会自动设置为false。</p>\n<h2 id=\"sheet\">7. Sheet</h2>\n<p><code>sheet()</code>是和一样的修饰符<code>alert()</code>，因此请立即将此修饰符添加到我们的按钮中：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">.sheet(isPresented: <span class=\"variable\">$showingSheet</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// contents of the sheet</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>无论如何，这称为<code>@Environment</code>，它使我们能够创建用于存储外部提供给我们的值的属性。用户处于亮模式还是暗模式？他们是否要求较小或较大的字体？他们在哪个时区？所有这些以及更多都是来自环境的值，在这种情况下，我们将从环境中读取视图的<em>表示方式</em>。</p>\n<p>视图的呈现模式仅包含两个数据，但两者都很有用：一个用于存储视图当前是否显示在屏幕上的属性，以及一种让我们立即关闭视图的方法。</p>\n<p>要尝试将该属性添加到中<code>SecondView</code>，该属性会创建一个称为的属性，该属性<code>presentationMode</code>附加到存储在应用程序环境中的演示模式变量中：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Environment</span>(\\.presentationMode) <span class=\"keyword\">var</span> presentationMode</span><br></pre></td></tr></table></figure>\n<p>现在，<code>SecondView</code>用以下按钮替换文本视图：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Button</span>(<span class=\"string\">&quot;Dismiss&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.presentationMode.wrappedValue.dismiss()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>加入的<code>wrappedValue</code>在那里是必需的，因为<code>presentationMode</code>实际上是有约束力的，因此它可以由系统自动更新-我们需要里面挖检索实际演示模式为我们关闭该视图。</p>\n<h2 id=\"ondelete\">8. onDelete</h2>\n<p><code>onDelete()</code>修饰符仅存在于上<code>ForEach</code>，因此，如果我们希望用户从列表中删除项目，则必须将项目放在内<code>ForEach</code>。当我们只有动态行时，这的确意味着少量的额外代码，但另一方面，这意味着创建仅可以删除某些行的列表会更容易。</p>\n<p>为了进行<code>onDelete()</code>工作，我们需要实现一个方法，该方法将接收type的单个参数<code>IndexSet</code>。这有点像一组整数，除了它是经过排序的，它只是告诉我们<code>ForEach</code>应该删除的所有项目的位置。</p>\n<p>由于我们<code>ForEach</code>是完全由单个数组创建的，因此实际上我们可以直接将索引集直接传递给我们的<code>numbers</code>数组-它具有<code>remove(atOffsets:)</code>接受索引集的特殊方法。</p>\n<p>因此，<code>ContentView</code>现在添加此方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">removeRows</span>(<span class=\"params\">at</span> <span class=\"params\">offsets</span>: <span class=\"type\">IndexSet</span>)</span> &#123;</span><br><span class=\"line\">    numbers.remove(atOffsets: offsets)</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>最后，我们可以<code>ForEach</code>通过将它修改为以下方法，告诉SwiftUI要从中删除数据时调用该方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ForEach</span>(numbers, id: \\.<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">Text</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.onDelete(perform: removeRows)</span><br></pre></td></tr></table></figure>\n<p>现在继续运行您的应用程序，然后添加一些数字。准备就绪后，从右向左在列表中的任何行上滑动，您会发现出现一个删除按钮。您可以点击它，也可以通过进一步滑动来使用iOS的滑动来删除功能。</p>\n<p>考虑到那是多么容易，我认为结果确实很好。但是SwiftUI还有另外一个技巧：我们可以在导航栏中添加“编辑/完成”按钮，这使用户可以更轻松地删除几行。</p>\n<p>首先，将包裹在<code>VStack</code>中<code>NavigationView</code>，然后将此修饰符添加到中<code>VStack</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">.navigationBarItems(leading: <span class=\"type\">EditButton</span>())</span><br></pre></td></tr></table></figure>\n<h2 id=\"userdefault\">9. UserDefault</h2>\n<p><code>UserDefaults</code> 非常适合存储用户设置和其他重要数据-您可能会跟踪用户上次启动该应用程序的时间，他们上次阅读的新闻报道或其他被动收集的信息。</p>\n<p>但是，有一个陷阱：它是<em>字符串类型</em>。这有点像个玩笑的名字，因为“强类型”表示像Swift这样的类型安全语言，其中每个常量和变量都具有特定类型，例如<code>Int</code>或<code>String</code>，而“字符串类型”表示某些代码在它们所处的地方使用字符串可能会引起问题。</p>\n<p>让我们看一些代码。这是一个带有按钮的视图，该视图显示拍子计数，并在每次点击该按钮时递增计数：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ContentView</span>: <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> tapCount <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Button</span>(<span class=\"string\">&quot;Tap count: <span class=\"subst\">\\(tapCount)</span>&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.tapCount <span class=\"operator\">+=</span> <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为这显然是一个非常重要的应用程序，所以我们希望保存用户做出的点击次数，因此，当他们将来再次使用该应用程序时，可以从上次停止的地方接听。</p>\n<p>好吧，做到这一点只需要做两个改变。首先，我们需要将抽头计数写入<code>UserDefaults</code>更改的位置，因此请在<code>self.tapCount += 1</code> 以下添加：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">UserDefaults</span>.standard.set(<span class=\"keyword\">self</span>.tapCount, forKey: <span class=\"string\">&quot;Tap&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>在那一行代码中，您可以看到三件事：</p>\n<ol type=\"1\">\n<li>我们需要使用<code>UserDefaults.standard</code>。这是<code>UserDefaults</code>连接到我们应用程序的内置实例，但是在更高级的应用程序中，您可以创建自己的实例。例如，如果要在多个应用程序扩展中共享默认设置，则可以创建自己的<code>UserDefaults</code>实例。</li>\n<li>有一个<code>set()</code>方法可以接受任何类型的数据-整数，布尔值，字符串等。</li>\n<li>我们在此数据上附加一个字符串名称，在本例中为“ Tap”键。就像常规的Swift字符串一样，此键区分大小写，并且很重要–我们需要使用相同的键从中读取数据<code>UserDefaults</code>。</li>\n</ol>\n<p>说回读数据，而不是从<code>tapCount</code>设置为0 开始，相反，我们应该使它<code>UserDefaults</code>像这样从以下位置读回值：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> tapCount <span class=\"operator\">=</span> <span class=\"type\">UserDefaults</span>.standard.integer(forKey: <span class=\"string\">&quot;Tap&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>注意，它如何使用完全相同的键名，以确保它读取相同的整数值。</p>\n<p>继续尝试一下该应用程序，看看您的想法-您应该能够轻按几次该按钮，返回Xcode，再次运行该应用程序，然后查看确切的数字。</p>\n<p>有两件事情你<em>不能</em>在代码中看到的，但两者的事情。首先，如果我们没有设置“ Tap”键，会发生什么？第一次运行该应用程序时就是这种情况，但是正如您刚刚看到的那样，它可以正常工作–如果找不到密钥，它只会发送回0。</p>\n<h2 id=\"codable\">10.Codable</h2>\n<p><code>Codable</code>：一种专门用于<em>存档</em>和<em>取消存档</em>数据的协议，这是一种“将对象转换为纯文本然后再次转换”的奇特方式。</p>\n<p>我们将<code>Codable</code>在未来的项目中进行更多的研究，但是目前我们的需求很简单：我们想要归档一个自定义类型，以便我们可以将其放入<code>UserDefaults</code>，然后在从中<em>退出</em>时对其进行归档<code>UserDefaults</code>。</p>\n<p>当使用仅具有简单属性的类型（字符串，整数，布尔值，字符串数组等）时，我们需要做的唯一支持归档和取消归档的就是向<code>Codable</code>，添加一个一致性，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">User</span>: <span class=\"title\">Codable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> firstName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastName: <span class=\"type\">String</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Swift会自动为我们生成一些代码，这些代码将<code>User</code>根据需要为我们存档和取消存档实例，但是我们仍然需要告诉Swift <em>何时</em>存档以及如何处理数据。</p>\n<p>该过程的这一部分由称为的新类型提供支持<code>JSONEncoder</code>。它的工作是获取符合条件的东西，<code>Codable</code>然后以JavaScript Object Notation（JSON）的形式发送回该对象-该名称暗示该对象特定于JavaScript，但实际上，我们都使用它，因为它是如此快速和简单。</p>\n<p>该<code>Codable</code>协议不需要我们使用JSON，实际上其他格式也可以使用，但这是迄今为止最常见的格式。在这种情况下，我们实际上并不在乎使用<em>哪种</em>数据，因为它们只会存储在中<code>UserDefaults</code>。</p>\n<p>要将<code>user</code>数据转换为JSON数据，我们需要在上调用<code>encode()</code>方法<code>JSONEncoder</code>。这可能会引发错误，因此应使用<code>try</code>或<code>try?</code>巧妙地调用它。例如，如果我们有一个属性来存储<code>User</code>实例，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> user <span class=\"operator\">=</span> <span class=\"type\">User</span>(firstName: <span class=\"string\">&quot;Taylor&quot;</span>, lastName: <span class=\"string\">&quot;Swift&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>然后，我们可以创建一个将用户存档并将其保存为<code>UserDefaults</code>这样的按钮：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Button</span>(<span class=\"string\">&quot;Save User&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> encoder <span class=\"operator\">=</span> <span class=\"type\">JSONEncoder</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> encoder.encode(<span class=\"keyword\">self</span>.user) &#123;</span><br><span class=\"line\">        <span class=\"type\">UserDefaults</span>.standard.set(data, forKey: <span class=\"string\">&quot;UserData&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该<code>data</code>常数是一种新的数据类型，可能会引起混淆<code>Data</code>。它旨在存储您可以想到的任何类型的数据，例如字符串，图像，zip文件等。不过，在这里，我们只关心它是可以直接写入的数据类型之一<code>UserDefaults</code>。</p>\n<p>当我们返回另一种方式时（当我们拥有JSON数据并且想要将其转换为Swift <code>Codable</code>类型时），我们应该使用<code>JSONDecoder</code>而不是<code>JSONEncoder()</code>，但是过程大致相同。</p>\n<h3 id=\"实例\">实例</h3>\n<p>储存：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Published</span> <span class=\"keyword\">var</span> items: [<span class=\"type\">ExpenseItem</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">didSet</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> encoder <span class=\"operator\">=</span> <span class=\"type\">JSONEncoder</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> encoded <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> encoder.encode(items) &#123;</span><br><span class=\"line\">            <span class=\"type\">UserDefaults</span>.standard.set(encoded, forKey: <span class=\"string\">&quot;Items&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>读取：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">init</span>()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> items <span class=\"operator\">=</span> <span class=\"type\">UserDefaults</span>.standard.data(forKey: <span class=\"string\">&quot;Items&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> decoder <span class=\"operator\">=</span> <span class=\"type\">JSONDecoder</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> decoded <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> decoder.decode([<span class=\"type\">ExpenseItem</span>].<span class=\"keyword\">self</span>, from: items) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.items <span class=\"operator\">=</span> decoded</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.items <span class=\"operator\">=</span> []</span><br></pre></td></tr></table></figure>\n<h2 id=\"uuid与indentifiable\">11. UUID与Indentifiable</h2>\n<p>其实也有一个简单的解决方案，它叫做<code>UUID</code>-短期的“通用唯一标识符”，如果<em>说</em>没有独特的声音，我不知道该怎么做。</p>\n<p>UUID是较长的十六进制字符串，例如：08B15DB4-2F02-4AB8-A965-67A9C90D8A44。因此，这是八位数字，四位数字，四位数字，四位数字，然后是十二位数字，其中唯一的要求是在第三块的第一个数字中有一个4。如果减去固定的4，我们最终得到31个数字，每个数字可以是16个值之一–如果在十亿年的时间里每秒产生1个UUID，则可能有最小的机会产生重复的数字。</p>\n<p>现在，我们可以更新<code>ExpenseItem</code>为具有以下<code>UUID</code>属性：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ExpenseItem</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id: <span class=\"type\">UUID</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> type: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> amount: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那会起作用。但是，这也意味着我们需要手工生成一个UUID，然后加载并保存UUID以及其他数据。因此，在这种情况下，我们将要求Swift <code>UUID</code>像这样自动为我们生成一个：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ExpenseItem</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id <span class=\"operator\">=</span> <span class=\"type\">UUID</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> type: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> amount: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，我们无需担心<code>id</code>费用项目的价值– Swift将确保它们始终是唯一的。</p>\n<p>有了这个，我们现在可以修复<code>ForEach</code>，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ForEach</span>(expenses.items, id: \\.id) &#123; item <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"type\">Text</span>(item.name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果现在运行该应用程序，您将看到我们的问题已解决：SwiftUI现在可以准确地看到删除了哪个费用项目，并将正确地动画化所有内容。</p>\n<p>不过，我们尚未完成此步骤。相反，我希望您修改<code>ExpenseItem</code>使其符合名为的新协议<code>Identifiable</code>，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ExpenseItem</span>: <span class=\"title\">Identifiable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id <span class=\"operator\">=</span> <span class=\"type\">UUID</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> type: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> amount: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们所做的只是添加<code>Identifiable</code>到协议一致性列表中，仅此而已。这是Swift内置的协议之一，表示“可以唯一地标识此类型”。它只有一个要求，那就是必须有一个<code>id</code>包含唯一标识符的称为属性。我们只是添加了它，所以我们不需要做任何额外的工作–我们的类型<code>Identifiable</code>就可以了。</p>\n<p>现在，您可能想知道为什么要添加它，因为我们的代码之前运行良好。好吧，因为现在可以保证我们的费用项目是唯一可识别的，所以我们不再需要告诉<code>ForEach</code>标识符要使用哪个属性-它知道将有一个<code>id</code>属性并且它将是唯一的，因为这就是<code>Identifiable</code>协议的重点。</p>\n<p>因此，由于此更改，我们可以<code>ForEach</code>再次对此进行修改：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ForEach</span>(expenses.items) &#123; item <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"type\">Text</span>(item.name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"scrollview\">12. ScrollView</h2>\n<p>例如，我们可以创建一个包含100个文本视图的滚动列表，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ScrollView</span>(.vertical) &#123;</span><br><span class=\"line\">    <span class=\"type\">VStack</span>(spacing: <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">ForEach</span>(<span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Item <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>)</span><br><span class=\"line\">                .font(.title)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果您在模拟器中重新运行该代码，则会看到可以自由拖动滚动视图，如果滚动到底部，您还将看到<code>ScrollView</code>将安全区域视为<code>List</code>与<code>Form</code>–其内容位于home指示器<em>下方</em>，但是它们添加了一些额外的填充，因此最终视图是完全可见的。</p>\n<p>您可能还会注意到，直接在中心点击有点烦人-整个区域都可滚动更常见。为了获得<em>这种效果</em>，我们应该<code>VStack</code>占用更多空间，同时保持默认的中心对齐不变，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ScrollView</span>(.vertical) &#123;</span><br><span class=\"line\">    <span class=\"type\">VStack</span>(spacing: <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">ForEach</span>(<span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Item <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>)</span><br><span class=\"line\">                .font(.title)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .frame(maxWidth: .infinity)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，您可以在屏幕上的任意位置点击并拖动，这更加方便了用户。</p>\n<p>这一切似乎都非常简单，而且确实<code>ScrollView</code>比<code>UIScrollView</code>我们必须与UIKit一起使用的旧版本要容易得多。但是，您需要注意一个重要的问题：将视图添加到滚动视图时，它们会立即创建。</p>\n<p>为了说明这一点，我们可以围绕常规文本视图创建一个简单的包装，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">CustomText</span>: <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> text: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Text</span>(text)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">text</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Creating a new CustomText&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.text <span class=\"operator\">=</span> text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们可以在我们的内部使用它<code>ForEach</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ForEach</span>(<span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">CustomText</span>(<span class=\"string\">&quot;Item <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>)</span><br><span class=\"line\">        .font(.title)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果看起来相同，但是现在当您运行该应用程序时，您会在Xcode的日志中看到打印了一百次的“正在创建新的CustomText” – SwiftUI不会等到您向下滚动才能看到它们，它会立即创建它们。</p>\n<p>您可以使用尝试相同的实验<code>List</code>，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">List</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ForEach</span>(<span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">CustomText</span>(<span class=\"string\">&quot;Item <span class=\"subst\">\\(<span class=\"variable\">$0</span>)</span>&quot;</span>)</span><br><span class=\"line\">            .font(.title)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当<em>该</em>代码运行时<em>，</em>您会发现它的行为是懒惰的：它<code>CustomText</code>仅在真正需要时才创建实例。</p>\n<h2 id=\"navigationlink\">13.NavigationLink</h2>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NavigationView</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NavigationLink</span>(destination: <span class=\"type\">Text</span>(<span class=\"string\">&quot;Detail View&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .navigationBarTitle(<span class=\"string\">&quot;SwiftUI&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在运行代码，看看您的想法。您会看到“ Hello World”现在看起来像一个按钮，点击它会在右侧显示一个新视图，显示为“详细信息视图”。更好的是，您会看到“ SwiftUI”标题会向下移动以使其成为后退按钮，您可以点击该按钮或从左边缘滑动以返回。</p>\n<p>所以，无论是<code>sheet()</code>和<code>NavigationLink</code>允许我们显示从当前一个新的观点，但<em>这样</em>他们这样做是不同的，你应该仔细选择他们：</p>\n<ul>\n<li><code>NavigationLink</code> 用于显示有关用户选择的详细信息，就像您正在深入探讨主题一样。</li>\n<li><code>sheet()</code> 用于显示不相关的内容，例如设置或撰写窗口。</li>\n</ul>\n<p>您看到的最常见的地方<code>NavigationLink</code>是列表，SwiftUI的功能非常出色。</p>\n<p>尝试将您的代码修改为此：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NavigationView</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">List</span>(<span class=\"number\">0</span><span class=\"operator\">..&lt;</span><span class=\"number\">100</span>) &#123; row <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"type\">NavigationLink</span>(destination: <span class=\"type\">Text</span>(<span class=\"string\">&quot;Detail <span class=\"subst\">\\(row)</span>&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"type\">Text</span>(<span class=\"string\">&quot;Row <span class=\"subst\">\\(row)</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .navigationBarTitle(<span class=\"string\">&quot;SwiftUI&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在运行该应用程序时，您将看到100个可以点击以显示详细视图的列表行，但是您还将在右侧看到灰色的显示指示器。这是一种标准的iOS方法，告诉用户在点击该行时另一个屏幕将从右侧滑入，SwiftUI足够聪明，可以在此处自动添加它。如果这些行不是导航链接-如果您注释掉该<code>NavigationLink</code>行及其右括号，您会看到指示消失。</p>\n<h1 id=\"animation\">Animation</h1>\n<p><strong>ScaleEffect()</strong></p>\n<p>You provide this with a value from 0 up, and it will be drawn at that size – a value of 1.0 is equivalent to 100%,</p>\n<hr />\n<h2 id=\"cgfloat\">CGFloat</h2>\n<p>由于历史原因，主要是与Apple的旧API交互的原因，我们需要使用一种称为的特定数据类型<code>CGFloat</code>。</p>\n<p><code>CGFloat</code>出于各种意图和目的，它是<code>Double</code>一个不同的名称，但在较旧的硬件上，它使用的数字存储类型较小，称为<code>Float</code>。当这个选择很重要时，<code>CGFloat</code>Apple不必在乎我们要为哪种类型的硬件建造，但如今几乎所有东西都在使用，<code>Double</code>因此，厌恶地盯着我们只是一小块遗产。</p>\n<p>无论如何，所有这些都很重要，因为如果我们使该属性<code>var animationAmount = 1</code>得到一个整数，并且如果我们使用它，<code>var animationAmount = 1.0</code>那么我们得到一个<code>Double</code>，但是没有内置的方法来<code>CGFloat</code>自动获得–我们需要使用类型注释。</p>\n<p>因此，请立即将此属性添加到您的视图中：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> animationAmount: <span class=\"type\">CGFloat</span> <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"d旋转与withanimation\">3D旋转与withAnimation</h2>\n<p>这需要另一个新的修改器，<code>rotation3DEffect()</code>可以为其指定以度为单位的旋转量以及确定视图旋转方式的轴。通过您的视图将这条轴想成一串：</p>\n<ul>\n<li>we skewer the view through the X axis (horizontally) then it will be able to spin forwards and backwards.</li>\n<li>If we skewer the view through the Y axis (vertically) then it will be able to spin left and right.</li>\n<li>If we skewer the view through the Z axis (depth) then it will be able to rotate left and right.</li>\n</ul>\n<p>进行这项工作需要我们可以修改的某些状态，并且旋转度指定为<code>Double</code>。因此，请立即添加此属性：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@State</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> animationAmount <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br></pre></td></tr></table></figure>\n<p>接下来，我们将要求按钮<code>animationAmount</code>沿其Y轴旋转角度，这意味着它将向左和向右旋转。现在将此修饰符添加到按钮：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">.rotation3DEffect(.degrees(animationAmount), axis: (x: <span class=\"number\">0</span>, y: <span class=\"number\">1</span>, z: <span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n<p>现在是重要部分：我们将在按钮的动作中添加一些代码，以便在<code>animationAmount</code>每次点击时将其添加360 。</p>\n<p>如果我们只写，<code>self.animationAmount += 360</code>那么更改将立即发生，因为按钮上没有附加动画修改器。这是显式动画出现的地方：如果我们使用<code>withAnimation()</code>闭包，那么SwiftUI将确保由新状态引起的任何更改都将自动进行动画处理。</p>\n<p><strong><em>因此，现在将其放入按钮的操作中：</em></strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">withAnimation &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.animationAmount <span class=\"operator\">+=</span> <span class=\"number\">360</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在运行该代码，我认为它的外观会给您留下深刻的印象–每次点击该按钮，它就会在3D空间中旋转，并且编写起来非常容易。如果有时间，请对轴进行一些试验，以使您真正了解它们的工作原理。如果您感到好奇，可以一次使用多个轴。</p>\n<p><code>withAnimation()</code>可以使用可以在SwiftUI中其他位置使用的所有相同动画来赋予动画参数。例如，我们可以使用如下<code>withAnimation()</code>调用来使旋转效果使用spring动画：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">withAnimation(.interpolatingSpring(stiffness: <span class=\"number\">5</span>, damping: <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.animationAmount <span class=\"operator\">+=</span> <span class=\"number\">360</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>.animation 必须放在所有需要附加动画的modifier之后</p>\n<p>可以使用多个animation，每个animation控制之前的动画。</p>\n<p>如果animation(nil)则没有动画，但是不会被之后的animation影响</p>\n</blockquote>\n<hr />\n<h1 id=\"geometry\">Geometry</h1>\n<h2 id=\"geometryreader\">GeometryReader</h2>\n<p>现在，让我们在屏幕上绘制该图像：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ContentView</span>: <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Image</span>(<span class=\"string\">&quot;Example&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>即使在预览中，您也可以看到对于可用空间来说太大了。图像<code>frame()</code>与其他视图具有相同的修饰符，因此您可以尝试按如下所示将其缩小：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Image</span>(<span class=\"string\">&quot;Example&quot;</span>)</span><br><span class=\"line\">    .frame(width: <span class=\"number\">300</span>, height: <span class=\"number\">300</span>)</span><br></pre></td></tr></table></figure>\n<p>但是，这将行不通–您的图片仍将显示为原尺寸。如果您想知道<em>为什么</em>，请仔细查看预览窗口：您会看到图像已放大，但是中间有一个300x300的蓝色框。的<em>图像视图的</em>帧已被正确设定，但<em>内容</em>的图像仍显示为原始大小。</p>\n<p>尝试将图像更改为此：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Image</span>(<span class=\"string\">&quot;Example&quot;</span>)</span><br><span class=\"line\">    .frame(width: <span class=\"number\">300</span>, height: <span class=\"number\">300</span>)</span><br><span class=\"line\">    .clipped()</span><br></pre></td></tr></table></figure>\n<p>现在您将更清楚地看到事情：我们的图像视图确实是300x300，但这并不是我们想要的。</p>\n<p>如果您也想调整图像<em>内容的</em>大小，则需要使用如下<code>resizable()</code>修饰符：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Image</span>(<span class=\"string\">&quot;Example&quot;</span>)</span><br><span class=\"line\">    .resizable()</span><br><span class=\"line\">    .frame(width: <span class=\"number\">300</span>, height: <span class=\"number\">300</span>)</span><br></pre></td></tr></table></figure>\n<p>更好，但仅此而已。是的，现在可以正确调整图像的大小，但是可能看起来像是被压扁了。我的图像不是方形的，因此，由于它已被调整为方形，因此看上去有些失真。</p>\n<p>要解决此问题，我们需要要求图像按比例调整自身大小，这可以使用<code>aspectRatio()</code>修饰符来完成。这可以让我们提供确切的宽高比以及应如何应用，但是如果我们跳过宽高比本身，SwiftUI将自动使用原始的宽高比。</p>\n<p>当谈到“应该如何应用”部分，SwiftUI称此为<em>内容的模式</em>，给我们两个选择：<code>.fit</code>意味着整个图像放在容器内，即使这意味着离开视图的某些部分清空，并且<code>.fill</code>手段视图将没有空白部分，即使这意味着我们的某些图像位于容器外部。</p>\n<p>尝试它们两者，以自己了解差异。这是<code>.fit</code>应用的模式：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Image</span>(<span class=\"string\">&quot;Example&quot;</span>)</span><br><span class=\"line\">    .resizable()</span><br><span class=\"line\">    .aspectRatio(contentMode: .fit)</span><br><span class=\"line\">    .frame(width: <span class=\"number\">300</span>, height: <span class=\"number\">300</span>)</span><br></pre></td></tr></table></figure>\n<p>这是<code>.fill</code>应用模式：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Image</span>(<span class=\"string\">&quot;Example&quot;</span>)</span><br><span class=\"line\">    .resizable()</span><br><span class=\"line\">    .aspectRatio(contentMode: .fill)</span><br><span class=\"line\">    .frame(width: <span class=\"number\">300</span>, height: <span class=\"number\">300</span>)</span><br></pre></td></tr></table></figure>\n<p>如果我们要使用固定尺寸的图像，那么所有这些方法都很好用，但是通常您希望图像能够自动放大以一维或二维填充屏幕。也就是说，您<em>真正</em>要说的不是“ 硬编码300的宽度”，而是“使此图像充满屏幕的宽度”。</p>\n<p>SwiftUI为此提供了专用类型，称为<code>GeometryReader</code>，并且功能非常强大。是的，我知道许多SwiftUI功能强大，但老实说：您可以做的事<code>GeometryReader</code>会让您震惊。</p>\n<p>我们将<code>GeometryReader</code>在项目15中进行更详细的介绍，但现在，我们将其用于一项工作：确保图像填充其容器视图的整个宽度。</p>\n<p><code>GeometryReader</code>与我们使用过的其他视图一样，它是一个视图，除了在创建视图时，我们将获得一个<code>GeometryProxy</code>要使用的对象。这使我们可以查询环境：容器有多大？我们的立场是什么？是否有安全区域插图？等等。</p>\n<p>我们可以使用此几何代理设置图像的宽度，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">GeometryReader</span> &#123; geo <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"type\">Image</span>(<span class=\"string\">&quot;Example&quot;</span>)</span><br><span class=\"line\">            .resizable()</span><br><span class=\"line\">            .aspectRatio(contentMode: .fit)</span><br><span class=\"line\">            .frame(width: geo.size.width, height: <span class=\"number\">300</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，无论我们使用哪种设备，图像都将占据我们屏幕的整个宽度。</p>\n<p>对于我们的最后一个技巧，让我们<code>height</code>从图像中删除，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">VStack</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">GeometryReader</span> &#123; geo <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"type\">Image</span>(<span class=\"string\">&quot;Example&quot;</span>)</span><br><span class=\"line\">            .resizable()</span><br><span class=\"line\">            .aspectRatio(contentMode: .fit)</span><br><span class=\"line\">            .frame(width: geo.size.width)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们为SwiftUI提供了足够的信息，它可以自动计算出高度：它知道原始宽度，知道我们的目标宽度，并且知道我们的内容模式，因此它了解图像的目标高度如何与图像的高度成比例。目标宽度。</p>\n<h2 id=\"path\">Path</h2>\n<p>SwiftUI为我们提供了<code>Path</code>一种用于绘制自定义形状的专用类型。这是一个非常低的级别，我的意思是您通常会希望将其包装在其他内容中以使其更有用，但是由于它是构建其他工作的基础，因此我们将从此处开始。</p>\n<p>就像颜色，渐变和形状一样，路径本身就是视图。这意味着我们可以像使用文本视图和图像一样使用它们，尽管您会看到它有些笨拙。</p>\n<p>让我们从一个简单的形状开始：绘制一个三角形。有几种创建路径的方法，包括一种接受关闭绘图指令的方法。此闭包必须接受单个参数，这是绘制的路径。我意识到一开始这可能有点费劲，因为我们正在创建路径，并且在该路径的初始化程序内将要传递的路径绘制进去，但是这样想：SwiftUI正在创建一个空的路径，然后让我们有机会根据需要添加更多内容。</p>\n<p>路径有很多创建带有正方形，圆形，弧形和直线形的形状的方法。对于我们的三角形，我们需要移动到起始位置，然后添加三行，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Path</span> &#123; path <span class=\"keyword\">in</span></span><br><span class=\"line\">        path.move(to: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">200</span>, y: <span class=\"number\">100</span>))</span><br><span class=\"line\">        path.addLine(to: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">100</span>, y: <span class=\"number\">300</span>))</span><br><span class=\"line\">        path.addLine(to: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">300</span>, y: <span class=\"number\">300</span>))</span><br><span class=\"line\">        path.addLine(to: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">200</span>, y: <span class=\"number\">100</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们以前没有使用<code>CGPoint</code>过，但是我确实<code>CGSize</code>在项目6中快速回顾了一下。“ CG”是Core Graphics的缩写，它提供了一些基本类型供您选择，它们使我们可以引用X / Y坐标（<code>CGPoint</code>），宽度和高度（<code>CGSize</code>），矩形框（<code>CGRect</code>）和偶数（<code>CGFloat</code>）。</p>\n<p>当我们的三角形代码运行时，您会看到一个大的黑色三角形。<em>当</em>你看到它相对于你的屏幕取决于什么模拟器使用的是，这是这些原始路径的问题的一部分：我们需要使用精确的坐标，所以如果你想通过自己使用的路径，你要么需要接受调整所有设备的尺寸，或使用类似的方法<code>GeometryReader</code>来相对于其容器缩放它们。</p>\n<p>我们将在短期内寻找更好的选择，但首先让我们着眼于为我们的道路着色。一种选择是使用<code>fill()</code>修饰符，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Path</span> &#123; path <span class=\"keyword\">in</span></span><br><span class=\"line\">    path.move(to: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">200</span>, y: <span class=\"number\">100</span>))</span><br><span class=\"line\">    path.addLine(to: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">100</span>, y: <span class=\"number\">300</span>))</span><br><span class=\"line\">    path.addLine(to: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">300</span>, y: <span class=\"number\">300</span>))</span><br><span class=\"line\">    path.addLine(to: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">200</span>, y: <span class=\"number\">100</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.fill(<span class=\"type\">Color</span>.blue)</span><br></pre></td></tr></table></figure>\n<p>我们还可以使用<code>stroke()</code>修饰符在路径周围画图，而不用填充它：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">.stroke(<span class=\"type\">Color</span>.blue, lineWidth: <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n<p>不过，这看起来不太正确–三角形的底角很好看而且很尖锐，但顶角已损坏。之所以会发生这种情况，是因为SwiftUI确保线与前后的线整齐地连接，而不仅仅是一系列单独的线，但是我们的最后一行之后没有任何内容，因此无法建立连接。</p>\n<p>解决此问题的一种方法是再次绘制第一行，这意味着最后一行具有与之匹配的连接线：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Path</span> &#123; path <span class=\"keyword\">in</span></span><br><span class=\"line\">    path.move(to: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">200</span>, y: <span class=\"number\">100</span>))</span><br><span class=\"line\">    path.addLine(to: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">100</span>, y: <span class=\"number\">300</span>))</span><br><span class=\"line\">    path.addLine(to: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">300</span>, y: <span class=\"number\">300</span>))</span><br><span class=\"line\">    path.addLine(to: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">200</span>, y: <span class=\"number\">100</span>))</span><br><span class=\"line\">    path.addLine(to: <span class=\"type\">CGPoint</span>(x: <span class=\"number\">100</span>, y: <span class=\"number\">300</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.stroke(<span class=\"type\">Color</span>.blue, lineWidth: <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n<p>如您所见，这很棒。而且它甚至可以很好地与透明度配合使用：如果使用透明的笔触颜色（例如），<code>Color.blue.opacity(0.25)</code>您将看到整个笔划均匀地褪色，而沿第一行则看不到任何双笔划。</p>\n<p>一种替代方法是使用SwiftUI的专用<code>ShapeStyle</code>结构，该结构使我们可以控制每条线在其后应如何连接到该线（线连接），以及在其后没有连接的情况下应如何绘制每条线（线帽）。这是特别有用的，因为join和cap的选项之一是<code>.round</code>，它会创建圆形的形状：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\">.stroke(<span class=\"type\">Color</span>.blue, style: <span class=\"type\">StrokeStyle</span>(lineWidth: <span class=\"number\">10</span>, lineCap: .round, lineJoin: .round))</span><br></pre></td></tr></table></figure>\n<p>有了这个位置，您就可以从我们的路径中删除多余的行，因为不再需要它。</p>\n<h2 id=\"shape\">Shape</h2>\n<p>SwiftUI <code>Shape</code>使用一个必需的方法作为协议来实现：给定以下矩形，您要绘制什么路径？仍然会像直接使用原始路径一样创建并返回路径，但是由于我们已经掌握了尺寸，因此将使用形状，因为我们确切知道绘制路径的大小–我们不再需要依赖固定坐标。</p>\n<p>例如，以前我们使用来创建了一个三角形<code>Path</code>，但是我们可以将其包装成一个形状以确保它自动占用所有可用空间，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Triangle</span>: <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">path</span>(<span class=\"params\">in</span> <span class=\"params\">rect</span>: <span class=\"type\">CGRect</span>)</span> -&gt; <span class=\"type\">Path</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> path <span class=\"operator\">=</span> <span class=\"type\">Path</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">        path.move(to: <span class=\"type\">CGPoint</span>(x: rect.midX, y: rect.minY))</span><br><span class=\"line\">        path.addLine(to: <span class=\"type\">CGPoint</span>(x: rect.minX, y: rect.maxY))</span><br><span class=\"line\">        path.addLine(to: <span class=\"type\">CGPoint</span>(x: rect.maxX, y: rect.maxY))</span><br><span class=\"line\">        path.addLine(to: <span class=\"type\">CGPoint</span>(x: rect.midX, y: rect.minY))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> path</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过<code>CGRect</code>，该工作变得容易得多，它提供了有用的属性，例如<code>minX</code>（矩形中的最小X值），<code>maxX</code>（矩形中的最大X值）和<code>midX</code>（<code>minX</code>和之间的中点<code>maxX</code>）。</p>\n<p>然后，我们可以创建一个精确尺寸的红色三角形，如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Triangle</span>()</span><br><span class=\"line\">    .fill(<span class=\"type\">Color</span>.red)</span><br><span class=\"line\">    .frame(width: <span class=\"number\">300</span>, height: <span class=\"number\">300</span>)</span><br></pre></td></tr></table></figure>\n<p>形状还支持相同的<code>StrokeStyle</code>参数以创建更高级的笔触：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Triangle</span>()</span><br><span class=\"line\">    .stroke(<span class=\"type\">Color</span>.red, style: <span class=\"type\">StrokeStyle</span>(lineWidth: <span class=\"number\">10</span>, lineCap: .round, lineJoin: .round))</span><br><span class=\"line\">    .frame(width: <span class=\"number\">300</span>, height: <span class=\"number\">300</span>)</span><br></pre></td></tr></table></figure>\n<p>理解之间的区别的关键<code>Path</code>，并<code>Shape</code>为可重用性：路径的设计做一个具体的东西，而形状具有绘画空间的灵活性，还可以接受的参数让我们进一步对其进行自定义。</p>\n<p>为了说明这一点，我们可以创建一个<code>Arc</code>接受三个参数的形状：起始角度，终止角度以及是否顺时针绘制圆弧。这似乎很简单，特别是因为它<code>Path</code>有一个<code>addArc()</code>方法，但是如您所见，它有几个有趣的怪癖。</p>\n<p>让我们从最简单的弧形开始：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Arc</span>: <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> startAngle: <span class=\"type\">Angle</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> endAngle: <span class=\"type\">Angle</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> clockwise: <span class=\"type\">Bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">path</span>(<span class=\"params\">in</span> <span class=\"params\">rect</span>: <span class=\"type\">CGRect</span>)</span> -&gt; <span class=\"type\">Path</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> path <span class=\"operator\">=</span> <span class=\"type\">Path</span>()</span><br><span class=\"line\">        path.addArc(center: <span class=\"type\">CGPoint</span>(x: rect.midX, y: rect.midY), radius: rect.width <span class=\"operator\">/</span> <span class=\"number\">2</span>, startAngle: startAngle, endAngle: endAngle, clockwise: clockwise)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> path</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们现在可以像这样创建一个弧：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Arc</span>(startAngle: .degrees(<span class=\"number\">0</span>), endAngle: .degrees(<span class=\"number\">110</span>), clockwise: <span class=\"literal\">true</span>)</span><br><span class=\"line\">    .stroke(<span class=\"type\">Color</span>.blue, lineWidth: <span class=\"number\">10</span>)</span><br><span class=\"line\">    .frame(width: <span class=\"number\">300</span>, height: <span class=\"number\">300</span>)</span><br></pre></td></tr></table></figure>\n<p>如果您查看我们弧线的预览，很可能它看起来并不像您期望的那样。我们要求顺时针旋转从0度到110度的弧度，但似乎逆时针旋转得到从90度到200度的弧度。</p>\n<p>这里发生了两件事：</p>\n<ol type=\"1\">\n<li>在SwiftUI看来，0度不是笔直向上，而是直接向右。</li>\n<li>形状从左下角而不是左上角测量其坐标，这意味着SwiftUI从一个角度到另一个角度进行了另一种方式。在我看来，这是非常陌生的。</li>\n</ol>\n<p>我们可以使用一种新<code>path(in:)</code>方法来解决这两个问题，该新方法将从起点和终点角度减去90度，并且还改变方向，以便SwiftUI遵循自然预期的方式：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">path</span>(<span class=\"params\">in</span> <span class=\"params\">rect</span>: <span class=\"type\">CGRect</span>)</span> -&gt; <span class=\"type\">Path</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rotationAdjustment <span class=\"operator\">=</span> <span class=\"type\">Angle</span>.degrees(<span class=\"number\">90</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> modifiedStart <span class=\"operator\">=</span> startAngle <span class=\"operator\">-</span> rotationAdjustment</span><br><span class=\"line\">    <span class=\"keyword\">let</span> modifiedEnd <span class=\"operator\">=</span> endAngle <span class=\"operator\">-</span> rotationAdjustment</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> path <span class=\"operator\">=</span> <span class=\"type\">Path</span>()</span><br><span class=\"line\">    path.addArc(center: <span class=\"type\">CGPoint</span>(x: rect.midX, y: rect.midY), radius: rect.width <span class=\"operator\">/</span> <span class=\"number\">2</span>, startAngle: modifiedStart, endAngle: modifiedEnd, clockwise: <span class=\"operator\">!</span>clockwise)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> path</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["SwiftUI"],"tags":["Tutorial"]},{"title":"GO 语言基础","url":"/2023/11/09/GO-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/","content":"<p>本教程仅简要记录<code>GO</code>语言与已学过的<code>Python</code>，<code>C++</code>、<code>Swift</code>等语言的基础方法上面的<strong>差别</strong>.</p>\n<p>并不做深入讨论，仅作为<strong><u>备忘录</u></strong>存在。</p>\n<span id=\"more\"></span>\n<h2 id=\"变量定义\">变量定义</h2>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">int</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">a := <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>四种变量的定义方式：</p>\n<ul>\n<li>第一种不初始化，此时<strong>必须指明变量的类型</strong></li>\n<li>第二种初始化，但是可能初始化值有歧义，需要显式定义数据类型</li>\n<li>第三种和第四种等价，建议第四种，编译器会自行判断变量类型，类似<code>Python</code></li>\n</ul>\n<blockquote>\n<p>这里注意：<code>a := 1</code>只能在函数中这么使用</p>\n</blockquote>\n<p>全局变量的声明方式为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span>(</span><br><span class=\"line\">\ta <span class=\"keyword\">int</span></span><br><span class=\"line\">    b <span class=\"keyword\">float32</span></span><br><span class=\"line\">    c <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>空白标识符在函数返回的时候使用，表示不获取该位置的返回值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  _,numb,strs := numbers() <span class=\"comment\">//只获取函数返回值的后两个</span></span><br><span class=\"line\">  fmt.Println(numb,strs)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//一个可以返回多个值的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">numbers</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>,<span class=\"keyword\">string</span>)</span></span>&#123;</span><br><span class=\"line\">  a , b , c := <span class=\"number\">1</span> , <span class=\"number\">2</span> , <span class=\"string\">&quot;str&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a,b,c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>变量不进行声明，会给一个默认值：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">数据类型</th>\n<th style=\"text-align: left;\">初始化默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">int</td>\n<td style=\"text-align: left;\">0</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">float32</td>\n<td style=\"text-align: left;\">0</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">pointer</td>\n<td style=\"text-align: left;\">nil</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">string</td>\n<td style=\"text-align: left;\">\"\"</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"常量定义\">常量定义</h2>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a <span class=\"keyword\">int</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><strong>全新的用法：iota：</strong></p>\n<p>iota是在声明常量的时候自动加一的编译器存储的变量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    a = <span class=\"literal\">iota</span></span><br><span class=\"line\">    b = <span class=\"literal\">iota</span></span><br><span class=\"line\">    c = <span class=\"literal\">iota</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = 0, b = 1, c = 2</span><br></pre></td></tr></table></figure>\n<p><strong>第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1</strong></p>\n<blockquote>\n<p>在使用枚举声明常量，如果变量不声明初始值，其初始值定义方式与上一行一样，有贯穿效果的。但是iota的值是会不断+1的！！</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">            a = <span class=\"literal\">iota</span>   <span class=\"comment\">//0</span></span><br><span class=\"line\">            b          <span class=\"comment\">//1</span></span><br><span class=\"line\">            c          <span class=\"comment\">//2</span></span><br><span class=\"line\">            d = <span class=\"string\">&quot;ha&quot;</span>   <span class=\"comment\">//独立值，iota += 1</span></span><br><span class=\"line\">            e          <span class=\"comment\">//&quot;ha&quot;   iota += 1</span></span><br><span class=\"line\">            f = <span class=\"number\">100</span>    <span class=\"comment\">//iota +=1</span></span><br><span class=\"line\">            g          <span class=\"comment\">//100  iota +=1</span></span><br><span class=\"line\">            h = <span class=\"literal\">iota</span>   <span class=\"comment\">//7,恢复计数</span></span><br><span class=\"line\">            i          <span class=\"comment\">//8</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"><span class=\"comment\">//0 1 2 ha ha 100 100 7 8</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"条件语句\">条件语句</h2>\n<h3 id=\"条件语句switch\">条件语句——switch</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> var1 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> val1:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"keyword\">case</span> val2:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Go</code>中的<code>Switch</code>是不带贯穿的，如果默认，在完成case后会自动<code>break</code>。如果我们需要执行后面的 case，可以使用 <code>fallthrough</code> 。</p>\n<p>但是<code>Go</code>中可以同时判断多个case：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> val1, val2, val3</span><br></pre></td></tr></table></figure>\n<p>此外，其还可以对<code>type</code>进行判断。 ^_^</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> x.(<span class=\"keyword\">type</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">type</span>:</span><br><span class=\"line\">       statement(s);      </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">type</span>:</span><br><span class=\"line\">       statement(s); </span><br><span class=\"line\">    <span class=\"comment\">/* 你可以定义任意个数的case */</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"comment\">/* 可选 */</span></span><br><span class=\"line\">       statement(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"条件语句select\">条件语句——select</h3>\n<ul>\n<li><code>select</code> 语句只能用于通道操作，每个 case 必须是一个通道操作，要么是发送要么是接收。</li>\n<li><code>select</code> 语句会监听所有指定的通道上的操作，一旦其中一个通道准备好就会执行相应的代码块。</li>\n<li>如果多个通道都准备好，那么 <code>select</code> 语句会随机选择一个通道执行。如果所有通道都没有准备好，那么执行 default 块中的代码。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> &lt;- channel1:</span><br><span class=\"line\">    <span class=\"comment\">// 执行的代码</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> value := &lt;- channel2:</span><br><span class=\"line\">    <span class=\"comment\">// 执行的代码</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> channel3 &lt;- value:</span><br><span class=\"line\">    <span class=\"comment\">// 执行的代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 你可以定义任意数量的 case</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 所有通道都没有准备好，执行的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下描述了 select 语句的语法：</p>\n<ul>\n<li><p>每个 case 都必须是一个通道</p></li>\n<li><p>所有 channel 表达式都会被求值</p></li>\n<li><p>所有被发送的表达式都会被求值</p></li>\n<li><p>如果任意某个通道可以进行，它就执行，其他被忽略。</p></li>\n<li><p>如果有多个 case 都可以运行，<code>select</code> 会随机公平地选出一个执行，其他不会执行。</p>\n<p>否则：</p>\n<ol type=\"1\">\n<li>如果有 <code>default</code> 子句，则执行该语句。</li>\n<li>如果没有 <code>default</code> 子句，select 将阻塞，直到某个通道可以运行；<code>Go</code> 不会重新对 channel 或值进行求值。</li>\n</ol></li>\n</ul>\n<h2 id=\"函数\">函数</h2>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">function_name</span><span class=\"params\">( a <span class=\"keyword\">int</span>, b <span class=\"keyword\">string</span> )</span> <span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">string</span>, <span class=\"keyword\">float32</span>)</span></span> &#123;</span><br><span class=\"line\">   函数体</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a, b, c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果传入的参数一样，在最后定义类型即可：<code>func swap(x, y string)&#123;&#125;</code></p>\n<h3 id=\"引用传参\">引用传参</h3>\n<p>和<code>C++</code>一样，<code>Go</code>是带有指针的！！！！QAQ</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 定义交换值函数*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swap</span><span class=\"params\">(x *<span class=\"keyword\">int</span>, y *<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> temp <span class=\"keyword\">int</span></span><br><span class=\"line\">   temp = *x    <span class=\"comment\">/* 保持 x 地址上的值 */</span></span><br><span class=\"line\">   *x = *y      <span class=\"comment\">/* 将 y 值赋给 x */</span></span><br><span class=\"line\">   *y = temp    <span class=\"comment\">/* 将 temp 值赋给 y */</span></span><br><span class=\"line\">&#125;\t</span><br></pre></td></tr></table></figure>\n<p>在调用的时候，需要传入参数的地址：<code>swap(&amp;a, &amp;b)</code></p>\n<h3 id=\"函数作为实参\">函数作为实参</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">getSquareRoot := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x <span class=\"keyword\">float64</span>)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> math.Sqrt(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 使用函数 */</span></span><br><span class=\"line\">fmt.Println(getSquareRoot(<span class=\"number\">9</span>))</span><br></pre></td></tr></table></figure>\n<p>这个和<code>Swift</code>有点像，如果一个参数的数据需要计算出来，就可以通过这种方式定义一个函数，来对实参的初始化数据进行计算。</p>\n<h3 id=\"闭包-t_t\">闭包 T_T</h3>\n<p>和<code>Swift</code>的闭包基本一样，属于一种匿名的函数，<strong>通常用于在函数内部定义函数，或者作为参数传递。</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getSequence</span><span class=\"params\">()</span> <span class=\"title\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">   i:=<span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">      i+=<span class=\"number\">1</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> i  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>↑ 该函数名称为<code>getSequence</code>，没有传入参数，返回的是一个类型为：返回值为<code>int</code>的函数。</p>\n<p>当该函数被初始化到一个实参上，该函数内部数据<code>i</code>被创建并保留。此时这个实参就为一个<code>func() int</code>的函数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getSequence</span><span class=\"params\">()</span> <span class=\"title\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">   i := <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">      i += <span class=\"number\">1</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> i  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">/* nextNumber 为一个函数，函数 i 为 0 */</span></span><br><span class=\"line\">   nextNumber := getSequence()  </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* 调用 nextNumber 函数，i 变量自增 1 并返回 */</span></span><br><span class=\"line\">   fmt.Println(nextNumber())</span><br><span class=\"line\">   fmt.Println(nextNumber())</span><br><span class=\"line\">   fmt.Println(nextNumber())</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">/* 创建新的函数 nextNumber1，并查看结果 */</span></span><br><span class=\"line\">   nextNumber1 := getSequence()  </span><br><span class=\"line\">   fmt.Println(nextNumber1())</span><br><span class=\"line\">   fmt.Println(nextNumber1())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 1 2</span></span><br></pre></td></tr></table></figure>\n<p>↑，作用就是<code>i</code>被存储到了函数内部，每次重新函数创建都会重建内部参数。</p>\n<h3 id=\"方法\">方法</h3>\n<p>类中或者结构体中的函数就是方法</p>\n<p>其定义语句为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(variable_name variable_data_type)</span> <span class=\"title\">function_name</span><span class=\"params\">()</span> [<span class=\"title\">return_type</span>]</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">/* 函数体*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 定义结构体 */</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Circle <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  radius <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//该 method 属于 Circle 类型对象中的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c Circle)</span> <span class=\"title\">getArea</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//c.radius 即为 Circle 类型对象中的属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">3.14</span> * c.radius * c.radius</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组\">数组</h2>\n<h3 id=\"声明以及初始化\">声明以及初始化</h3>\n<p>Go 语言数组声明需要<strong>指定元素类型</strong>及<strong>元素个数</strong>，语法格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> balance [<span class=\"number\">10</span>]<span class=\"keyword\">float32</span></span><br></pre></td></tr></table></figure>\n<p>数组的初始化：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">numbers := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><code>:=</code>的用法和变量时候的用法一致。</p>\n<p>如果数组的长度不是固定的！可以用<code>...</code>进行替代</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> balance = [...]<span class=\"keyword\">float32</span>&#123;<span class=\"number\">1000.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.4</span>, <span class=\"number\">7.0</span>, <span class=\"number\">50.0</span>&#125;</span><br><span class=\"line\">balance := [...]<span class=\"keyword\">float32</span>&#123;<span class=\"number\">1000.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.4</span>, <span class=\"number\">7.0</span>, <span class=\"number\">50.0</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>Go语言允许仅对某些位置的元素进行初始化</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">balance := [<span class=\"number\">5</span>]<span class=\"keyword\">float32</span>&#123;<span class=\"number\">1</span>:<span class=\"number\">2.0</span>,<span class=\"number\">3</span>:<span class=\"number\">7.0</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，只有索引为1和3的元素进行了初始化，其余元素均为0。</p>\n<h3 id=\"二维数组\">二维数组</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var variable_name [SIZE1][SIZE2]...[SIZEN] variable_type</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> threedim [<span class=\"number\">5</span>][<span class=\"number\">10</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n<p>初始化</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">a := [<span class=\"number\">3</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;  </span><br><span class=\"line\"> &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125; ,   <span class=\"comment\">/*  第一行索引为 0 */</span></span><br><span class=\"line\"> &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125; ,   <span class=\"comment\">/*  第二行索引为 1 */</span></span><br><span class=\"line\"> &#123;<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>&#125;,   <span class=\"comment\">/* 第三行索引为 2 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：以上代码中倒数第二行的 } 必须要有逗号，因为最后一行的 } 不能单独一行，也可以写成这样</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">a := [<span class=\"number\">3</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;  </span><br><span class=\"line\"> &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125; ,   <span class=\"comment\">/*  第一行索引为 0 */</span></span><br><span class=\"line\"> &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125; ,   <span class=\"comment\">/*  第二行索引为 1 */</span></span><br><span class=\"line\"> &#123;<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>&#125;&#125;   <span class=\"comment\">/* 第三行索引为 2 */</span></span><br></pre></td></tr></table></figure>\n<p>对二维数组的访问和其余语言一样。</p>\n<h3 id=\"向函数传递数组\">向函数传递数组</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myFunction</span><span class=\"params\">(param [10]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;<span class=\"comment\">// 设定数组长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myFunction</span><span class=\"params\">(param []<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;<span class=\"comment\">// 未设定数组长度</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"指针-t_t\">指针 T_T</h2>\n<p>和<code>C++</code>基本一样的指针结构</p>\n<p>声明方式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var var_name *var-type</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ip *<span class=\"keyword\">int</span>        <span class=\"comment\">/* 指向整型*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fp *<span class=\"keyword\">float32</span>    <span class=\"comment\">/* 指向浮点型 */</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以认为在指针操作中：</p>\n<p><code>&amp;</code>运算符是获得地址的操作</p>\n<p><code>*</code>运算符是对对地址进行一个解析的操作，来获得该地址上存储的数据。</p>\n</blockquote>\n<h3 id=\"空指针\">空指针</h3>\n<p>当一个指针被定义后没有分配到任何变量时，它的值为 nil。</p>\n<p>nil 指针也称为空指针。</p>\n<p>nil在概念上和其它语言的null、None、nil、NULL一样，都指代零值或空值。</p>\n<p>一个指针变量通常缩写为 ptr。</p>\n<h3 id=\"指针数组\">指针数组</h3>\n<p>指针数组为，一个数组，其中的每一个元素都是一个指针。初始化方式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ptr [MAX]*<span class=\"keyword\">int</span>;</span><br></pre></td></tr></table></figure>\n<p>指针的数组可以通过遍历的方式对应数组的每一个元素。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">10</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span>&#125;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> i <span class=\"keyword\">int</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> ptr [MAX]*<span class=\"keyword\">int</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>  i = <span class=\"number\">0</span>; i &lt; MAX; i++ &#123;</span><br><span class=\"line\">      ptr[i] = &amp;a[i] <span class=\"comment\">/* 整数地址赋值给指针数组 */</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"指向指针的指针\">指向指针的指针</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ptr **<span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n<p>在解析指向指针的指针，也需要用<code>**</code>来解析。</p>\n<h3 id=\"指针作为函数参数\">指针作为函数参数</h3>\n<p>这个和<code>c++</code>一样。其实就是一个引用传参的变体。将地址传进去，这样对该地址的数据的操作，函数外侧该数据也会发生变化。</p>\n<h2 id=\"结构体\">结构体</h2>\n<p>和<code>Swift</code>的结构体大差不差，<strong>值传递的类</strong>，定义如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> struct_variable_type <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   member definition</span><br><span class=\"line\">   member definition</span><br><span class=\"line\">   ...</span><br><span class=\"line\">   member definition</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>声明如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">variable_name := structure_variable_type &#123;value1, value2...valuen&#125;</span><br><span class=\"line\">variable_name := structure_variable_type &#123; key1: value1, key2: value2..., keyn: valuen&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，和<code>Swift</code>一样，结构体是值传递，也就是说，对于<code>a=b</code>，是新建一个一样的结构体赋值给<code>a</code>，所以对<code>a</code>的更改，并不会影响<code>b</code>。</p>\n<p>所以对于函数的传参，值传参是无法更改函数外结构体的内容，必须用引用传参或者指针传参。</p>\n</blockquote>\n<h3 id=\"对切片的声明\">对切片的声明</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> identifier []<span class=\"keyword\">type</span></span><br></pre></td></tr></table></figure>\n<p>↑采用未声明长度的数组进行切片的声明。</p>\n<p>↓或者采用<code>make()</code>函数进行创建</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> slice1 []<span class=\"keyword\">type</span> = <span class=\"built_in\">make</span>([]<span class=\"keyword\">type</span>, <span class=\"built_in\">len</span>)</span><br><span class=\"line\">slice1 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">type</span>, <span class=\"built_in\">len</span>)</span><br></pre></td></tr></table></figure>\n<p>也可以指定容量的大小，<code>capacity</code>作为可选参数，定义切片的最大长度。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>([]T, length, capacity)</span><br></pre></td></tr></table></figure>\n<h3 id=\"切片初始化\">切片初始化</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">s :=[] <span class=\"keyword\">int</span> &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span> &#125; <span class=\"comment\">// []中是空的</span></span><br><span class=\"line\">s := arr[:] <span class=\"comment\">//数组arr的引用</span></span><br><span class=\"line\">s := arr[startIndex:] <span class=\"comment\">// 从startIndex到末尾</span></span><br><span class=\"line\">s := arr[:endIndex]  <span class=\"comment\">// 从开头到endIndex</span></span><br><span class=\"line\">s1 := s[startIndex:endIndex]  <span class=\"comment\">// 两者中间的切片</span></span><br></pre></td></tr></table></figure>\n<p>切片拥有<code>len()</code>和<code>cap()</code>函数，分别用来获得长度以及测量切片最长多长。</p>\n<p>如果是空的切片，则和<code>nil</code>相比较。</p>\n<p>切片是可以通过类似<code>Python</code>中的<code>[:]</code>进行截取的。</p>\n<p>切片拥有<code>append()</code>和<code>copy()</code>函数，前者用来增加元素，后者用来拷贝切片到新的切片。</p>\n<blockquote>\n<p>我们可以看出切片，实际的是获取数组的某一部分，<strong>len切片&lt;=cap切片&lt;=len数组</strong>，切片由三部分组成：指向底层数组的指针、len、cap。</p>\n</blockquote>\n<h2 id=\"range\">Range</h2>\n<p>和<code>Python</code>一样，用来和<code>for</code>一起遍历数组，但是其和<code>python</code>中加入了<code>enumrate</code>一样，是可以获得<code>Index</code>的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> key, value := <span class=\"keyword\">range</span> oldMap &#123;</span><br><span class=\"line\">    newMap[key] = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> oldMap &#123;</span><br><span class=\"line\">    a = value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"map\">Map</h2>\n<p>Map 是一种无序的键值对的集合。</p>\n<p>Map 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。</p>\n<p>其实就是<code>Python</code>中的<code>dict</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 使用 make 函数 */</span></span><br><span class=\"line\">map_variable := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[KeyType]ValueType, initialCapacity)</span><br></pre></td></tr></table></figure>\n<p>initialCapacity 是可选的参数，用于指定 Map 的初始容量。Map 的容量是指 Map 中可以保存的键值对的数量，当 Map 中的键值对数量达到容量时，Map 会自动扩容。如果不指定 initialCapacity，Go 语言会根据实际情况选择一个合适的值。</p>\n<h2 id=\"接口-interface\">接口！！ Interface！！</h2>\n<p>Go 语言提供了另外一种数据类型即接口，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。</p>\n<p>接口可以让我们将不同的类型绑定到一组公共的方法上，从而实现多态和灵活的设计。</p>\n<p>Go 语言中的接口是隐式实现的，也就是说，如果一个类型实现了一个接口定义的所有方法，那么它就自动地实现了该接口。因此，我们可以通过将接口作为参数来实现对不同类型的调用，从而实现多态。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Shape <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    area() <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Rectangle <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    width  <span class=\"keyword\">float64</span></span><br><span class=\"line\">    height <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r Rectangle)</span> <span class=\"title\">area</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r.width * r.height</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Circle <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    radius <span class=\"keyword\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c Circle)</span> <span class=\"title\">area</span><span class=\"params\">()</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3.14</span> * c.radius * c.radius</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s Shape</span><br><span class=\"line\">    s = Rectangle&#123;width: <span class=\"number\">10</span>, height: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;矩形面积: %f\\n&quot;</span>, s.area())<span class=\"comment\">// 同样的area，不同的方法，在func()更改</span></span><br><span class=\"line\">    s = Circle&#123;radius: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;圆形面积: %f\\n&quot;</span>, s.area())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"错误处理\">错误处理</h2>\n<p><code>Go</code>内置的错误接口类型：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> error <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Error() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个 DivideError 结构</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> DivideError <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    dividee <span class=\"keyword\">int</span></span><br><span class=\"line\">    divider <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现 `error` 接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(de *DivideError)</span> <span class=\"title\">Error</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    strFormat := <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    Cannot proceed, the divider is zero.</span></span><br><span class=\"line\"><span class=\"string\">    dividee: %d</span></span><br><span class=\"line\"><span class=\"string\">    divider: 0</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fmt.Sprintf(strFormat, de.dividee)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义 `int` 类型除法运算的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Divide</span><span class=\"params\">(varDividee <span class=\"keyword\">int</span>, varDivider <span class=\"keyword\">int</span>)</span> <span class=\"params\">(result <span class=\"keyword\">int</span>, errorMsg <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> varDivider == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            dData := DivideError&#123;</span><br><span class=\"line\">                    dividee: varDividee,</span><br><span class=\"line\">                    divider: varDivider,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            errorMsg = dData.Error()</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> varDividee / varDivider, <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 正常情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> result, errorMsg := Divide(<span class=\"number\">100</span>, <span class=\"number\">10</span>); errorMsg == <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">            fmt.Println(<span class=\"string\">&quot;100/10 = &quot;</span>, result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当除数为零的时候会返回错误信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> _, errorMsg := Divide(<span class=\"number\">100</span>, <span class=\"number\">0</span>); errorMsg != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">            fmt.Println(<span class=\"string\">&quot;errorMsg is: &quot;</span>, errorMsg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口与错误处理要和结构体合在一起。</p>\n<h2 id=\"并发\">并发！！！</h2>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> f(x, y, z)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">say</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">                time.Sleep(<span class=\"number\">100</span> * time.Millisecond)</span><br><span class=\"line\">                fmt.Println(s)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">go</span> say(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">        say(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"通道channel\">通道Channel</h3>\n<p>通道（channel）是用来传递数据的一个数据结构。</p>\n<p>通道可用于两个 goroutine 之间通过传递一个指定类型的值来同步运行和通讯。操作符 <code>&lt;-</code> 用于指定通道的方向，发送或接收。如果未指定方向，则为双向通道。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">ch &lt;- v    <span class=\"comment\">// 把 v 发送到通道 ch</span></span><br><span class=\"line\">v := &lt;-ch  <span class=\"comment\">// 从 ch 接收数据, 并把值赋给 v</span></span><br></pre></td></tr></table></figure>\n<p>对通道进行声明：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">ch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意</strong>：默认情况下，通道是不带缓冲区的。发送端发送数据，同时必须有接收端相应的接收数据。</p>\n</blockquote>\n<h3 id=\"通道缓冲区\">通道缓冲区</h3>\n<p>通道可以设置缓冲区，通过 make 的第二个参数指定缓冲区大小：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">ch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n<p>带缓冲区的通道允许发送端的数据发送和接收端的数据获取处于异步状态，就是说发送端发送的数据可以放在缓冲区里面，可以等待接收端去获取数据，而不是立刻需要接收端去获取数据。</p>\n<blockquote>\n<p><strong>注意</strong>：如果通道不带缓冲，发送方会阻塞直到接收方从通道中接收了值。如果通道带缓冲，发送方则会阻塞直到发送的值被拷贝到缓冲区内；如果缓冲区已满，则意味着需要等待直到某个接收方获取到一个值。接收方在有值可以接收之前会一直阻塞。</p>\n</blockquote>\n","categories":["Go"],"tags":["Tutorial"]},{"title":"Jetson Nano SD卡扩容","url":"/2023/11/09/Jetson-Nano-SD%E5%8D%A1%E6%89%A9%E5%AE%B9/","content":"<p>烧写Jetson Nano的Linux系统的时候，往往会出现利用已有的Jetson Nano的系统镜像对新的SD卡进行烧写，来满足不同的Nano有同样的配置和环境。</p>\n<p>此方法解决的是低内存卡的系统镜像烧写到高内存卡中出现的硬盘使用不满的情况。</p>\n<p><span id=\"more\"></span></p>\n<p>用户自行烧写完成Jetson Nano的镜像后，需进行SD卡扩容，以完全利用SD卡存储空间。 其实Jetson Nano是自带扩容的程序的。脚本路径在/usr/lib/nvidia/resizefs/nvresizefs.sh 脚本如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Copyright (c) 2019-2020, NVIDIA CORPORATION. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Redistribution and use in source and binary forms, with or without</span></span><br><span class=\"line\"><span class=\"comment\"># modification, are permitted provided that the following conditions</span></span><br><span class=\"line\"><span class=\"comment\"># are met:</span></span><br><span class=\"line\"><span class=\"comment\">#  * Redistributions of source code must retain the above copyright</span></span><br><span class=\"line\"><span class=\"comment\">#    notice, this list of conditions and the following disclaimer.</span></span><br><span class=\"line\"><span class=\"comment\">#  * Redistributions in binary form must reproduce the above copyright</span></span><br><span class=\"line\"><span class=\"comment\">#    notice, this list of conditions and the following disclaimer in the</span></span><br><span class=\"line\"><span class=\"comment\">#    documentation and/or other materials provided with the distribution.</span></span><br><span class=\"line\"><span class=\"comment\">#  * Neither the name of NVIDIA CORPORATION nor the names of its</span></span><br><span class=\"line\"><span class=\"comment\">#    contributors may be used to endorse or promote products derived</span></span><br><span class=\"line\"><span class=\"comment\">#    from this software without specific prior written permission.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS&#x27;&#x27; AND ANY</span></span><br><span class=\"line\"><span class=\"comment\"># EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span></span><br><span class=\"line\"><span class=\"comment\"># IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR</span></span><br><span class=\"line\"><span class=\"comment\"># PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR</span></span><br><span class=\"line\"><span class=\"comment\"># CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</span></span><br><span class=\"line\"><span class=\"comment\"># EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</span></span><br><span class=\"line\"><span class=\"comment\"># PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</span></span><br><span class=\"line\"><span class=\"comment\"># PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY</span></span><br><span class=\"line\"><span class=\"comment\"># OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></span><br><span class=\"line\"><span class=\"comment\"># (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></span><br><span class=\"line\"><span class=\"comment\"># OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This is a script to resize partition and filesystem on the root partition</span></span><br><span class=\"line\"><span class=\"comment\"># This will consume all un-allocated sapce on SD card after boot.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">usage</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;1&#125;</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;1&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage:&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;script_name&#125;</span> [options]&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Available options are:&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;\t-h | --help&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;\t\tShow this usage&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;\t-c | --check&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;\t\tCheck whether <span class=\"variable\">$&#123;script_name&#125;</span> can be used on current platform&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;\t-g | --get&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;\t\tShow APP partition size in MB&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;\t-m | --max&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;\t\tShow APP partition maximum available size in MB&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;\t-s &lt;app_size&gt; | --size &lt;app_size&gt;&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;\t\tSet APP partition size in MB&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Without any option means consume all unallocated&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;space on SD card.&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;Example:&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;script_name&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;script_name&#125;</span> -s 16384&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">check_pre_req</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\troot_dev=<span class=\"string\">&quot;<span class=\"subst\">$(sed -ne &#x27;s/.*\\broot=\\([^ ]*\\)\\b.*/\\1/p&#x27; &lt; /proc/cmdline)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$&#123;root_dev&#125;</span>&quot;</span> == *UUID* ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\troot_dev=<span class=\"string\">&quot;<span class=\"subst\">$(/sbin/findfs $&#123;root_dev&#125;)</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$&#123;root_dev&#125;</span>&quot;</span> == /dev/mmcblk* ]] || [[ <span class=\"string\">&quot;<span class=\"variable\">$&#123;root_dev&#125;</span>&quot;</span> == /dev/sd* ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tblock_dev=<span class=\"string\">&quot;<span class=\"subst\">$(/bin/lsblk -no pkname $&#123;root_dev&#125;)</span>&quot;</span></span><br><span class=\"line\">\t\troot_dev=<span class=\"string\">&quot;<span class=\"subst\">$(echo $root_dev | sed &#x27;s/^.....//g&#x27;)</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$&#123;block_dev&#125;</span>&quot;</span> != <span class=\"string\">&quot;&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># Check whether APP partition is located at the end of the disk</span></span><br><span class=\"line\">\t\troot_start_sector=<span class=\"string\">&quot;<span class=\"subst\">$(cat /sys/block/$&#123;block_dev&#125;/$&#123;root_dev&#125;/start)</span>&quot;</span></span><br><span class=\"line\">\t\tall_start_sectors=<span class=\"string\">&quot;<span class=\"subst\">$(cat /sys/block/$&#123;block_dev&#125;/*/start)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tis_last=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> start_sector <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;all_start_sectors&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> [[ <span class=\"string\">&quot;<span class=\"variable\">$&#123;start_sector&#125;</span>&quot;</span> -gt <span class=\"string\">&quot;<span class=\"variable\">$&#123;root_start_sector&#125;</span>&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\t\tis_last=<span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">break</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">done</span></span><br><span class=\"line\">\t\tsupport_resizefs=<span class=\"string\">&quot;<span class=\"variable\">$&#123;is_last&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">get_app_size</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpartition_size=<span class=\"string\">&quot;<span class=\"subst\">$(cat /sys/block/$&#123;block_dev&#125;/$&#123;root_dev&#125;/size)</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$((partition_size/2/1024)</span>)&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">max_available_app_size</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\"># Move backup GPT header to end of disk</span></span><br><span class=\"line\">\tsgdisk --move-second-header <span class=\"string\">&quot;/dev/<span class=\"variable\">$&#123;block_dev&#125;</span>&quot;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">\tapp_start_sector=<span class=\"string\">&quot;<span class=\"subst\">$(cat /sys/block/$&#123;block_dev&#125;/$&#123;root_dev&#125;/start)</span>&quot;</span></span><br><span class=\"line\">\tlast_usable_sector=<span class=\"string\">&quot;<span class=\"subst\">$(sgdisk -p /dev/$&#123;block_dev&#125; | \\</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t\tgrep <span class=\"string\">&quot;last usable sector&quot;</span> | \\</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t\tawk &#x27;&#123;print $10&#125;&#x27;)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$(((last_usable_sector - app_start_sector + 1)</span>/2/1024))&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">parse_args</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;1&#125;</span>&quot;</span> ]; <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;1&#125;</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\t-h | --<span class=\"built_in\">help</span>)</span><br><span class=\"line\">\t\t\tusage</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t-c | --check)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;support_resizefs&#125;</span>&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t-g | --get)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$&#123;support_resizefs&#125;</span>&quot;</span> = <span class=\"string\">&quot;false&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;ERROR: <span class=\"variable\">$&#123;script_name&#125;</span> doesn&#x27;t support this platform.&quot;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t\t\tget_app_size</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t-m | --max)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$&#123;support_resizefs&#125;</span>&quot;</span> = <span class=\"string\">&quot;false&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;ERROR: <span class=\"variable\">$&#123;script_name&#125;</span> doesn&#x27;t support this platform.&quot;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">fi</span></span><br><span class=\"line\">\t\t\tmax_available_app_size</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 0</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t-s | --size)</span><br><span class=\"line\">\t\t\t[ -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;2&#125;</span>&quot;</span> ] || usage <span class=\"string\">&quot;Not enough parameters&quot;</span></span><br><span class=\"line\">\t\t\tsize=<span class=\"string\">&quot;+<span class=\"variable\">$&#123;2&#125;</span>M&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">shift</span> 2</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t*)</span><br><span class=\"line\">\t\t\tusage <span class=\"string\">&quot;Unknown option: <span class=\"variable\">$&#123;1&#125;</span>&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">esac</span></span><br><span class=\"line\">\t<span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">script_name=<span class=\"string\">&quot;<span class=\"subst\">$(basename <span class=\"string\">&quot;<span class=\"variable\">$&#123;0&#125;</span>&quot;</span>)</span>&quot;</span></span><br><span class=\"line\">support_resizefs=<span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">size=<span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">root_dev=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">block_dev=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">check_pre_req</span><br><span class=\"line\">parse_args <span class=\"string\">&quot;<span class=\"variable\">$&#123;@&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$&#123;support_resizefs&#125;</span>&quot;</span> = <span class=\"string\">&quot;false&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;ERROR: <span class=\"variable\">$&#123;script_name&#125;</span> doesn&#x27;t support this platform.&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Move backup GPT header to end of disk</span></span><br><span class=\"line\">sgdisk --move-second-header <span class=\"string\">&quot;/dev/<span class=\"variable\">$&#123;block_dev&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get partition information for root partition</span></span><br><span class=\"line\">partition_num=<span class=\"string\">&quot;<span class=\"subst\">$(cat /sys/block/$&#123;block_dev&#125;/$&#123;root_dev&#125;/partition)</span>&quot;</span></span><br><span class=\"line\">partition_name=<span class=\"string\">&quot;<span class=\"subst\">$(sgdisk -i $&#123;partition_num&#125; /dev/$&#123;block_dev&#125; | \\</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\tgrep <span class=\"string\">&quot;Partition name&quot;</span> | cut -d\\&#x27; -f2)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">partition_type=<span class=\"string\">&quot;<span class=\"subst\">$(sgdisk -i $&#123;partition_num&#125; /dev/$&#123;block_dev&#125; | \\</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\tgrep <span class=\"string\">&quot;Partition GUID code:&quot;</span> | cut -d&#x27; &#x27; -f4)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">partition_uuid=<span class=\"string\">&quot;<span class=\"subst\">$(sgdisk -i $&#123;partition_num&#125; /dev/$&#123;block_dev&#125; | \\</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\tgrep <span class=\"string\">&quot;Partition unique GUID:&quot;</span> | cut -d&#x27; &#x27; -f4)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">partition_attr=<span class=\"string\">&quot;<span class=\"subst\">$(sgdisk -i $&#123;partition_num&#125; /dev/$&#123;block_dev&#125; | \\</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\tgrep <span class=\"string\">&quot;Attribute flags:&quot;</span> | cut -d&#x27; &#x27; -f3)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get start sector of the root partition</span></span><br><span class=\"line\">start_sector=<span class=\"string\">&quot;<span class=\"subst\">$(cat /sys/block/$&#123;block_dev&#125;/$&#123;root_dev&#125;/start)</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Delete and re-create the root partition</span></span><br><span class=\"line\"><span class=\"comment\"># This will resize the root partition.</span></span><br><span class=\"line\">sgdisk -d <span class=\"string\">&quot;<span class=\"variable\">$&#123;partition_num&#125;</span>&quot;</span> \\</span><br><span class=\"line\">\t-n <span class=\"string\">&quot;<span class=\"variable\">$&#123;partition_num&#125;</span>&quot;</span>:<span class=\"string\">&quot;<span class=\"variable\">$&#123;start_sector&#125;</span>&quot;</span>:<span class=\"string\">&quot;<span class=\"variable\">$&#123;size&#125;</span>&quot;</span> \\</span><br><span class=\"line\">\t-c <span class=\"string\">&quot;<span class=\"variable\">$&#123;partition_num&#125;</span>&quot;</span>:<span class=\"string\">&quot;<span class=\"variable\">$&#123;partition_name&#125;</span>&quot;</span> \\</span><br><span class=\"line\">\t-t <span class=\"string\">&quot;<span class=\"variable\">$&#123;partition_num&#125;</span>&quot;</span>:<span class=\"string\">&quot;<span class=\"variable\">$&#123;partition_type&#125;</span>&quot;</span> \\</span><br><span class=\"line\">\t-u <span class=\"string\">&quot;<span class=\"variable\">$&#123;partition_num&#125;</span>&quot;</span>:<span class=\"string\">&quot;<span class=\"variable\">$&#123;partition_uuid&#125;</span>&quot;</span> \\</span><br><span class=\"line\">\t-A <span class=\"string\">&quot;<span class=\"variable\">$&#123;partition_num&#125;</span>&quot;</span>:=:<span class=\"string\">&quot;<span class=\"variable\">$&#123;partition_attr&#125;</span>&quot;</span> \\</span><br><span class=\"line\">\t<span class=\"string\">&quot;/dev/<span class=\"variable\">$&#123;block_dev&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Inform kernel and OS about change in partition table and root</span></span><br><span class=\"line\"><span class=\"comment\"># partition size</span></span><br><span class=\"line\">partprobe <span class=\"string\">&quot;/dev/<span class=\"variable\">$&#123;block_dev&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Resize filesystem on root partition to consume all un-allocated</span></span><br><span class=\"line\"><span class=\"comment\"># space on disk</span></span><br><span class=\"line\">resize2fs <span class=\"string\">&quot;/dev/<span class=\"variable\">$&#123;root_dev&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>给上述脚本增加权限后执行，然后重启即可完成扩容</p>\n","categories":["Others"],"tags":["Tutorial"]},{"title":"Jetson Xavier NX 烧录系统+配置torch全教程","url":"/2023/11/05/Jetson-Xavier-NX-%E7%83%A7%E5%BD%95%E7%B3%BB%E7%BB%9F%E5%85%A8%E6%95%99%E7%A8%8B+torch/","content":"<p>本教程适配于采用M.2 NVMe SSD的Jetson Xavier NX板子。</p>\n<p><strong>介绍了采用EMMC作为内置储存的Jetson Xavier NX该如何烧写程序并完成扩容。以及安装CUDA、Pytorch、torchvision教程。</strong></p>\n<p>血🩸与泪😢的旅途。</p>\n<p><span id=\"more\"></span></p>\n<h3 id=\"host虚拟机准备\">HOST虚拟机准备</h3>\n<p>由于Jetson Xavier NX采用的是内置的EMMC为储存卡，而不是采用可以插拔的SD卡，所以我们需要用NVIDIA的SDK Manager进行烧写程序，这个软件的运行环境为Linux。</p>\n<h4 id=\"下载vmware安装ubuntu\">下载VMware，安装Ubuntu</h4>\n<p><strong>VMware17.0获取网址：<a href=\"https://mp.weixin.qq.com/s/AJ5Rio6aJr_D5NmJMKTRmA?poc_token=HM9qR2WjyYXc_fUVf5vQ3XXmJBvJQUoQ-5gnmRgH\">VMware17.0安装教程</a></strong></p>\n<p>在VMware中安装Ubuntu系统，Ubuntu系统的版本注意：</p>\n<ol type=\"1\">\n<li>Ubuntu18.04只可以选择Jetpack4.x</li>\n<li>Ubuntu20.04+可以选择Jetpack5.x</li>\n<li>Jetpack4.x -&gt; Python 3.6</li>\n<li>Jetpack5.x -&gt; Python 3.8</li>\n</ol>\n<p>对python版本有要求的一定要注意Jetpack版本！！</p>\n<p><strong>Ubuntu的下载网址：<a href=\"https://ubuntu.com/download/alternative-downloads\">https://ubuntu.com/download/alternative-downloads</a></strong></p>\n<p>按照标准的虚拟机安装环境步骤进行安装。</p>\n<h4 id=\"虚拟机使用主机vpn\">虚拟机使用主机VPN</h4>\n<p>由于SDK Manager需要翻墙下载，所以需要虚拟机需要使用主机网络</p>\n<p>参考博客：<a href=\"https://blog.csdn.net/weixin_45910027/article/details/127607439\">如何在虚拟机Ubuntu下使用主机网络</a></p>\n<p>首先查看本机的Clash查看VPN端口号是多少？</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311051822011.png\" alt=\"image-20231105182240822\" style=\"zoom: 40%;\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311051830172.jpg\" alt=\"img_v2_e066f759-e810-4163-897c-41f85707ef0g\" style=\"zoom:67%;\" /></p>\n<p>Mac端和Windows端类似，去看代理端口是否为：<strong>7890</strong></p>\n<p>在Windows界面使用win+r -&gt; cmd调出<code>Terminal</code></p>\n<p>在<code>Terminal</code>中输入<code>ipconfig</code>获取IP地址：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311051827116.jpg\" alt=\"img_v2_8b9845f9-7414-4278-b164-c551cbb2ae7g\" style=\"zoom:67%;\" /></p>\n<p>记住VMware的IPv4地址，然后进入虚拟机界面，在设置中找到network界面。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311051830604.jpg\" alt=\"img_v2_2ba0aee1-701d-4629-9515-551f08ee4c4g\" style=\"zoom: 67%;\" /></p>\n<p>点击Network Proxy 进入下面的界面，选择Manual，然后将Proxy后面的IP地址写为在Windows中查看的VMware地址，后面的端口号和Clash中的一致。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311051831051.jpg\" alt=\"img_v2_6215e685-acd9-42ec-8ce2-8717610dbc1g\" /></p>\n<p>如此：虚拟机就可以使用主机的VPN了。</p>\n<h4 id=\"下载sdk-manager\">下载SDK Manager</h4>\n<p><strong>SDK Manager的下载地址：<a href=\"https://developer.nvidia.com/sdk-manager\">https://developer.nvidia.com/sdk-manager</a></strong></p>\n<p>在虚拟机中下载，下载完成后运行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install ./sdkmanager_1.9.2-10899_amd64.deb</span><br></pre></td></tr></table></figure>\n<p><code>.deb</code>前为下载的SDK Manager 安装包名称。</p>\n<h3 id=\"烧写系统\">烧写系统</h3>\n<h4 id=\"jetson-xavier-nx的准备\">Jetson Xavier NX的准备</h4>\n<p>使用接线帽将NX的<code>FC REC</code>引脚和<code>GND</code>引脚短接，让NX进入Recovery模式，用<strong>数据线</strong>连接到电脑上，并插上电源，准备系统的烧录。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311051840015.png\" alt=\"image-20231105184016942\" style=\"zoom:67%;\" /></p>\n<p>由于我需要的是Python3.8+，所以我选择的是Ubuntu20.04系统以及Jetpack5.1.1系统。</p>\n<h4 id=\"sdk-manager-烧录\">SDK Manager 烧录</h4>\n<p>打开SDK Manager：在Ubuntu的终端中输入命令<code>sdkmanager</code>即可命令行打开。</p>\n<p><strong>STEP 01：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20231105225637881.png\" alt=\"image-20231105225637881\" style=\"zoom:67%;\" /></p>\n<p>在这里要选择<code>JetPack 5.1.2</code>的版本，我选择的是<code>Jetpack 5.1.1(rev. 1)</code>。</p>\n<p><code>Target Hardware</code>插入USB会自动跳出选择选项，选择自己的板子版本后，点击<code>CONTINUE</code></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20231105232410116.png\" alt=\"image-20231105232410116\" style=\"zoom:67%;\" /></p>\n<p><strong>STEP 02：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20231105225946667.png\" alt=\"image-20231105225946667\" style=\"zoom:67%;\" /></p>\n<p>由于EMMC只有16G，所以在第一次烧写的时候，只选择<code>Jetson Linux</code>，别的<code>SDK Components</code>都不要选择，选择之后会出现disk内存不够。</p>\n<p><strong>STEP 03：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20231105230310553.png\" alt=\"image-20231105230310553\" style=\"zoom:67%;\" /></p>\n<p>在这个界面中，输入虚拟机的密码，进入安装界面。</p>\n<p>安装界面会在一开始跳转到初始化界面，这里确定linux的用户名和密码，Storage Device要选择默认的<code>EMMC/SD</code></p>\n<blockquote>\n<p><strong>注意：设置密码一定不能单一空格，每次都在Linux登录的时候显示密码不对！</strong></p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20231105232713834.png\" alt=\"image-20231105232713834\" style=\"zoom:67%;\" /></p>\n<p>之后就是等待，可能会到99.83%的时候停止，这里我的<strong>解决办法是换了一根数据线就完成了。</strong>网上说的感觉都没啥用……</p>\n<blockquote>\n<p>如果在烧写到99.3%左右的时候，Jetson的风扇开始转，并且主机显示Device掉线、重新连接，那么多半是安装成功了。</p>\n</blockquote>\n<p><strong>STEP 04：</strong></p>\n<p>安装完成之后点击EXIT，<strong>不要拔掉USB线！！！！！！</strong>，可以拔掉接线帽，连接显示器，进入Linux界面。</p>\n<p>当Linux界面初始化完成之后，即可拔掉USB线。</p>\n<h3 id=\"系统扩容和改启动盘\">系统扩容和改启动盘</h3>\n<h4 id=\"格式化硬盘\">格式化硬盘</h4>\n<p>由于EMMC只有16G的容量，当下载完Linux之后大概只剩下5G左右，是无法进行CUDA等的配置的，所以需要将启动盘换成NVMe。</p>\n<p>打开Linux系统，打开<code>Terminal</code>，在其中输入</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">df -l</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20231106090522868.png\" alt=\"image-20231106090522868\" style=\"zoom:67%;\" /></p>\n<p>这里挂在<code>/</code>下面的盘是启动盘，我们现在的启动盘已经用43%了，需要对其进行更换成128G SSD。</p>\n<p>在应用程序中搜索<code>disk</code>：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20231106090702147.png\" alt=\"image-20231106090702147\" style=\"zoom:67%;\" /></p>\n<p>在<code>disk</code>程序中，按照顺序进入128G Disk中进行<strong>硬盘格式化</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20231106090831588.png\" alt=\"image-20231106090831588\" style=\"zoom:67%;\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20231106090858246.png\" alt=\"image-20231106090858246\" style=\"zoom:67%;\" /></p>\n<p>在格式化硬盘之后，对硬盘进行分区，点击Volume左下方的加号进行分区：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20231106090956578.png\" alt=\"image-20231106090956578\" style=\"zoom:67%;\" /></p>\n<p>给Free Space Following 16G的空间：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20231106091027759.png\" alt=\"image-20231106091027759\" style=\"zoom:67%;\" /></p>\n<p>名称可以不写</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20231106091107787.png\" alt=\"image-20231106091107787\" style=\"zoom:67%;\" /></p>\n<p>至此，硬盘格式化+分区成功！！！！</p>\n<h4 id=\"更改启动盘\">更改启动盘</h4>\n<p>如果虚拟机可以ping通github，则直接在<code>Terminal</code>中输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/jetsonhacks/rootOnNVMe.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> rootOnNVMe</span><br></pre></td></tr></table></figure>\n<p>如果虚拟机网无法ping通github，可以通过U盘将Windows电脑上的<code>rootOnNVMe</code>拷贝下来。</p>\n<p><strong>！！！但是注意，由于Windows的sh格式和Linux不一样，所以拷贝下来的文件无法直接运行，需要在<code>Terminal</code>运行以下命令！！！</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> rootOnNVMe</span><br><span class=\"line\">sed -i -e <span class=\"string\">&#x27;s/\\r$//&#x27;</span> copy-rootfs-ssd.sh</span><br><span class=\"line\">sed -i -e <span class=\"string\">&#x27;s/\\r$//&#x27;</span> setup-service.sh</span><br></pre></td></tr></table></figure>\n<p>该命令将把<code>CR</code>字符替换为空，这将使这些行以<code>LF</code>(<code>\\n</code>)作为结尾！</p>\n<p>注意！！！，在<code>data</code>文件夹中仍然有一个<code>.sh</code>文件！如果不更改，会导致<code>setup-service.sh</code>看似成功了，但是没有成功！</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> data</span><br><span class=\"line\">sed -i -e <span class=\"string\">&#x27;s/\\r$//&#x27;</span> setssdroot.sh</span><br></pre></td></tr></table></figure>\n<p>在这些做完后，运行两个<code>.sh</code>文件进行启动盘更改：</p>\n<ol type=\"1\">\n<li><p>将源文件复制到SSD固态硬盘，就完成了系统的迁移</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">./copy-rootfs-ssd.sh</span><br></pre></td></tr></table></figure></li>\n<li><p>迁移好之后，还需要将SSD设置为第一启动盘，系统才能从SSD启动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">./setup-service.sh</span><br></pre></td></tr></table></figure></li>\n<li><p>重启系统生效</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20231106092556322.png\" alt=\"image-20231106092556322\" style=\"zoom:67%;\" /></p>\n<p>重启完查看，挂载在<code>\\</code>下的盘是哪个即可知道成功与否：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20231106093152203.png\" alt=\"image-20231106093152203\" style=\"zoom:67%;\" /></p>\n<h3 id=\"安装cuda等\">安装CUDA等</h3>\n<p>安装CUDA需要从SDK Manager安装，和之前方式一样，用USB链接上Jetson之后，打开SDK Manager，STEP 01 和之前的一样，在STEP 02 上选择除去Jetson Linux的选项。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311070830932.jpg\" alt=\"img_v2_94c96e97-5c40-4e8f-a615-d02dd8f05dbg\" style=\"zoom: 67%;\" /></p>\n<p>然后进行安装，安装时需要输入Jetson NX的用户名和密码进行验证。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311070830461.jpg\" alt=\"img_v2_40f0c940-f1bb-4b20-9a10-5d25755ceebg\" style=\"zoom: 67%;\" /></p>\n<p>安装纯靠运气，建议听着《好运来》进行安装……</p>\n<blockquote>\n<p>如果一直error，我的做法是重新安装Linux系统。</p>\n<ul>\n<li>可能需要Jetson Xavier处于开机并登录状态，这次是因为这个成功了——2024.3.9（ip error）</li>\n</ul>\n</blockquote>\n<p>下载完之后进入Jetson Xavier NX界面，在<code>Terminal</code>中输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvcc -V</span><br></pre></td></tr></table></figure>\n<p>查看CUDA 版本，能查看到则说明安装成功</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311070836759.png\" alt=\"image-20231107083646546\" style=\"zoom: 50%;\" /></p>\n<h3 id=\"配置pytorch\">配置Pytorch</h3>\n<h4 id=\"配置pip的下载路径\">配置pip的下载路径</h4>\n<p>由于Jetson不容易翻墙，下载pip包需要换下载源，方法如下：</p>\n<p>创建<code>~/.pip.pip.conf</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">mkdir .pip</span><br><span class=\"line\">vim .pip/pip.conf</span><br></pre></td></tr></table></figure>\n<p>在<code>pip.conf</code>中添加如下语句：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host = https://pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看jetpack版本\">查看Jetpack版本</h4>\n<p>官方给的查看语句：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /etc/nv_tegra_release</span><br></pre></td></tr></table></figure>\n<p>Blog给的查看语句：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-cache show nvidia-jetpack</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311070832653.jpg\" alt=\"img_v2_11fbf261-72d7-4545-af25-1ebcfd7f90cg\" style=\"zoom:50%;\" /></p>\n<p><strong>感觉第二个更好用！！！</strong></p>\n<h4 id=\"安装pytorch\">安装pytorch</h4>\n<p>官方配置Pytorch教程：<a href=\"https://docs.nvidia.com/deeplearning/frameworks/install-pytorch-jetson-platform/index.html#overview__section_xavier_nx\">https://docs.nvidia.com/deeplearning/frameworks/install-pytorch-jetson-platform/index.html#overview__section_xavier_nx</a></p>\n<p>在<code>Terminal</code>中输入：安装Pytorch需要的包</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y update; </span><br><span class=\"line\">sudo apt-get -y install autoconf bc build-essential g++-8 gcc-8 clang-8 lld-8 gettext-base gfortran-8 iputils-ping libbz2-dev libc++-dev libcgal-dev libffi-dev libfreetype6-dev libhdf5-dev libjpeg-dev liblzma-dev libncurses5-dev libncursesw5-dev libpng-dev libreadline-dev libssl-dev libsqlite3-dev libxml2-dev libxslt-dev locales moreutils openssl python-openssl rsync scons python3-pip libopenblas-dev;</span><br></pre></td></tr></table></figure>\n<p>安装Pytorch的步骤：</p>\n<ol type=\"1\">\n<li><p>为Pytorch设定路径</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> TORCH_INSTALL=https://developer.download.nvidia.cn/compute/redist/jp/v511/pytorch/torch-2.0.0+nv23.05-cp38-cp38-linux_aarch64.whl</span><br></pre></td></tr></table></figure></li>\n<li><p>下载Pytorch</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -m pip install --upgrade pip; python3 -m pip install aiohttp numpy==<span class=\"string\">&#x27;1.19.4&#x27;</span> scipy==<span class=\"string\">&#x27;1.5.3&#x27;</span> <span class=\"built_in\">export</span> <span class=\"string\">&quot;LD_LIBRARY_PATH=/usr/lib/llvm-8/lib:<span class=\"variable\">$LD_LIBRARY_PATH</span>&quot;</span>; python3 -m pip install --upgrade protobuf; python3 -m pip install --no-cache <span class=\"variable\">$TORCH_INSTALL</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>这里是自动下载最新的符合Jetpack v5.1.1的pytorch版本，如果我们需要别的pytorch版本，可以查看网址<a href=\"https://developer.download.nvidia.com/compute/redist/jp/\">https://developer.download.nvidia.com/compute/redist/jp/</a></p>\n<p><code>vxx</code>指的是Jetpack的version版本，<code>.whl</code>指的是需要下载的pytorch轮子。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311061341929.png\" alt=\"image-20231106134136723\" style=\"zoom: 50%;\" /></p>\n<p>↑不确定是不是根据这个确定的，还是根据↓确定的版本❓❓❓❓❓：</p>\n<p><a href=\"https://forums.developer.nvidia.com/t/pytorch-for-jetson/72048\">PyTorch for Jetson</a></p>\n<p>这里我需要的是Pytorch1.x的版本，所以我选择的安装语句为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> TORCH_INSTALL=https://developer.download.nvidia.com/compute/redist/jp/v51/pytorch/torch-1.14.0a0+44dac51c.nv23.01-cp38-cp38-linux_aarch64.whl</span><br><span class=\"line\">python3 -m pip install --upgrade pip; python3 -m pip install aiohttp numpy==<span class=\"string\">&#x27;1.19.4&#x27;</span> scipy==<span class=\"string\">&#x27;1.5.3&#x27;</span> <span class=\"built_in\">export</span> <span class=\"string\">&quot;LD_LIBRARY_PATH=/usr/lib/llvm-8/lib:<span class=\"variable\">$LD_LIBRARY_PATH</span>&quot;</span>; python3 -m pip install --upgrade protobuf; python3 -m pip install --no-cache <span class=\"variable\">$TORCH_INSTALL</span></span><br></pre></td></tr></table></figure>\n<p>安装结束后，测验torch是否能用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> torch </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>torch.cuda.is_available()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>torch.cuda.device_count()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>torch.cuda.get_device_name(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>torch.__version__<span class=\"comment\"># 查看torch版本！</span></span><br></pre></td></tr></table></figure>\n<p>当输出为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">Xavier</span><br></pre></td></tr></table></figure>\n<p>则说明安装成功！！！😈😈😈😈😈😈😈😈😈😈😈</p>\n<h3 id=\"安装torchvision\">安装torchvision</h3>\n<p>首先确定torch的版本，在上文中得知：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311070839768.png\" alt=\"image-20231107083946555\" style=\"zoom:50%;\" /></p>\n<p>在网址<a href=\"https://forums.developer.nvidia.com/t/pytorch-for-jetson/72048\">PyTorch for Jetson</a>中有torchvision的使用教程</p>\n<p>Pytorch与torchvision的版本对应关系：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311070841621.png\" alt=\"image-20231107084155410\" style=\"zoom:50%;\" /></p>\n<p>安装不能使用<code>pip3 install torchvision=x.x.x</code>，而是要用编译的办法，在<code>Terminal</code>中写：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libjpeg-dev zlib1g-dev libpython3-dev libopenblas-dev libavcodec-dev libavformat-dev libswscale-dev</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> --branch &lt;version&gt; https://github.com/pytorch/vision torchvision   <span class=\"comment\"># see below for version of torchvision to download</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> torchvision</span><br><span class=\"line\"><span class=\"built_in\">export</span> BUILD_VERSION=0.x.0  <span class=\"comment\"># where 0.x.0 is the torchvision version  </span></span><br><span class=\"line\">python3 setup.py install --user</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ../  <span class=\"comment\"># attempting to load torchvision from build dir will result in import error</span></span><br><span class=\"line\">$ pip install <span class=\"string\">&#x27;pillow&lt;7&#x27;</span> <span class=\"comment\"># always needed for Python 2.7, not needed torchvision v0.5.0+ with Python 3.6</span></span><br></pre></td></tr></table></figure>\n<p>对于我们pytorch1.14.0的版本，最后的<code>Terminal</code>语句为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libjpeg-dev zlib1g-dev libpython3-dev libopenblas-dev libavcodec-dev libavformat-dev libswscale-dev</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> --branch v0.14.1 https://github.com/pytorch/vision torchvision   </span><br><span class=\"line\"><span class=\"built_in\">cd</span> torchvision</span><br><span class=\"line\"><span class=\"built_in\">export</span> BUILD_VERSION=0.14.1   </span><br><span class=\"line\">python3 setup.py install --user</span><br></pre></td></tr></table></figure>\n<p>成功之后查看torchvision版本</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202311070928637.png\" alt=\"image-20231107092834335\" style=\"zoom:50%;\" /></p>\n","categories":["Others"],"tags":["Tutorial"]},{"title":"终端使用Clash代理加速","url":"/2023/09/23/%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8Clash%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F/","content":"<p>解决Windows掉在<code>git_bash</code>中不能用clash的情况</p>\n<p>如果是MacOS，直接在右上角的Clash选择复制终端代理指令</p>\n<p><span id=\"more\"></span></p>\n<p>MacOS复制的指令为： <code>export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</code></p>\n<h3 id=\"环境\">环境</h3>\n<p>Windows 11， Clash for Windows</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202309231847161.jpg\" alt=\"img_v2_95803079-bf45-4364-9a02-19db79b363cg\" style=\"zoom:67%;\" /></p>\n<p><strong><em>这里注意：主程序默认端口为 7890</em></strong></p>\n<h3 id=\"cmd\">cmd</h3>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=http://<span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">7890</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> https_proxy=http://<span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">7890</span></span><br></pre></td></tr></table></figure>\n<p>还原命令：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=</span><br><span class=\"line\"><span class=\"built_in\">set</span> https_proxy=</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-bash\">Git Bash</h3>\n<p>通过设置<code>http_proxy</code>和<code>https_proxy</code>，可以让终端走指定的代理</p>\n<p>配置脚本如下，在终端直接执行，只会<strong>临时起效：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=http://127.0.0.1:7890</span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=<span class=\"variable\">$http_proxy</span></span><br></pre></td></tr></table></figure>\n<p><code>7890</code>是<code>http</code>代理对应的端口，和<code>clash</code>中的端口号一致。</p>\n<h4 id=\"便捷脚本\">便捷脚本</h4>\n<p>这里提供一个便捷的脚本，里面包含打开、关闭功能：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">function proxy_on()&#123;</span><br><span class=\"line\">\texport http_proxy=http://127.0.0.1:7890</span><br><span class=\"line\">\texport https_proxy=$http_proxy</span><br><span class=\"line\">\techo -e &quot;终端代理已开启。&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function proxy_off()&#123;</span><br><span class=\"line\">\tunset http_proxy https_proxy</span><br><span class=\"line\">\techo -e &quot;终端代理已关闭。&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过<code>proxy_on</code>开启，从<code>proxy_off</code>关闭代理。</p>\n<p>接下来需要把脚本写入<code>.bash_profile</code>或者<code>.zprofile</code>这样就可以永久生效。</p>\n<p>至于到底是哪个文件，可以根据指令<code>echo $SHELL</code>返回的结果判断：</p>\n<ul>\n<li><code>/bin/bash</code> -&gt; <code>.bash_profile</code></li>\n<li><code>/bin/zsh</code> -&gt; <code>.zprofile</code></li>\n</ul>\n<p>可以执行安装脚本（追加内容+生效），注意一定根据上面的结果更改<code>.bash_profile</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; ~/.bash_profile &lt;&lt; EOF</span><br><span class=\"line\">function proxy_on() &#123;</span><br><span class=\"line\">    export http_proxy=http://127.0.0.1:7890</span><br><span class=\"line\">    export https_proxy=\\$http_proxy</span><br><span class=\"line\">    echo -e &quot;终端代理已开启。&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function proxy_off()&#123;</span><br><span class=\"line\">    unset http_proxy https_proxy</span><br><span class=\"line\">    echo -e &quot;终端代理已关闭。&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<p>打开代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxy_on</span><br></pre></td></tr></table></figure>\n<p>关闭代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxy_off</span><br></pre></td></tr></table></figure>\n<p>可以执行<code>curl cip.cc</code>进行验证：（clash开全局）</p>\n<p><strong>但是使用<code>git clone</code>的时候不需要开全局</strong></p>\n","categories":["Others"],"tags":["Tutorial"]},{"title":"2023 CVPR idea","url":"/2023/09/04/2023-CVPR-idea/","content":"<p>为了解决联邦学习中异构数据导致的客户端漂移以及灾难性遗忘产生的针对下一篇CCF A的idea。</p>\n<span id=\"more\"></span>\n<h3 id=\"联邦学习痛点分析\">联邦学习痛点分析</h3>\n<p>现在来看联邦学习面对的主要问题是：</p>\n<ul>\n<li>数据异构性</li>\n<li>模型异构性</li>\n<li>灾难性遗忘（本地训练过拟合，覆盖了全局模型的知识）</li>\n</ul>\n<p>其中数据异构性会导致客户端漂移的情况发生</p>\n<blockquote>\n<p><strong>客户端漂移：</strong></p>\n<p>是指在联邦学习中，参与训练的客户端（设备或节点）在不同轮次的训练中可能产生模型参数的漂移或变化，导致其模型的性能逐渐变差。这种漂移可能是由于不同客户端的数据分布不同，或者在训练过程中客户端本身的模型更新不稳定等原因引起的。</p>\n<p><strong>Example：</strong></p>\n<p>医院A的患者主要是老年人，而医院B的患者主要是年轻人。在训练过程中，医院A的模型可能会逐渐更好地适应老年人的健康情况，导致模型在老年人数据上的准确性提高，但在年轻人数据上性能下降。相反，医院B的模型可能会更好地适应年轻人数据，导致在年轻人数据上的准确性提高，但在老年人数据上性能下降。</p>\n</blockquote>\n<blockquote>\n<p><strong>灾难性遗忘：</strong></p>\n<p>当一个模型在学习新任务时，会导致其在之前已经学习过的任务上性能下降的现象。这种情况可能发生在机器学习中，尤其是在深度学习领域，当一个模型被迫忘记之前学习的知识，以适应新的任务时。</p>\n<p><strong>Example：</strong></p>\n<p>考虑一个语言模型，最初它被训练用于生成英文文本。随后，这个模型被重新调整为执行另一个任务，比如图像分类。在调整过程中，模型需要学习识别图像中的不同对象和特征。然而，由于新任务的训练数据不同于之前的文本数据，模型可能会不可避免地\"忘记\"如何生成文本。结果是，即使在图像分类任务上性能提高了，模型在生成文本方面的能力可能会受到影响，导致其在之前的任务上的性能下降。</p>\n</blockquote>\n<h3 id=\"解决客户端漂移的一些方法\">解决客户端漂移的一些方法</h3>\n<h4 id=\"联邦交叉相关学习\">联邦交叉相关学习</h4>\n<p>采用自监督学习得到一个泛化模型，采用的是无标签的公共数据，增加相同类别特征的不变性和不同类别特征的差异性。</p>\n<p>核心思想是通过该矩阵捕捉不同设备之间的特征关联性。帮助模型更好地理解不同设备的数据分布和特征分布之间的差异。从而提升模型性能。</p>\n<h4 id=\"通过过去全局平均下降方向预测全局下降方向对漂移进行修正\">通过过去全局平均下降方向预测全局下降方向，对漂移进行修正</h4>\n<p>文章在服务器端和每个客户端中都设置了变量<span class=\"math inline\">\\(c\\)</span></p>\n<p>服务器端的参数是全局模型往最优模型的梯度下降方向，客户端中的参数是客户端的梯度更新方向</p>\n<p>其实就是服务器端利用客户端在K次训练的<strong>梯度下降方向的平均值</strong>作为<strong>下次梯度下降方向的预测方向。</strong></p>\n<p>每次客户端参数在聚合的时候，要先去除掉之前的平均下降梯度，然后再补充上预测的全局梯度下降方向。</p>\n<h4 id=\"定义局部漂移变量并将其放入损失函数中\">定义局部漂移变量并将其放入损失函数中</h4>\n<p>为客户端定义了局部漂移变量，该变量应该为全局模型与局部模型的差值，将其放入到目标函数中。</p>\n<p>这个方法和SCAFFOLD的区别就是，将惩罚项放入到目标函数中，会在局部模型训练的时候就向全局模型靠拢，然后再加上SCAFFOLD的修正项</p>\n<h4 id=\"在全局模型聚合后利用本地模型提取的知识微调全局模型\">在全局模型聚合后利用本地模型提取的知识微调全局模型</h4>\n<p>在每一轮通信中，FedFTG随机选择一组客户端，向他们广播全局模型。每个客户端使用全局模型初始化本地模型，并使用本地优化器对其进行培训。服务器收集本地模型并将其聚合为一个初步的全局模型。FedFTG没有将聚合的模型直接广播回每个客户机，而是使用<strong>从本地模型中提取的知识在服务器中微调这个初步的全局模型。</strong></p>\n<p>维护一个条件生成器来生成和真实数据分布一样的伪数据，并通过定义损失函数来获得硬样本（不容易区分的样本）作为知识蒸馏所用的训练集。</p>\n<p>利用每个客户端的伪数据和客户端模型进行知识蒸馏微调。</p>\n<h4 id=\"利用公共数据集作为客户端沟通桥梁\">利用公共数据集作为客户端沟通桥梁</h4>\n<p>利用客户端在公共数据集的输出来获得该客户端的知识分布，利用KL散度对知识分布差异进行量化。差异越大越说明这两个客户端之间相互学习的越多。每个客户端都保存其与其他所有客户端的知识分布差异。在训练的时候，保证其与其他客户端的知识分布差异最小。</p>\n<h3 id=\"解决灾难性遗忘的一些方法\">解决灾难性遗忘的一些方法</h3>\n<h4 id=\"预训练模型和全局模型双重蒸馏\">预训练模型和全局模型双重蒸馏</h4>\n<p>为了避免在本地训练的时候模型参数逐渐覆盖之前的参数，该方法通过兼顾本地学习的知识和其他客户端学习知识的蒸馏方法。</p>\n<p>文章将全局模型当做领域间的教师模型，因为这个模型包含了所有客户端的知识，可以用来减少过拟合。</p>\n<p>文章将客户端在本地数据集上预训练的模型当做本地的教师模型，用来传授本地的知识。</p>\n<h4 id=\"利用null-space空间清除对过往模型的干扰\">利用Null Space空间，清除对过往模型的干扰</h4>\n<blockquote>\n<p>Training networks in null space of feature covariance for continual learning. <em>CVPR</em>. 2021.</p>\n</blockquote>\n<blockquote>\n<p>Learning Federated Visual Prompt in Null Space for MRI Reconstruction. <em>CVPR</em>. 2023.</p>\n</blockquote>\n<p><strong>为什么在零空间内进行梯度下降可以帮助避免灾难性遗忘呢？</strong></p>\n<p>不影响先前任务的方向: 如果你的更新在之前任务的零空间内，那么这意味着你正在在一个方向上更新权重，这个方向不会改变之前任务的输出。因此，通过限制梯度下降的方向在零空间内，你确保了新任务的学习不会“干扰”或“忘记”之前的任务。</p>\n<p>权重空间的分离: 通过限制更新到零空间，你实际上是在权重空间中为不同的任务创建了分离的“子空间”。这意味着每个任务都有自己的特定方向或子空间进行权重更新，而不会影响其他任务。</p>\n<p>充分利用网络容量: 而不是让所有任务共享同一个权重空间，使用零空间技术使得不同任务可以在不同的子空间内找到其最优权重。这有效地利用了整个网络的容量，同时减少了任务间的互相干扰。</p>\n<h3 id=\"暑假想法\">2023.8暑假想法</h3>\n<h4 id=\"section\"><strong>20230727：</strong></h4>\n<p>让服务器保存一个N*N的矩阵，矩阵内部保存每个服务端对应的聚合参数。初始的聚合参数可以通过两个客户端数据分布的相似性(KL散度)进行赋值，相似性高的客户端的权重更高。客户端可以生成一些符合自身数据集分布的伪数据（保证隐私）。为了简化计算，可以进行分组，将尽量相似的客户端分成一组。</p>\n<blockquote>\n<p>借鉴：Layer-wised Model Aggregation for Personalized Federated Learning</p>\n</blockquote>\n<h4 id=\"section-1\"><strong>20230805：</strong></h4>\n<p>我们要解决的问题是什么：异构的数据+异构的模型 -&gt; 非IID导致模型漂移+灾难性遗忘；异构的模型无法直接聚合</p>\n<p>初步的想法：利用20230727的idea构造specialist models，然后借鉴《Distilling……》论文中的方式，通过知识蒸馏将specialist model的知识统一起来。</p>\n<p>如果我们引入了Specialist model，就避免了灾难性遗忘的问题，我们直接就让他遗忘所有知识。</p>\n<h4 id=\"section-2\"><strong>20230807：</strong></h4>\n<p>可不可以将硬样本的数据挖掘出来，通过硬样本的模型蒸馏进一步提升模型性能。</p>\n<p>模型蒸馏：需要的是专才模型，通过专家的指导，可以提升模型在这个层面的能力。</p>\n<p>联邦学习聚合：需要的是相似的模型，通过聚合的形式提升能力。</p>\n<blockquote>\n<p>借鉴：Fine-tuning Global Model via Data-Free Knowledge Distillation for Non-IID Federated Learning</p>\n</blockquote>\n<h4 id=\"section-3\"><strong>20230808：</strong></h4>\n<p>利用specialist models 将全局每个类别性能最好的模型进行蒸馏出一个全局模型</p>\n<p>在SCAFFOLD论文中，作者预测了每个客户端的梯度下降方向，用的是平均值，能否在预测上进行改进？</p>\n<h4 id=\"section-4\">20230904</h4>\n<p>感觉还是可以通过图分割，每个客户端会根据<strong>KL散度</strong>构建全连通图，然后利用图分割将设备分成各个组，保证每个组内的数据分布是相似的。（多粒度也可以）。然后每个组内的模型通过模型聚合形成<strong>专才模型</strong>。专才模型会对global模型进行一个蒸馏微调操作。</p>\n","categories":["XF-TANK"],"tags":["My-Papers"]},{"title":"2023 GlobeCom MG²FL","url":"/2023/08/01/2023-GlobeCom-MG%C2%B2FL/","content":"<p>🎉🎉🎉 热烈祝贺人生第一篇CCF会议：<strong>GLOBECOM 2023 GCSN</strong> 中稿！——2023.08.04 🎉🎉🎉</p>\n<p>MG²FL: Multi-Granularity Grouping-Based Federated Learning in Green Edge Computing Systems</p>\n<p>简单总结一下文章思路、问题以及扩刊方向。</p>\n<p><span id=\"more\"></span></p>\n<h3 id=\"论文对应的痛点及解决方式\">论文对应的痛点及解决方式</h3>\n<p>联邦学习多用在了分布式的设备上，比如说无人机、无人汽车、移动机器人等。这是因为联邦学习在解决了隐私问题之外，其最大的好处是利用了分布式的数据和分布式的算力。所以移动边缘设备成了非常适合联邦学习应用的设备。但是，这些移动边缘设备一般会面临着几个问题：</p>\n<ol type=\"1\">\n<li>能耗问题：由于是移动设备，每个设备的电池电量是有限的，无法进行长时间高能耗的机器学习任务。</li>\n<li>通信问题：对于移动的边缘设备，每个设备分布较为离散，相距较远的设备可能会出现通信延迟等问题，会严重减慢联邦学习的收敛速度。</li>\n<li>异构问题：由于分布离散且不均匀，移动边缘设备所拥有的数据集和模型都是异构的，这不利于传统联邦学习聚合。</li>\n<li>恶意问题：这个系统中可能会出现故障或恶意节点影响全局模型。</li>\n</ol>\n<p>对于以上三点，文章提出了MG²FL，创新点如下：</p>\n<ol type=\"1\">\n<li>依托设备之间的通信开销以及指导效果进行构图，并利用平衡图分割获得群组设备性能相近的平衡图，同时保证了图之间的设备通信开销较低且指导效果较高。</li>\n<li>利用知识蒸馏的方式将拥有细粒度、大模型的设备的知识转移给拥有粗粒度、小模型的设备。从而使得在较短的训练周期中小模型获得更高的模型性能。</li>\n<li>采用了信用分聚合方式，对每个设备信用分动态调控，从而控制其聚合权重来减少恶意行为的影响。</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202308052058966.png\" alt=\"image-20230805201312187\" style=\"zoom: 50%;\" /></p>\n<h3 id=\"模型构建\">模型构建</h3>\n<h4 id=\"通信开销延迟传输能耗\">通信开销（延迟+传输能耗）</h4>\n<p><strong>通信延迟</strong> <span class=\"math display\">\\[\nt_{ij}^{latency}= d_{ij}/v\n\\]</span> 这里的<span class=\"math inline\">\\(d\\)</span>是两个边缘设备之间的距离，<span class=\"math inline\">\\(v\\)</span>是信号传输速度。在这里并没有考虑模型参数的传输速率，仅仅考虑了传播速率。</p>\n<p><strong>传输能耗</strong></p>\n<p>传输能耗采用了香农公式： <span class=\"math display\">\\[\nr_{ij}=B_{ij}log_2(1+\\frac{g_{ij}p_{ij}}{N_0B_{ij}})\n\\]</span> 这里的<span class=\"math inline\">\\(r\\)</span>是数据的传输速率，传输时间为：<span class=\"math inline\">\\(T_{ij}=|d|/r_{ij}\\)</span>，这里的<span class=\"math inline\">\\(|d|\\)</span>为传输数据量的大小，那么最后的传输能耗如下，其中<span class=\"math inline\">\\(p\\)</span>是传输功率： <span class=\"math display\">\\[\nE_{ij}^{trans}=p_{ij}T_{ij}\n\\]</span></p>\n<h4 id=\"模型指导蒸馏\">模型指导（蒸馏）</h4>\n<p>我们定义了模型指导能力<span class=\"math inline\">\\(\\pi\\)</span>： <span class=\"math display\">\\[\n\\pi_{ij} = \\varphi(w_i,x_j, y_j)-A_j\n\\]</span></p>\n<p><span class=\"math display\">\\[\n\\varphi(w_i,x_j, y_j)=\\frac{\\sum_{k=1}^{|x_j|}\\mathbb{I}_{\\{H\\cdot p(w_i,x_{j,k})=y_{j,k} \\}}}{|x_j|},\n\\]</span></p>\n<p><span class=\"math inline\">\\(w_i\\)</span>为<span class=\"math inline\">\\(i\\)</span>的模型参数，<span class=\"math inline\">\\(x_j\\)</span>为<span class=\"math inline\">\\(j\\)</span>的数据特征，<span class=\"math inline\">\\(y_j\\)</span>为标签。</p>\n<p>其实就是看Teacher <span class=\"math inline\">\\(i\\)</span> 在 <span class=\"math inline\">\\(j\\)</span> 的公开数据集上的预测精度比Student <span class=\"math inline\">\\(j\\)</span> 的预测精度高多少。预测精度差距越大，说明这个Teacher能力越高，其作为老师的意义越大。</p>\n<h4 id=\"信用模型\">信用模型</h4>\n<p>信用分数用来衡量边缘设备的可信性，可信性越高，我们认为其应该在聚合中的影响越高。初始的信用分数用其各自的数据量大小和计算性能来确定，之后动态的部分利用其在模型参数在服务器的测试数据集上的精度进行动态调整 <span class=\"math display\">\\[\nC_i=\\log\\frac{D_i}{\\sum_{i=1}^{N}D_i}+f_i + c_i^I\n\\]</span></p>\n<p><span class=\"math display\">\\[\nc_i^I=\\sum_{k=1}^{I}{1}/\\{1+e^{-log(c_i^{k-1}+a_i)}\\},\\quad c_i^0=0\n\\]</span></p>\n<p>如此设计，在聚合过程中上传恶意参数以及不上传参数的模型的信用分数会不断降低，其在聚合中的影响会越来越小。</p>\n<h3 id=\"算法部分\">算法部分</h3>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202308052059594.png\" alt=\"image-20230805203915328\" style=\"zoom: 33%;\" /></p>\n<h4 id=\"测试训练\">测试训练</h4>\n<p>在最开始，每个边缘设备进行自己的测试训练，这里训练采用较小的数据集进行训练，同时epoch可以设置的比较低。这个阶段主要是测试每个边缘设备的计算能力、统计其数据量以及计算各个设备之间的指导能力等，为之后的图构建做准备。</p>\n<h4 id=\"图构建\">图构建</h4>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202308052040297.png\" alt=\"image-20230805204059233\" style=\"zoom: 33%;\" /></p>\n<p>如图中所示，因为我们的目的是构建一个平衡图，每个子图的节点性能要相近，同时在图分割之后，每个子图中的设备之间的通信开销要较低，且指导能力要强。</p>\n<p>我们对于每个节点的权重定义为其数据集大小和设备性能：<span class=\"math inline\">\\(W_{i} = ({\\gamma t_i +\\frac{1}{1+e^{-D_i/f_i}} })/{2}\\)</span></p>\n<p>对于边的定义为（<span class=\"math inline\">\\(e_{ij}\\)</span>越低越好，所以将<span class=\"math inline\">\\(\\pi\\)</span>去倒数来统一单调性）： <span class=\"math display\">\\[\ne_{ij} = \\nu\\frac{1}{\\pi_{ij}}+ \\varsigma t^{latency}_{ij}+ \\tau E^{trans}_{ij}, \\ i &gt; j\n\\]</span></p>\n<p>因此我们使用了平衡图分割算法KaHypar，这个算法会将图粗化并进行平衡分割，之后在进行图细化。分割后每个子图的权重会很相似。 <span class=\"math display\">\\[\n\\max\\limits_{s_k\\in\\mathcal{S}}|V_{s_k}|\\leq(1+\\varepsilon)\\frac{\\sum_{s_k\\in \\mathcal{S}}|V_{s_k}|}{|\\mathcal{S}|}\n\\]</span> 同时该算法会切割权重最高的几个边来构建平衡图，这就使得文章最后得到的图中通信开销较高且指导能力较弱的边都被切割掉了。</p>\n<h4 id=\"模型指导\">模型指导</h4>\n<p>每个设备会存储在测试训练中所有对其指导的设备的指导能力参数<span class=\"math inline\">\\(\\pi\\)</span>，在模型指导环节，每个设备会选择<strong>在组内的</strong>指导能力最强的设备进行指导操作。 <span class=\"math display\">\\[\nw_i=w_i - \\eta\\alpha\\bigtriangledown\\zeta(M_i,M_j)\n\\]</span></p>\n<p><span class=\"math display\">\\[\ns.t.\\quad j=\\arg\\max\\  \\pi_{ij},\\quad j\\in N(i)\n\\]</span></p>\n<h4 id=\"信用分聚合\">信用分聚合</h4>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202308052100917.png\" alt=\"image-20230805204818101\" style=\"zoom: 33%;\" /></p>\n<p>简单来说就是每个边缘设备进行训练结束后，会将自己的模型参数上传到leader，leader会利用自己的测试数据集对每个模型参数进行测试，利用其准确率更新每个边缘设备的信用分，然后利用信用分进行聚合。随后选择信用分最高的边缘设备作为下一次的leader。</p>\n<hr />\n<p>总体来说，就是整个系统分成了两层，每个边缘设备被分到了一个群组中，由于文章考虑了两种不同的模型，所以每个群组会有两个leader，这个leader一定是该模型中信用分最高的设备，然后每个群组在leader上聚合后，每个群组的leader会进行最后的聚合来获得最终的全局参数。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202308052101178.png\" alt=\"image-20230805205235356\" style=\"zoom:50%;\" /></p>\n<h3 id=\"审稿意见\">审稿意见</h3>\n<blockquote>\n<ol type=\"1\">\n<li>通常，传播延迟可以忽略不计，因为微波的传播速度非常高。传输延迟不应该与能量消耗结合起来。它应该是优化中的独立约束。</li>\n<li>应提供(4)中的详细函数。</li>\n<li>应讨论所提出算法的复杂性。</li>\n<li>图5在当前版本中很难遵循。最好重新整理一下。评估的指标应标记在 y 轴上。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol type=\"1\">\n<li>鼓励作者添加有关调度算法和恶意检测技术的其他参考文献，以提供全面的背景并展示该领域的现有方法。这将有助于建立背景并突出所提出方法的新颖性。</li>\n<li>进行模拟并展示结果对于证明所提出的方法相对于以前的方法的有效性和优越性至关重要。通过与现有方法进行性能比较，作者可以展示他们提出的算法所实现的优势和改进。</li>\n<li>对于作者来说，清楚地解释在设计算法时结合基于图的技术背后的动机非常重要。他们应该强调图表提供的优点和好处，例如捕获复杂的关系，促进有效的信息共享，或实现有效的决策。通过为图表的使用提供清晰的理由，作者可以确定其方法的相关性和潜在影响。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol type=\"1\">\n<li>添加更多有关基于 FL 的边缘计算中的恶意行为的参考。</li>\n<li>[9]似乎没有提到联邦学习。[10]还提出了多粒度指导FL来增强性能，那么这项工作和ref有什么区别呢？作者应该给出更多的解释。</li>\n<li>作者应详细解释模拟结果。在第 5 页，本文中的数字有点混乱。1) 图6(a)中缩写“SD of EP”中的“EP”指的是什么？2) 图 7 (b) 中的“目标”指标代表什么？3）此外，作者在本文中没有介绍基线。</li>\n<li>结论不完整，没有充分阐述本文的意义。</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol type=\"1\">\n<li>建议添加图2和图3的额外描述，以提供更清晰的MG2FL框架概述。</li>\n<li>模拟部分缺乏对所使用的三个基线的充分解释。</li>\n<li>图5中的标签看起来很混乱。</li>\n<li>当epoch在 100 到 125 之间时，图 7(a) 中观察到了明显的差距。有必要对这一差距提供全面的解释，以更好地理解其原因和含义。</li>\n<li>论文缺乏Mg2FL与信用模型收敛速度的数学推导，这将为信用定义的有效性和可靠性提供必要的支持。包含这样的推导将提高论文的可信度并强化所提出的方法。</li>\n</ol>\n</blockquote>\n<h3 id=\"扩刊方向\">扩刊方向</h3>\n<p>暂略…</p>\n","categories":["XF-TANK"],"tags":["My-Papers"]},{"title":"2023 Summer Vacation Paper","url":"/2023/07/09/2023-Summer-Vacation-Paper/","content":"<p>本博客为在2023.07.01 - 2023.09.01期间阅读的10余篇论文笔记。</p>\n<p><strong><em>主题为：联邦学习、异构性、异步联邦学习、分层联邦学习</em></strong></p>\n<p>文章大体上来自于A、B会和A刊，少数几篇与GLOBECOM相似的出处不限。</p>\n<p><span id=\"more\"></span></p>\n<h2 id=\"skimasynchronous-hierarchical-federated-learning\">（Skim）Asynchronous Hierarchical Federated Learning</h2>\n<blockquote>\n<p>Wang, Xing, and Yijun Wang. \"Asynchronous hierarchical federated learning.\" <em>arXiv preprint arXiv:2206.00054</em> (2022).</p>\n</blockquote>\n<p>本文提出了一种<strong>异步</strong>的<strong>分层</strong>联邦学习，创新点为：</p>\n<ol type=\"1\">\n<li>利用网络拓扑或聚类算法进行分组；</li>\n<li>采用异步联邦学习容忍异构性。</li>\n</ol>\n<p>👀主要解决<strong>同步分层联邦学习速度慢</strong>。</p>\n<p>在联邦学习聚合的时候，每一个群组的leader会有一个队列，这个队列会存储来自每个客户机的参数，周期性地将结果聚合，不用等待一些掉队者的结果。并且作者提出，模型参数越过时，误差越大。因此文章<strong>采用了一个过时函数来控制每个客户机参数的影响程度</strong>。 <span class=\"math display\">\\[\n\\alpha_{t&#39;}=\\alpha \\times \\sigma(t&#39;-t)\n\\]</span> 这里<span class=\"math inline\">\\(\\sigma\\)</span>是一个单调递减的函数用来控制影响程度。<span class=\"math inline\">\\(t&#39;\\)</span>为聚合器收到中央服务器下发的最新模型的时间，那些尚未没有被聚合，仍然在队列中的模型参数的时间戳为<span class=\"math inline\">\\(t\\)</span>，所以<span class=\"math inline\">\\(t&#39;&gt;t\\)</span>是一定成立的，而<span class=\"math inline\">\\(t\\)</span>越小，说明这个模型参数越过时，所以<span class=\"math inline\">\\(\\sigma\\)</span>来降低其权重。</p>\n<p>在中央服务器上，也有一个队列来存储聚合器的更新，由于异步学习，那么每个聚合器接收到的客户机的更新个数也不一样，所以聚合器上传要将聚合次数<span class=\"math inline\">\\(n_k\\)</span>、模型参数和时间戳<span class=\"math inline\">\\(t&#39;\\)</span>一起上传。文章假设最新的全局模型的时间戳为<span class=\"math inline\">\\(t&#39;&#39;\\)</span>,<span class=\"math inline\">\\(t&#39;&#39; &gt; t&#39;\\)</span>。和上一层一样，中心聚合器也利用<span class=\"math inline\">\\(\\sigma\\)</span>来权衡每个聚合器的权重，不同的是，聚合器接受的更新个数越多，也会相应提升其贡献。 <span class=\"math display\">\\[\n\\alpha_{t&#39;&#39;}=\\frac{n_k}{N}\\sigma(t&#39;&#39;-t&#39;)\\alpha\n\\]</span> 其中<span class=\"math inline\">\\(N\\)</span>为所有的客户机的总数。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307091442638.png\" alt=\"image-20230709144148540\" style=\"zoom:110%;\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307091445675.png\" alt=\"image-20230709144512623\" style=\"zoom:100%;\" /></p>\n<p>从结果来看，分层会大大增加学习系统的复杂性，使其收敛速度慢并且不稳定（橙色）。但是文章提出的异步操作缓解了分层的速度慢和稳定性差的问题。并且随着设备数的不断上升，文章的方法（红色）的优势更加明显。</p>\n<p>不过另一层面：文章还统计了通信次数，也可以看出来分层其实是很显著地减少<strong>中心聚合器的负担</strong>。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307091449111.png\" alt=\"image-20230709144956065\" style=\"zoom:67%;\" /></p>\n<p><span style=\"background-color: orange;\">对于本文的未来研究方向，有几个有趣的方向可以追求<strong>。首先，正如作者在论文中提到的，作者的加权机制偏向于对于计算和通信速度更快的设备进行学习，这在数据在客户端上是独立同分布（i.i.d.）的情况下效果很好。如果涉及到非独立同分布（non-i.i.d.）的数据，作者需要设计一个更复杂的加权机制来适应异步联邦学习。</strong>第二个有趣的研究方向是修改本地客户端学习中的简单L2正则化方法。作者还需要完成理论分析的推导和证明。</span></p>\n<h2 id=\"skimwscc-a-weight-similarity-based-client-clustering-approach-for-non-iid-federated-learning\">（Skim）WSCC: A weight-similarity-based client clustering approach for non-IID federated learning</h2>\n<blockquote>\n<p>Tian, Pu, et al. \"WSCC: A weight-similarity-based client clustering approach for non-IID federated learning.\" IEEE Internet of Things Journal 9.20 (2022): 20243-20256.</p>\n</blockquote>\n<p>本文提出了一种基于权重相似度的<strong>非iid</strong>联邦学习客户端<strong>聚类</strong>方法，创新点：</p>\n<ol type=\"1\">\n<li>利用余弦距离度量来确定客户端集群；</li>\n<li>不产生格外数据的情况下优化了通信开销。</li>\n</ol>\n<p>👀主要就是为了解决<strong>non-iid的问题</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307091506783.png\" alt=\"image-20230709150621729\" style=\"zoom:100%;\" /></p>\n<p>非IID类型：</p>\n<ol type=\"1\">\n<li>标签分布：在这种情况下，节点之间的标签比例并不均匀分布。例如，一个节点可能具有某些标签的较高比例，而其他节点上可能没有出现某些标签。</li>\n<li>特征不平衡：这指的是具有相同标签的样本具有不同特征，或者反过来。例如，在手写识别任务中，同一个数字可能有不同来源采集的各种特征。</li>\n<li>数据集规模差异：当不同传感器收集的数据量大小不平等时，就会出现这种情况。样本较少的节点容易受到影响。</li>\n</ol>\n<p>目前的问题是在联邦学习开始时候，各个节点的初始DNN模型是相同的，经过训练之后，如果仍然利用加权平均聚合，没有办法反应非IID的实际全局权重。</p>\n<p>因此在非IID情况下，不能把目标函数定义为最小化加权平均的损失函数。而是应该保证每个节点都找到最小化的损失函数。 <span class=\"math display\">\\[\nw_i^*=argmin_{w_i}\\{F_i(w_i)\\}\n\\]</span> 为了解决这个问题，<strong>文章根据数据集的分布将一个联邦学习任务分解成多个同时进行的联邦学习任务，每个集群内部仍然使用IID模型，并用FedAvg协作。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307091552130.png\" alt=\"image-20230709155220077\" style=\"zoom:90%;\" /> <img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307091552043.png\" alt=\"image-20230709155241994\" style=\"zoom:90%;\" /></p>\n<p><strong>在客户端层面：</strong>每个节点的初始模型参数是相同的，但是由于其各自的数据都是非IID的，所以在训练的时候，梯度也会发散，就如同下图一样。每个不同颜色的箭头代表一个分布。相似分布的梯度方向很可能会接近收敛。因此，在<strong>这项工作中，作者将联邦学习训练中的非独立同分布问题视为通过它们的分布对客户端进行聚类，并在同一聚类中聚合权重。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307091557971.png\" alt=\"image-20230709155740910\" style=\"zoom:100%;\" /></p>\n<p><em>这里使用余弦相似性的原因为：余弦相似性不受到缩放效应的影响，特别是对于DNN模型的高维权重向量。</em></p>\n<p>在每一轮聚合中，作者随机选择一个接收到的参数作为基准，用于计算余弦距离。然后使用距离向量作为后续聚类过程的输入（第5行）</p>\n<p>这里文章中使用了AP聚类算法，具体可以见<kbd>ChatGPT</kbd>。对于非独立同分布物联网联邦学习任务，自适应聚类（AP）方法是理想的解决方案，因为它可以自动确定聚类数量。对于存在不确定节点的联邦学习任务，节点分布是未知的。</p>\n<p><strong>在节点层面：</strong></p>\n<p>这里有一个验证的阶段，节点将会对下发的全局模型进行验证，如果这个模型的准确性与节点内的本地模型的准确性低的程度大于阈值，就放弃该全局模型，继续使用原模型计算。</p>\n<h2 id=\"cvprlearn-from-others-and-be-yourself-in-heterogeneous-federated-learning\">（CVPR）Learn from Others and Be Yourself in Heterogeneous Federated Learning</h2>\n<blockquote>\n<p>Huang, Wenke, Mang Ye, and Bo Du. \"Learn from others and be yourself in heterogeneous federated learning.\" <em>Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition</em>. 2022.</p>\n<p><a href=\"https://github.com/WenkeHuang/FCCL\">FCCL github源代码</a></p>\n</blockquote>\n<p>本文提出了一种联邦互相关和连续学习 FCCL（Federated Cross-Correlation and Continual Learning），创新点：</p>\n<ol type=\"1\">\n<li>通过利用未标记的公共数据和自我监督学习来实现异构模型的泛化表示；</li>\n<li>通过使用更新后的模型和预训练模型进行跨领域和内部领域的知识蒸馏，平衡来自其他模型和自身模型的知识。</li>\n</ol>\n<p>👀本文解决的主要问题：1. 怎么在异构的联邦学习中学习到一种泛化表示，可以减轻漂移的问题；2. 怎么平衡多种知识来减少灾难性的遗忘<strong>（在本地训练的时候过拟合当前知识而忘记之前的知识）</strong>，在域间或域内都能表现较好的性能。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307091928203.png\" alt=\"image-20230709192850136\" style=\"zoom:100%;\" /></p>\n<h3 id=\"方法\">方法</h3>\n<p>这个文章总体上提出了两种不同的学习架构：<strong>联邦交叉相关学习（Federated Cross-Correlation Learning）、联邦持续学习（Federated Continual Learning）</strong></p>\n<h4 id=\"联邦交叉相关学习\">联邦交叉相关学习</h4>\n<p>这个方法受到了自监督学习的启发，自监督学习可以获得一个比较泛化的模型。但是在这个工作中，由于异构的数据，导致相同标签的特征是有明显差异的，所以对于模型来说<strong>需要鼓励相同类别特征的不变性和不同类别特征的多样性。</strong>同时不同的模型承载不同的数据，这个数据是具有隐私性的，不适合自监督学习，为了保证安全，文章利用了无标签的公共数据。</p>\n<p>通过自监督学习，增加不同类别之间的多样性和相同类别的不变性来学习一个泛化的模型。这样的表示能够尽可能地保留关于图像的信息，并在不同领域中具有一定的不变性。</p>\n<p>文章构建了一种交叉相关矩阵：对于每个模型的logit输出为<span class=\"math inline\">\\(Z_i\\)</span>，<span class=\"math inline\">\\(\\bar{Z}=\\frac{1}{K}\\sum_iZ_i\\)</span>。计算第<span class=\"math inline\">\\(i\\)</span>个参与者的交叉相关矩阵： <span class=\"math display\">\\[\nM_i^{uv}=\\frac{\\sum_b||Z_i^{b,u}||\\space||\\overline{Z}^{b,v}||}{\\sqrt{\\sum_b||Z_i^{b,u}||^2}\\sqrt{\\sum_b||\\overline{Z}^{b,v}||^2}}\n\\]</span> 其中<span class=\"math inline\">\\(b\\)</span>是批处理样本，<span class=\"math inline\">\\(u,v\\)</span>均表示logits层的维度索引。<span class=\"math inline\">\\(||·||\\)</span>是沿着批维度的归一化操作。最终得到<span class=\"math inline\">\\(M_i\\)</span>是一个维度为<span class=\"math inline\">\\(C\\)</span>的方阵，其中数据介于-1到1（不相似到相似）。协作的loss值设置为 <span class=\"math display\">\\[\nL_i^{Col}=\\sum_{u}(1-M^{uu})^2+\\lambda_{Col}\\sum_{u}\\sum_{v\\neq u}(1+M_{i}^{uv})^2\n\\]</span> <span class=\"math inline\">\\(\\lambda_{Col}\\)</span>用来权衡两项的重要性，当交叉相关矩阵的对角线元素取值+1时，它鼓励来自不同参与者的logits输出相似；当交叉相关矩阵的非对角线元素取值-1时，它鼓励logits输出的多样性，因为这些logits输出的不同维度将彼此不相关。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307101548971.png\" alt=\"image-20230710154829891\" style=\"zoom:67%;\" /></p>\n<h4 id=\"联邦持续学习\">联邦持续学习</h4>\n<p>传统的监督损失函数会引发两个问题：<strong>1. 在局部更新中，由于没有其他参与者的监督，模型容易过拟合当前数据分布；2. 目标设计通常只根据先验概率独立地对预测结果进行惩罚，这提供了有限且较为僵硬的领域内信息。</strong></p>\n<p>因此文章中提出了一种兼顾领域内和领域间的知识蒸馏方法。</p>\n<p>在每次中央服务器下发模型之后，每个参与者会获得一个<span class=\"math inline\">\\(\\theta_i^{t-1}\\)</span>，这个模型是通过全局聚合得到的，所以拥有其他参与者学到的知识。</p>\n<p>那么组间的知识蒸馏loss就为 <span class=\"math display\">\\[\nL_i^{Inter}=\\sigma(Z_{i,pvt}^{t-1})log\\frac{\\sigma(Z_{i,pvt}^{t-1})}{\\sigma(Z_{i,pvt}^{t,im})}\n\\]</span> 目的是在保持隐私的同时，不断向他人学习，来保证域间的性能，缓解联邦学习中的灾难性遗忘。</p>\n<p>此外对于第<span class=\"math inline\">\\(i\\)</span>个参与者，作者可以使其在自己的私有数据上对模型进行预训练获得<span class=\"math inline\">\\(\\theta_i^*\\)</span>，然后利用其的logit输出<span class=\"math inline\">\\(Z_{i,pvt}^*\\)</span>来对域内进行知识蒸馏： <span class=\"math display\">\\[\nL_i^{Intra}=\\sigma(Z_{i,pvt}^*)log\\frac{\\sigma(Z_{i,pvt}^*)}{\\sigma(Z_{i,pvt}^{t,im})}\n\\]</span> 在一定程度上，上述的两个模型分别代表了域间的老师模型和域内的老师模型（<span class=\"math inline\">\\(\\theta_i^{t-1}\\)</span>，<span class=\"math inline\">\\(\\theta_i^*\\)</span>）</p>\n<p>所以最后双向知识蒸馏的loss为两者相加。 <span class=\"math display\">\\[\nL_i^{Dual}=L_i^{Inter}+L_i^{Intra}\n\\]</span> 联邦持续学习的整体loss为： <span class=\"math display\">\\[\nL_i^{Loc}=L_i^{CE}+\\lambda_{Loc}L_i^{Dual}\n\\]</span> <span class=\"math inline\">\\(L_i^{CE}\\)</span>为传统的交叉熵损失。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307101611546.png\" alt=\"image-20230710161140453\" style=\"zoom:100%;\" /></p>\n<p>利用双向知识蒸馏学习到的特征在领域内和领域间都更加紧凑且分离。模型展现出更好的区分特征，产生了有前景的领域内和领域间性能。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307101614108.png\" alt=\"image-20230710161456999\"  /></p>\n<h2 id=\"cvprfeddc-federated-learning-with-non-iid-data-via-local-drift-decoupling-and-correction\">（CVPR）FedDC: Federated Learning with Non-IID Data via Local Drift Decoupling and Correction</h2>\n<blockquote>\n<p>Gao, Liang, et al. \"Feddc: Federated learning with non-iid data via local drift decoupling and correction.\" <em>Proceedings of the IEEE/CVF conference on computer vision and pattern recognition</em>. 2022.</p>\n<p><a href=\"https://github.com/gaoliang13/FedDC\">FedDC github源代码</a></p>\n</blockquote>\n<p>作者提出了一种新的局部漂移解耦与修正的联邦学习算法(FedDC)，创新点为：</p>\n<ol type=\"1\">\n<li>动态更新每个客户端的局部目标函数（1. 约束惩罚项：表示全局参数、漂移变量和局部参数之间的关系；2. 梯度修正项：减少每一轮训练中的梯度漂移）；</li>\n<li>在训练过程中通过引入漂移变量对局部模型和全局模型进行解耦，减小了局部漂移对全局目标的影响，使其收敛速度更快，达到更好的性能。</li>\n</ol>\n<p>👀本文解决的主要问题就是<strong>联邦学习中的客户端漂移问题</strong></p>\n<p>在异构的联邦学习中，客户端的局部最优点和全局最优点是不一致的。</p>\n<p><strong>客户端漂移</strong></p>\n<p>每个客户端在本地数据集上训练的本地模型和直接在全局数据集上训练的全局模型之间存在漂移，如果忽略漂移，服务器将无法得到较好的模型，而非IID数据是高度倾斜的，所以普通的FedAvg性能会明显降低。</p>\n<p>举个简单的例子：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307161531550.png\" alt=\"image-20230716153135403\" style=\"zoom:120%;\" /></p>\n<p>假设模型中存在一个 <strong><em>非线性的</em></strong> 变换函数<span class=\"math inline\">\\(f\\)</span>，<span class=\"math inline\">\\(\\theta_1\\)</span>和<span class=\"math inline\">\\(\\theta_2\\)</span>是两个客户端的局部参数，<span class=\"math inline\">\\(w_c\\)</span>为理想的模型参数，<span class=\"math inline\">\\(w_f\\)</span>是FedAvg获得的参数。客户端的漂移用<span class=\"math inline\">\\(h\\)</span>表示，那么<span class=\"math inline\">\\(h_1 = w_c-\\theta_1\\)</span>，<span class=\"math inline\">\\(h_2=w_c-\\theta_2\\)</span>。<span class=\"math inline\">\\(x\\)</span>是一个数据点，那么客户端1对应的输出应该是<span class=\"math inline\">\\(y_1=f(\\theta_1, x)\\)</span>，同样的客户端2的输出为：<span class=\"math inline\">\\(y_2=f(\\theta_2, x)\\)</span>。利用FedAvg获得的模型参数<span class=\"math inline\">\\(w_f=\\frac{\\theta_1+\\theta_2}{2}\\)</span>，而理想的模型参数应该为<span class=\"math inline\">\\(w_c=f^{-1}(\\frac{y_1+y_2}{2})/x\\)</span>，因为<span class=\"math inline\">\\(f\\)</span>不是一个线性函数，所以<span class=\"math inline\">\\(w_c\\neq w_f\\)</span>，<span class=\"math inline\">\\(f(w_f,x)\\neq\\frac{y_1+y_2}{2}\\)</span>。</p>\n<p>这就说明FedAvg的全局模型是漂移的，因此本文章要<strong>学习全局和局部模型之间的局部漂移，并在将局部模型参数上传到服务器之间将局部漂移桥接起来。</strong></p>\n<h3 id=\"方法-1\">方法</h3>\n<h4 id=\"优化目标与参数更新\">优化目标与参数更新</h4>\n<p>首先，文章为每个客户端定义了一个局部漂移变量<span class=\"math inline\">\\(h_i\\)</span>，在理想的情况下，局部漂移变量应该为<span class=\"math inline\">\\(h_i=w-\\theta_i\\)</span>，这里<span class=\"math inline\">\\(w\\)</span>为全局模型参数，<span class=\"math inline\">\\(\\theta_i\\)</span>是客户端<span class=\"math inline\">\\(i\\)</span>的局部模型参数。在训练过程中，需要保持这个限制，所以作者将其作为惩罚项 <span class=\"math display\">\\[\nR_i(\\theta_i, h_i,w)=||h_i+\\theta_i-w||^2\n\\]</span> 通过引入<span class=\"math inline\">\\(R\\)</span>，作者将方程约束优化，变成无约束优化问题。</p>\n<p>最后的目标函数为 <span class=\"math display\">\\[\nF(\\theta_i,h_i,D_i,w)=L_i(\\theta_i)+\\frac{\\alpha}{2}R_i(\\theta_i, h_i,w)+G_i(\\theta_i,g_i,g)\n\\]</span> 其中，<span class=\"math inline\">\\(L\\)</span>是经验损失函数，<span class=\"math inline\">\\(G\\)</span>是梯度修正项（<span class=\"math inline\">\\(G_i(\\theta_i,g_i,g)=\\frac{1}{\\eta K}&lt;\\theta_1,g_i-g&gt;\\)</span>，其中<span class=\"math inline\">\\(\\eta\\)</span>是学习率，<span class=\"math inline\">\\(K\\)</span>是一轮训练的迭代次数，<span class=\"math inline\">\\(g_i\\)</span>是客户端i上一轮本地参数的更新值，<span class=\"math inline\">\\(g\\)</span>是所有客户端上一轮本地参数的平均更新值。在第t轮，<span class=\"math inline\">\\(g_i=\\theta_i^t-\\theta_i^{t-1},g=E_{i\\in[N]}g_i\\)</span>，其作用是减少局部梯度的方差。 <span class=\"math display\">\\[\n\\theta_i^{t,k+1}=\\theta_i^{t,k}-\\eta\\frac{\\partial F(\\theta_i^{t,k},h_i^t,D_i,w^t)}{\\partial \\theta_i^{t,k}}\n\\]</span> 👆🏻这个是在第t轮的第k个局部训练迭代中，局部模型参数更新方程，这个方程会在一轮中运行K次。</p>\n<blockquote>\n<p><strong>Que:</strong></p>\n<p>在FedDC中，其penalized term R和gradient correction term G的区别是什么，其引用的SCAFFOLD中的梯度修正项就是为了缓解drift，为什么在FedDC中又引入了penalized term 去减少drift?</p>\n<p><strong>Ans:</strong></p>\n<p>当涉及到联邦学习中的漂移问题时，特别是客户端漂移，不同的方法可能会采取不同的策略来缓解漂移并提高模型的稳定性。以下是关于在 FedDC 中的 penalized term R 和引用的 SCAFFOLD 中的 gradient correction term G 的更详细的解释以及它们在处理漂移时的不同机制：</p>\n<p><em>Penalized Term R（在 FedDC 中）：</em></p>\n<p>Penalized term R 是一种正则化项，被添加到客户端模型的损失函数中。它的目的是在更新客户端模型的参数时，通过惩罚大幅度变化的参数，使得客户端模型的参数更加趋于全局模型。这种方式类似于在损失函数中添加权重衰减（weight decay）或 L2 正则化项，从而阻止模型参数过度拟合训练数据。在联邦学习中，由于每个客户端的本地数据分布和规模可能不同，导致模型的漂移，特别是在训练初期。通过添加 penalized term R，可以促使客户端模型的参数更加接近全局模型，从而在一定程度上减轻客户端漂移问题。</p>\n<p><em>Gradient Correction Term G（在 SCAFFOLD 中）：</em></p>\n<p>Gradient correction term G 是引用自 SCAFFOLD 论文的一种方法，它的目标是在客户端训练过程中调整梯度更新，以减少模型的漂移。具体而言，SCAFFOLD 引入了一种梯度校正项，该项对每个客户端的梯度进行调整，使得每个客户端更新更加平稳，从而减少漂移的影响。这种方式可以看作是在梯度下降的过程中，对每个客户端的梯度更新进行微调，以提高模型的稳定性。</p>\n<p>举个例子来说明这两种方法的不同作用方式：</p>\n<p>假设有一个联邦学习任务，涉及多个医院的病人数据，每个医院都有不同的数据分布和疾病情况。客户端漂移问题可能导致某些医院的模型在某些轮次训练后出现不稳定的性能下降。在这种情况下：</p>\n<ul>\n<li><em>Penalized Term R（在 FedDC 中）：</em> 在 FedDC 中，通过在客户端模型的损失函数中添加 penalized term R，可以约束每个客户端的参数变化，使得客户端的模型更接近于全局模型。这样一来，即使某些客户端的数据分布有所不同，它们的模型参数变化也会受到一定的限制，从而减轻漂移问题。</li>\n<li><em>Gradient Correction Term G（在 SCAFFOLD 中）：</em> 在 SCAFFOLD 中，gradient correction term G 会调整每个客户端的梯度更新，使得每个客户端的模型更新更平稳。这种方式不仅仅是通过参数惩罚，还直接在梯度更新阶段对漂移进行修正，从而减少模型的不稳定性。</li>\n</ul>\n<p><strong>Que:</strong></p>\n<p>但是不太一样的是SCAFFOLD论文将G放到了最后的聚合步骤中，但是在FedDC中，其将G放到了损失函数（或者叫目标函数）中，这为什么不同了？</p>\n<p><strong>Ans:</strong></p>\n<p>在不同的联邦学习方法中，关于如何处理模型的漂移问题以及何时引入修正项的具体策略可能会因方法的设计和目标而有所不同。在 SCAFFOLD 和 FedDC 中，虽然都涉及到模型漂移问题的解决，但在具体的实现方式上有所差异。下面我会详细解释这两种方法中为什么会有这样的不同设计。</p>\n<p><em>SCAFFOLD：</em></p>\n<p>在 SCAFFOLD 中，作者引入了梯度修正项 G，该项是在最后的模型聚合阶段应用的。这种方式的优势在于，通过在模型聚合时对梯度进行修正，可以在整个联邦学习过程中减少模型的漂移。由于模型聚合是最后一步，这样的修正可以确保每个客户端的模型都在全局更新中起到一定的平衡作用。</p>\n<p><em>FedDC：</em></p>\n<p>在 FedDC 中，将梯度修正项 G 放入损失函数（或目标函数）中，是为了在客户端的本地训练过程中对梯度进行修正。这种设计可以使每个客户端在本地训练阶段就能够对模型的漂移问题进行处理，而不仅仅是依赖于模型的聚合过程。在每个客户端的损失函数中引入梯度修正项 G，可以在本地训练时即时地修正模型，以适应当前的数据分布和特点。</p>\n<p>综上所述，这两种方法之间的不同设计是因为它们在解决漂移问题时的侧重点和策略不同。SCAFFOLD 更侧重于在模型聚合时对漂移进行修正，而 FedDC 则更侧重于在每个客户端的本地训练过程中就开始处理漂移。</p>\n</blockquote>\n<p>对于<strong>局部漂移参数的更新</strong>，如果假设局部参数不变，那么更新公式应该是<span class=\"math inline\">\\(h_i^+=h_i+(w^+-w)\\)</span>，这里的<span class=\"math inline\">\\(+\\)</span>表示新参数。但是由于全局数据不可用，不可能直接获得全局的最新参数。</p>\n<p>因此作者利用<span class=\"math inline\">\\(\\theta_i\\)</span>来代替<span class=\"math inline\">\\(w\\)</span>，这是因为在每轮开始，都会有<span class=\"math inline\">\\(\\theta_i=w\\)</span>；利用<span class=\"math inline\">\\(\\theta_i^+\\)</span>代替<span class=\"math inline\">\\(w^+\\)</span>，因为<span class=\"math inline\">\\(\\theta_i^+\\)</span>是对<span class=\"math inline\">\\(w^+\\)</span>的估计。 <span class=\"math display\">\\[\nh_i^+=h_i+(w^+-w) \\approx h_i+(\\theta^+_i-\\theta_i)\n\\]</span> 那么局部模型的参数更新就可以将局部漂移参数引入来减少漂移问题，即<span class=\"math inline\">\\(\\theta_i^++h_i^+\\)</span>，所以聚合方程变成了： <span class=\"math display\">\\[\nw^+=\\sum_{i=1}^N\\frac{D_i}{D}(\\theta_i^++h_i^+)\n\\]</span></p>\n<h3 id=\"讨论\">讨论</h3>\n<p>该文章与SCAFFOLD不同的点在于：SCAFFOLD是限制局部优化方向以减小局部模型与全局模型之间的参数差距，即限制<span class=\"math inline\">\\(\\theta_i\\)</span>接近<span class=\"math inline\">\\(w\\)</span>（即<span class=\"math inline\">\\(min||\\theta_i−w||\\)</span>）。<strong>然而，限制局部模型的优化方向阻碍了它在拟合局部数据集分布，因为局部分布和全局分布可能是不一致的。</strong>在FedDC中，文章认为学习参数间隙比限制它更好。FedDC利用局部漂移变量来学习局部模型和全局模型之间的参数差距。然后利用局部漂移变量来弥合差距，在这里我们学习局部漂移<span class=\"math inline\">\\(h_i\\)</span>来实现目标<span class=\"math inline\">\\(min||\\theta_i + h_i − w||\\)</span>。</p>\n<h2 id=\"cvprfine-tuning-global-model-via-data-free-knowledge-distillation-for-non-iid-federated-learning\">（CVPR）Fine-tuning Global Model via Data-Free Knowledge Distillation for Non-IID Federated Learning</h2>\n<blockquote>\n<p>Zhang, Lin, et al. \"Fine-tuning global model via data-free knowledge distillation for non-iid federated learning.\" <em>Proceedings of the IEEE/CVF conference on computer vision and pattern recognition</em>. 2022.</p>\n</blockquote>\n<p>文章提出了一种无需数据的知识蒸馏方法来调整服务器中的全局模型（FedFTG），创新点：</p>\n<ol type=\"1\">\n<li>通过无数据蒸馏对服务器中的全局模型进行微调，充分利用了服务器的计算能力；</li>\n<li>开发了硬样本挖掘来有效地将知识转移到全局模型；提出了定制的标签采样和类级集成，以方便最大限度地利用知识；</li>\n<li>证明了FedFTG与现有的本地优化器是正交的，可以当做插件来使用。</li>\n</ol>\n<p>👀文章解决的问题是：联邦学习中非IID的问题，具体来说是非独立同分布的数据会导致：<strong>局部模型漂移、灾难性遗忘全局知识</strong>。</p>\n<p>现在大多数方法，包括上文的SCAFFOLD都是对局部模型的更新方向进行约束，使得局部和全局优化目标保持一致。<span style=\"background-color: yellow;\">但是SCAFFOLD只通过简单的模型聚合来获取服务器中的全局知识，忽略了局部知识的不兼容性，导致全局的知识遗忘</span>。</p>\n<h3 id=\"方法-2\">方法</h3>\n<h4 id=\"基于硬样本挖掘的无数据知识提取全局模型微调\">基于硬样本挖掘的无数据知识提取全局模型微调</h4>\n<p>在传统的联邦学习基础上，文章使用了一种无数据的知识蒸馏方法来对全局模型进行微调</p>\n<p>服务器维护了一个条件生成器<span class=\"math inline\">\\(G\\)</span>，它生成伪数据来捕获客户端的数据分布，如下所示： <span class=\"math display\">\\[\n\\tilde{x}=G(z,y;\\theta)\n\\]</span> 其中<span class=\"math inline\">\\(\\theta\\)</span>是<span class=\"math inline\">\\(G\\)</span>的参数，<span class=\"math inline\">\\(z\\sim N(0,1)\\)</span>是标准的高斯噪声，<span class=\"math inline\">\\(y\\)</span>是预定义分布<span class=\"math inline\">\\(p_t(y)\\)</span>采样的<span class=\"math inline\">\\(\\tilde{x}\\)</span>的类标号。</p>\n<p><strong>全局模型要解决的目标函数是：</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230720171827615.png\" alt=\"image-20230720171827615\" style=\"zoom:70%;\" /></p>\n<p><span class=\"math inline\">\\(\\mathcal{L}_{md}^k\\)</span>是全局模型<span class=\"math inline\">\\(\\omega\\)</span>和本地模型<span class=\"math inline\">\\(\\omega_k\\)</span>之间的模型差异：<span class=\"math inline\">\\(\\mathcal{L}_{md}^k=D_{KL}(\\sigma(D(\\tilde{x};\\omega))||\\sigma(D(\\tilde{x};\\omega_k)))\\)</span>，<span class=\"math inline\">\\(D\\)</span>是分类器，<span class=\"math inline\">\\(\\sigma\\)</span>是全连接函数，用来输出<span class=\"math inline\">\\(\\tilde{x}\\)</span>的预测分数，<span class=\"math inline\">\\(D_{KL}\\)</span>指的是Kullback-Leibler散度。<strong>通过最小化<span class=\"math inline\">\\(\\mathcal{L}_{md}^k\\)</span>就可以使得<span class=\"math inline\">\\(\\tilde{x}\\)</span>在全局模型上的结果和<span class=\"math inline\">\\(x\\)</span>在局部模型上的结果相似，即可以将局部模型中的知识转移到全局模型中。</strong></p>\n<p><strong>生成伪数据：</strong></p>\n<p>为了更好地从局部模型中提取知识，伪数据<span class=\"math inline\">\\(\\tilde{x}\\)</span>应该契合局部模型的输入空间，文章使用了语义损失<span class=\"math inline\">\\(\\mathcal{L}_{cls}^k\\)</span>来训练生成器<span class=\"math inline\">\\(G\\)</span>。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230720184041806.png\" alt=\"image-20230720184041806\" style=\"zoom:100%;\" /></p>\n<p>其中<span class=\"math inline\">\\(\\mathcal{L}_{cls}^k\\)</span>是局部模型对伪数据<span class=\"math inline\">\\(\\tilde{x}\\)</span>的预测与类别标签<span class=\"math inline\">\\(y\\)</span>之间的交叉熵损失：<span class=\"math inline\">\\(\\mathcal{L}_{cls}^k=L_{CE}(\\sigma(D(\\tilde{x};\\omega_k)),y)\\)</span>，通过最小化该函数，<span class=\"math inline\">\\(\\tilde{x}\\)</span>对<span class=\"math inline\">\\(y\\)</span>产生更高的预测，因此其更适合<span class=\"math inline\">\\(y\\)</span>类的数据分布。<span style=\"background-color: yellow;\">只使用生成器会为每个类产生相同的数据</span>，为了解决这个问题，文章使用了多样性损失<span class=\"math inline\">\\(L_{dis}\\)</span>来提高数据的多样性。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230720185330298.png\" alt=\"image-20230720185330298\" style=\"zoom: 67%;\" /></p>\n<p><strong>硬数据挖掘：</strong></p>\n<p>使用<span class=\"math inline\">\\(L_{cls}\\)</span>训练生成器<span class=\"math inline\">\\(G\\)</span>将生成具有低分类误差的伪数据<span class=\"math inline\">\\(\\tilde{x}\\)</span>，但是这种伪数据有着最容易被区分的特征，这种数据会很易于分类。然而，<strong>朴素的样本并不会导致全局模型和局部模型之间的观测不一致，<span class=\"math inline\">\\(L_{md}=0\\)</span>。</strong>所以为了有效地利用局部模型中的知识并将其转移到全局模型中，我们使用了全局模型和局部模型预测不一致的硬样本，具体来说：</p>\n<ol type=\"1\">\n<li>强制生成器<span class=\"math inline\">\\(G\\)</span>生成最大化<span class=\"math inline\">\\(L_{md}\\)</span>的硬样本</li>\n<li>使用硬样本训练全局模型来最小化<span class=\"math inline\">\\(L_{md}\\)</span>。</li>\n</ol>\n<p>因此全局模型可以逐渐微调来适应数据分布：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230720194001656.png\" alt=\"image-20230720194001656\" style=\"zoom:80%;\" /></p>\n<h4 id=\"适应标签分布变化实现有效知识蒸馏\">适应标签分布变化实现有效知识蒸馏</h4>\n<p>对于数据异构的客户端，有以下两个问题</p>\n<ol type=\"1\">\n<li>客户端的本地数据集是类不均衡的，<span class=\"math inline\">\\(D_k\\)</span>训练的本地模型包含不均衡的数据信息</li>\n<li>对于一个类，知识的重要性在本地模型中是不同的。</li>\n</ol>\n<p>为此，文章分别提出了<strong>自定义标签采样</strong>和<strong>类集成</strong>来适应这两个问题</p>\n<h5 id=\"自定义标签采样\">自定义标签采样</h5>\n<p>在数据异构的情况下，本地数据是类不平衡的，会出现有些类甚至没有证据。已经证明了：<strong>深度神经网络倾向于学习多数类而忽略少数类。</strong>因此，局部模型的少数类的数据信息可能是错误和误导的，生成的伪数据对于度量模型差异是无效的。</p>\n<p>为了缓解这个问题，文章根据每轮整个训练数据的分布自定义采样概率<span class=\"math inline\">\\(p_t(y)\\)</span> <span class=\"math display\">\\[\np_t(y)\\varpropto \\sum_{k\\in S_T}\\sum_{i=1}^{N_k}E_{(x_k^i,y_k^i)\\sim D_k}[1_{y_i=y}]=\\sum_{k\\in S_t}n^{y}_k\n\\]</span> 其中<span class=\"math inline\">\\(1_{condition}\\)</span>是<span class=\"math inline\">\\((condition == true)\\)</span>，<span class=\"math inline\">\\(n_k^y\\)</span>是客户端<span class=\"math inline\">\\(k\\)</span>中<span class=\"math inline\">\\(y\\)</span>类的样本数量。这样，<strong>多数类的伪数据产生的概率较高。</strong></p>\n<h5 id=\"类集成\">类集成</h5>\n<p>知识蒸馏中广泛使用的集成方法为来自不同教师模型的知识分配相同的权重，即<span class=\"math inline\">\\(\\alpha_t^{k,y}=\\frac{1}{|S_t|}\\)</span>。</p>\n<p>但是由于标签分布的变化，对于同一个类，不同的局部模型中知识的重要性是不同的，如果给每个客户端分配相同的权重，重要的知识就不能被正确的理解和利用。</p>\n<p>因此，文章通过客户端<span class=\"math inline\">\\(k\\)</span>中的<span class=\"math inline\">\\(y\\)</span>类的数据相对于<span class=\"math inline\">\\(S_t\\)</span>的总数据的比例来计算<span class=\"math inline\">\\(\\alpha_t^{k,y}\\)</span> <span class=\"math display\">\\[\n\\alpha_t^{k,y}=n_k^y/\\sum_{i\\in S_t}n_i^y\n\\]</span></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230720201142553.png\" alt=\"image-20230720201142553\" style=\"zoom:80%;\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230720201204506.png\" alt=\"image-20230720201204506\" style=\"zoom:80%;\" /></p>\n<h3 id=\"局限性\">局限性</h3>\n<p><span style=\"background-color: orange;\"><strong>该工作的主要局限性在于计算效率。</strong>由于FedFTG在本地训练的基础上增加了对全球模型的训练，因此使得整个训练的时间比其他方法要长。在我们的实验中，FedFTG在每一轮通信中所需的时间大约是FedAVG的两倍。</span></p>\n<h2 id=\"cvprlayer-wised-model-aggregation-for-personalized-federated-learning\">（CVPR）Layer-wised Model Aggregation for Personalized Federated Learning</h2>\n<blockquote>\n<p>Ma, Xiaosong, et al. \"Layer-wised model aggregation for personalized federated learning.\" <em>Proceedings of the IEEE/CVF conference on computer vision and pattern recognition</em>. 2022.</p>\n</blockquote>\n<p>本文提出了一种全新的pFL框架pFedLA，其可以实现<strong>联邦学习个性化的分层聚合</strong>，能够从客户端模型中准确地识别出每一层的效用。</p>\n<p>面向的仍然是客户端的异构，现有的pFL在整个模型参数或不同客户端的损耗值之间应用距离度量，<strong>这不足以利用他们的异构性。可能导致不准确的权重组合或非IID分布式数据的贡献不平衡。</strong></p>\n<p>对于个性化联邦学习，文章发现了利用层间相似度进行聚合比起利用模型相似度进行聚合有更高的模型精度。</p>\n<p>文章还说明了不同的层应用不同的权值，例如全连接层权重较高而卷积层权值较小可以产生显著的性能增益。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230727143532842.png\" alt=\"image-20230727143532842\" style=\"zoom:80%;\" /></p>\n<blockquote>\n<p>如今的pFL有两种不同的实现方法：</p>\n<ol type=\"1\">\n<li>基于数据的方法：侧重于减少客户端数据集的统计异构性</li>\n<li>基于模型的方法：侧重于为不同的客户生成定制的模型参数或结构</li>\n</ol>\n</blockquote>\n<p>一般来说，为每个客户端生成有效的个性化参数引用 <em>超网络</em> 来实现</p>\n<h3 id=\"算法部分\">算法部分</h3>\n<h4 id=\"pfedla\">pFedLA</h4>\n<p>pFedLA评估了来自不同客户端的<span style=\"background-color: yellow;\">每一层的重要性</span>，以实现分层感知的个性化模型聚合。其在服务器上为每一个客户端应用一个专用的超网络，并训练他们为每个客户端的模型层生成聚合权重值。对于每一个客户端也有一个个个性化的模型。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230727144456484.png\" alt=\"image-20230727144456484\" style=\"zoom:80%;\" /></p>\n<p>文章在服务器端应用了一组聚合权重矩阵<span class=\"math inline\">\\(\\alpha_i\\)</span>来逐步利用客户端在层次上的相似性。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230727144642711.png\"  /></p>\n<p>其中<span class=\"math inline\">\\(\\alpha_i^{ln}\\)</span>表示客户端<span class=\"math inline\">\\(i\\)</span>中第<span class=\"math inline\">\\(n\\)</span>层的聚合权重向量，<span class=\"math inline\">\\(\\alpha_i^{ln,N}\\)</span>表示剩余客户端<span class=\"math inline\">\\(N\\)</span>在客户端<span class=\"math inline\">\\(i\\)</span>第<span class=\"math inline\">\\(n\\)</span>层聚合的权重，对于所有的<span class=\"math inline\">\\(n\\)</span>个层，<span class=\"math inline\">\\(\\sum_{i=1}^N\\alpha_{i}^{ln,j}=1\\)</span>。</p>\n<p>与其他的pFL不同，pFedLA不是对客户端模型的所有层应用相同的权重，而是考虑神经层的不同效用，为每个层分配不同的权重。</p>\n<p>每个超网络由几个全连接层组成，输入是一个嵌入向量，该向量随模型参数自动更新，输出是<span class=\"math inline\">\\(\\alpha\\)</span>，定义为 <span class=\"math display\">\\[\n\\alpha_i=HN_i(v_i;\\psi_i)\n\\]</span> 其中<span class=\"math inline\">\\(v_i\\)</span>是嵌入向量，<span class=\"math inline\">\\(\\psi_i\\)</span>是超网络的模型参数。设<span class=\"math inline\">\\(\\{\\theta^{l1},...,\\theta^{ln}\\}\\)</span>是本地训练后所有客户端中间参数，<span class=\"math inline\">\\(\\theta^{ln}=\\{\\theta_1^{ln},...,\\theta_n^{ln}\\}\\)</span>是所有客户端的第<span class=\"math inline\">\\(n\\)</span>层的参数集合。在pFedLA中，模型的参数聚合如下： <span class=\"math display\">\\[\n\\bar{\\theta_i}=\\{\\bar{\\theta_i}^{l1},\\bar{\\theta_i}^{l2},...,\\bar{\\theta_i}^{ln}\\}=\\{\\theta^{l1},...,\\theta^{ln}\\} *\\alpha_i\n\\]</span></p>\n<p><span class=\"math display\">\\[\n\\bar{\\theta_i}^{ln}=\\sum_{j=1}^N\\theta_j^{ln}\\alpha_i^{ln,j}\n\\]</span></p>\n<p>因此，pFedLA的目标函数为：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230727150527494.png\" alt=\"image-20230727150527494\" style=\"zoom: 80%;\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230727151126355.png\" alt=\"image-20230727151126355\"  /></p>\n<p>在每一轮通信中，客户端首先从服务器下载最新的个性化模型，然后使用本地SGD基于私有数据进行训练，之后每个客户端的模型更新<span class=\"math inline\">\\(\\Delta\\)</span>将被上传到服务器用来更新<span class=\"math inline\">\\(v\\)</span>和<span class=\"math inline\">\\(\\psi\\)</span>。</p>\n<h4 id=\"heurpfedla通信效率的改进\">HeurpFedLA：通信效率的改进</h4>\n<p>通信开销主要来自于客户端传输的<span class=\"math inline\">\\(\\Delta\\theta_i\\)</span>和服务器发送的<span class=\"math inline\">\\(\\bar{\\theta}_i\\)</span>。</p>\n<p>HeurpFedLA将启发地选择哪些层在本地保留，哪些层在全局进行聚合。其关键思想是：启发地选择具有高<span class=\"math inline\">\\(k(AT_K)\\)</span>的聚合权重去本地更新。具体来说，对于客户端<span class=\"math inline\">\\(i\\)</span>的所有层，利用聚合权重值：<span class=\"math inline\">\\(\\alpha_i^{l1,i},...,\\alpha_i^{ln,i}\\)</span>进行降序排序，并选择相应的最上面的<span class=\"math inline\">\\(k\\)</span>个层进行保留，并不上传。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230727152854258.png\" alt=\"image-20230727152854258\" style=\"zoom:80%;\" /></p>\n<p>这个做法的原理是：等级越高的层对于模型个性化的贡献越大，这也意味直接在个性化模型中使用这些层对训练性能的影响很小。</p>\n<h2 id=\"cvprrobust-federated-learning-with-noisy-and-heterogeneous-clients\">（CVPR）Robust Federated Learning with Noisy and Heterogeneous Clients</h2>\n<blockquote>\n<p>Fang, Xiuwen, and Mang Ye. \"Robust federated learning with noisy and heterogeneous clients.\" <em>Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition</em>. 2022.</p>\n<p><a href=\"https://github.com/FangXiuwen/Robust_FL\">RHFL github源代码</a></p>\n</blockquote>\n<p>文章提出了一种鲁棒的异构联邦学习（RHFL），其可以同时处理噪声和执行联邦学习，创新点：</p>\n<ol type=\"1\">\n<li>利用公共数据直接对齐模型反馈，不需要格外的共享全局模型进行协作</li>\n<li>采用鲁棒的抗噪损失函数减少负面影响</li>\n<li>设计了一种新的客户信心加权方案，在联邦学习阶段自适应为每个客户分配权重。</li>\n</ol>\n<p>解决的问题是：<strong>模型异构性，以及不同客户端拥有不同的噪声</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230727194824314.png\" alt=\"image-20230727194824314\" /></p>\n<h3 id=\"算法部分-1\">算法部分</h3>\n<p><strong>问题阐述</strong></p>\n<ul>\n<li>在异构联邦学习设置下，文章考虑了<span class=\"math inline\">\\(K\\)</span>个客户端和一个服务器，<span class=\"math inline\">\\(C\\)</span>为客户端的集合，<span class=\"math inline\">\\(|C|=K\\)</span>，客户端<span class=\"math inline\">\\(k\\)</span>拥有私有数据集<span class=\"math inline\">\\(D_k=\\{(x_i^k,y_i^k)\\}_{i=1}^{N_k}\\)</span>，<span class=\"math inline\">\\(y\\)</span>用独热向量表示。</li>\n<li>客户端拥有不同的神经架构<span class=\"math inline\">\\(\\theta_k\\)</span>，<span class=\"math inline\">\\(f(\\cdot)\\)</span>表示神经网络，<span class=\"math inline\">\\(f(x^k,\\theta_k)\\)</span>表示输入参数<span class=\"math inline\">\\(x^k\\)</span>的输出。因为服务端不能访问客户端，所以服务端拥有一个共享数据集<span class=\"math inline\">\\(D_0\\)</span>。</li>\n<li>在异构联邦学习中，学习过程分为协作学习阶段和局部学习阶段，协作学习有<span class=\"math inline\">\\(T_c\\)</span>个epoch，局部学习有<span class=\"math inline\">\\(T_l\\)</span>个epoch。</li>\n<li>文章假设每个客户端都有一个私有的噪声数据集<span class=\"math inline\">\\(\\tilde{D}_k=\\{(x_i^k,\\tilde{y}_i^k)\\}_{i=1}^{N_k}\\)</span>，<span class=\"math inline\">\\(\\tilde{y}_i^k\\)</span>表示噪声的标签，由于噪声模型也是异构的，<span class=\"math inline\">\\(f(x,\\theta_{k_1})\\neq f(x,\\theta_{k_2})\\)</span>。因此，客户端除了自己本地数据集的噪声以外，还要关注其他客户端的噪声。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230727203136245.png\" alt=\"image-20230727203136245\"  /></p>\n<h4 id=\"异构联邦学习\">异构联邦学习</h4>\n<p>在联邦学习阶段，文章使用公共数据集<span class=\"math inline\">\\(D_0\\)</span>作为客户端之间沟通的桥梁，在协作学习时期，客户端<span class=\"math inline\">\\(c_k\\)</span>利用本地模型<span class=\"math inline\">\\(\\theta_k^{t_c}\\)</span>在公共数据集上的输出来获得该客户端的知识分布<span class=\"math inline\">\\(R_k^{t_c}=f(D_0,\\theta_k^{t_c})\\)</span>。客户端使用KL散度来衡量来自其他客户端的知识分布差异。 <span class=\"math display\">\\[\nKL(R_{k_1}^{t_c}||R_{k_2}^{t_c})=\\sum R_{k_1}^{t_c}log(\\frac{R_{k_1}^{t_c}}{R_{k_2}^{t_c}})\n\\]</span> 两个客户端的知识分布差异越大，则两方可以相互学习的越多，因此最小化概率分布<span class=\"math inline\">\\(KL\\)</span>可以被认为是其中<span class=\"math inline\">\\(c_{k_1}\\)</span>向<span class=\"math inline\">\\(c_{k_2}\\)</span>学习的过程。 <span class=\"math display\">\\[\n\\mathcal{L}_{kl}^{k,t_c}=\\sum_{k_0=1,k_0\\neq k}^KKL(R_{k_0}^{t_c}||R_{k}^{t_c})\n\\]</span> 客户端通过调整知识分布来向他人学习</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230727200732405.png\" alt=\"image-20230727200732405\" /></p>\n<h4 id=\"本地噪声学习\">本地噪声学习</h4>\n<p>为了减少局部噪声的影响，文章参考了对称交叉熵学习中提到的方法。将<span class=\"math inline\">\\(p\\)</span>和<span class=\"math inline\">\\(q\\)</span>分别表示标签类分布和预测类分布，那么交叉熵损失应该为： <span class=\"math display\">\\[\n\\mathcal{L}_{ce}=-\\sum_{i=1}^Np(x_i)log(q(x_i))\n\\]</span> 但是由于标签噪声的存在，单纯使用交叉熵损失不能使所有的类都被充分学习或正确分类所有类别，为了完全收敛难学的类，模型会执行更多轮的学习，这就使学习的类更倾向于过拟合嘈杂的标签，使模型整体性能下降。</p>\n<p>一般来说，模型在一定程度上可以正确分类，并且由于噪声的存在，模型的预测结果甚至比标签更加可靠，<strong>所以<span class=\"math inline\">\\(p\\)</span>可能不是真实的类分布，反而<span class=\"math inline\">\\(q\\)</span>才是！</strong></p>\n<p>因此文章提出了基于<span class=\"math inline\">\\(q\\)</span>的损失函数反向交叉熵 <span class=\"math display\">\\[\n\\mathcal{L}_{rce}=-\\sum_{i=1}^Nq(x_i)log(p(x_i))\n\\]</span> 通过结合CE损失以及RCE损失，模型可以完全学习难以学习的类，同时防止过拟合（CE损失增强了模型对各类别的拟合效果，RCE损失对标签噪声有鲁棒性） <span class=\"math display\">\\[\n\\mathcal{L}_{sl}=\\lambda\\mathcal{L}_{ce}+\\mathcal{L}_{rce}\n\\]</span> 在本地学习阶段，客户端将使用自己的本地数据集进行更新，以防止遗忘本地知识，在训练迭代过程中，标签噪声会导致模型往错误的方向更新，最终无法收敛。为了避免这个问题，文章采用SL损失来计算模型的损失，局部更新函数为</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230727202030871.png\" alt=\"image-20230727202030871\" /></p>\n<h4 id=\"客户端信心重新加权ccr\">客户端信心重新加权（CCR）</h4>\n<p>文章提出了客户端的信心重新加权（CCR）的方法，以减少来自其他客户端的标签噪音在协作学习阶段的不利影响。CCR可以在通信过程中<strong>个性化每个客户端的权重，以减少噪声客户端的贡献，并更多地关注具有干净数据集和高效模型的客户端。</strong></p>\n<p>根据上文我们知道SL损失其实是代表了数据集的干净程度，SL越小表明这个数据集噪声越小，因此文章定义了数据集的质量：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230727202325397.png\" alt=\"image-20230727202325397\" /></p>\n<p>为了量化客户端的学习效率，我么你在每一轮迭代中计算SL的下降率，SL下降率越大说明其学习效率越高： <span class=\"math display\">\\[\n\\mathcal{P}(\\theta_k^{t_c})=\\Delta\\mathcal{L}_{sl}^{k,t_c}=L_{sl}^{k,t_c-1}-L_{sl}^{k,t_c}\n\\]</span> 那么在协作学习阶段中，同时考虑标签质量和学习效率，文章将循环<span class=\"math inline\">\\(t_c\\)</span>中的第<span class=\"math inline\">\\(k\\)</span>个客户端的信心定义为 <span class=\"math display\">\\[\n\\mathcal{F}_k^{t_c}=\\mathcal{Q}_{t_c}(\\tilde{D}_k)\\cdot\\mathcal{P}(\\theta_k^{t_c})\n\\]</span> 最后的聚合权重为： <span class=\"math display\">\\[\nw_k^{t_c}=\\frac{1}{K-1}+\\eta\\frac{\\mathcal{F}_k^{t_c}}{\\sum_{i=1}^K\\mathcal{F}_k^{t_c}}\n\\]</span></p>\n<p><span class=\"math display\">\\[\n\\mathcal{W}_k^{t_c}=\\frac{exp(w_k^{t_c})}{\\sum_{k=1}^Kexp(w_k^{t_c})}\n\\]</span></p>\n<p>所以最后的协作学习阶段的聚合函数如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230727203439409.png\" alt=\"image-20230727203439409\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230727203603670.png\" alt=\"image-20230727203603670\" style=\"zoom:80%;\" /></p>\n<h2 id=\"cvprlocal-learning-matters-rethinking-data-heterogeneity-in-federated-learning\">（CVPR）Local Learning Matters: Rethinking Data Heterogeneity in Federated Learning</h2>\n<blockquote>\n<p>Mendieta, Matias, et al. \"Local learning matters: Rethinking data heterogeneity in federated learning.\" <em>Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition</em>. 2022.</p>\n<p><a href=\"https://github.com/mmendiet/FedAlign\">FedAlign github源代码</a></p>\n</blockquote>\n<p>文章首先分析了正则化的方法在减轻数据异构性影响的表现是非常出色地。</p>\n<p>文章其次提出了一种基于正则化并最大限度减少计算和内存开销的联邦学习方法 FedAlign</p>\n<p>解决的问题是：<strong>模型异构性，减轻异构联邦学习导致的高额计算和内存开销</strong></p>\n<p>文章认为正则化技术是一个防止模型过拟合的技术，类似的，在FL中，本地设备在训练中过拟合对整体网络性能是有害的，因此可以提高本地模型的普遍性来使得客户端的目标更接近全局目标。</p>\n<h3 id=\"分析\">分析</h3>\n<p>文章比对了多种最先进的FL算法（经典baseline和最新技术：FedAvg, FedProx, Moon; 三种最先进的正则化方法：Mixup, Stochastic Depth, GradAug)，发现了正则化的方法在异构的情况下更具有优势，文章进一步在基于二阶信息上进行了分析</p>\n<p>最近的工作指出：Top Hessian eigenvalue(<span class=\"math inline\">\\(\\lambda_{max}\\)</span>)和Hessian trace(<span class=\"math inline\">\\(H_T\\)</span>)适合作为性能预测和网络通用性指标，具有较低的<span class=\"math inline\">\\(\\lambda_{max}\\)</span>和<span class=\"math inline\">\\(H_T\\)</span>，说明该网络对于权重中的小扰动不太敏感，具有在训练期间，平滑损失空间、达到更平坦的最小值以及易于收敛的效果，这在FL中是非常有用的。</p>\n<p>因此文章对于上述六种算法的<span class=\"math inline\">\\(\\lambda_{max}\\)</span>和<span class=\"math inline\">\\(H_T\\)</span>进行了分析，有趣的是，<strong><u>文章发现了：正则化方法在降低这两个值是最有效的</u></strong></p>\n<p>最后，文章指出了：eigenvalue/trace的分析可以做为最优联邦学习的指导指标，他们提供了对landscape平整度和一致性的融合和聚集的促进。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230903155257834.png\" alt=\"image-20230903155257834\" /></p>\n<p>文章给出了一个结论：<strong><u>在模型试图减缓客户端飘逸和保持本地更新接近全局模型的过程中，似乎也阻止了他们充分学习少数异构甚至同构数据的能力。</u></strong></p>\n<h3 id=\"方法-3\">方法</h3>\n<p>总体来说，文章发现了GradAug在FL设置中特别有效，在所有测试场景中精度最高，其中<span class=\"math inline\">\\(\\lambda_{max}\\)</span>和<span class=\"math inline\">\\(H_T\\)</span>都是最低的，但是该方法大大增加了训练时间和本地计算量。因此本文设计了一个方法，提供了与GradAug相似的效果和性能，但大大减少了计算开销。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230903160019092.png\" alt=\"image-20230903160019092\" /></p>\n<p>算法利用Hessian Eigenvalues作为模型在不同客户端上的相似性度量。</p>\n<p>文章的目标函数为： <span class=\"math display\">\\[\n\\mathcal{L}_{FA}=\\mathcal{L}_{CE}(\\mathcal{F}_\\theta(x),y)+\\mu\\mathcal{L}_{Lip}(K_S,K_F)\n\\]</span> 其中<span class=\"math inline\">\\(\\mathcal{L}_{Lip}\\)</span>是全宽子块<span class=\"math inline\">\\(L\\)</span>和减小宽度的子块的Liptschitz常数矢量（例如<span class=\"math inline\">\\(\\lambda_{max}\\)</span>）的均方误差。</p>\n<p>Liptschitz常数矢量经由传输矩阵的谱范数来计算近似，传输矩阵如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230903163048162.png\" alt=\"image-20230903163048162\" /></p>\n<p>最后<span class=\"math inline\">\\(X_F\\)</span>和<span class=\"math inline\">\\(X_S\\)</span>的谱范数为<span class=\"math inline\">\\(K_F\\)</span>和<span class=\"math inline\">\\(K_S\\)</span>。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230903162842464.png\" alt=\"image-20230903162842464\" /></p>\n<h2 id=\"distilling-the-knowledge-in-a-neural-network\">（🧐）Distilling the Knowledge in a Neural Network</h2>\n<blockquote>\n<p>Hinton, Geoffrey, Oriol Vinyals, and Jeff Dean. \"Distilling the knowledge in a neural network.\" <em>arXiv preprint arXiv:1503.02531</em> (2015).</p>\n</blockquote>\n<p>在模型训练的时候，模型的重点在准确性上，所以对应于训练 ----&gt; 笨重的大模型</p>\n<p>在模型部署的时候，模型的重点在效率上，所以对应于部署 ----&gt; 轻便的小模型</p>\n<p>该文章提出了一个brand new的想法：<strong>大模型得出的logit，不仅仅是最后确定的类别是有意义的，其余类别的可能性也是有意义的。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230903105804398.png\" alt=\"image-20230903105804398\" style=\"zoom:120%;\" /></p>\n<p>举个很简单的例子：教师模型不仅仅可以给出这张图片有多么像马，稍微像一点驴，但是特别不像胡萝卜。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230903105854456.png\" alt=\"image-20230903105854456\" /></p>\n<p>这是多分类交叉熵损失函数 ↑，训练的目的就是最小化该损失函数。</p>\n<h3 id=\"方法-4\">方法</h3>\n<p>一般来说，知识蒸馏可以用教师网络的soft target 作为学生网络的label。每个图片先输入到教师网络，然后利用教师网络的结果作为学生网络的输入。</p>\n<p>此时会出现一些问题，即教师网络的输出不同类的可能性可能差距相当大，所以引入了蒸馏温度<span class=\"math inline\">\\(T\\)</span>来增大教师模型输出的熵。</p>\n<p>基本构想：教师网络在<span class=\"math inline\">\\(T\\)</span>上获得的soft targets和学生网络在相同<span class=\"math inline\">\\(T\\)</span>下获得target进行拟合，越接近越好；或者将教师网络的输出当做学生网络的训练集。</p>\n<p><u><strong>知识蒸馏的好处：由于已经有教师网络，所以可以使用大规模的无标注数据集！</strong></u></p>\n<p>总loss是hard和soft的和，老师与书本都需要<img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230903105727415.png\" alt=\"image-20230903105727415\" style=\"zoom:90%;\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230903110008448.png\" alt=\"image-20230903110008448\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230903110247052.png\" alt=\"image-20230903110247052\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230903110426831.png\" alt=\"image-20230903110426831\" /></p>\n<p>蒸馏温度<span class=\"math inline\">\\(T\\)</span>的作用：<img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230903110312500.png\" alt=\"image-20230903110312500\" style=\"zoom:67%;\" /></p>\n<h2 id=\"scaffold-stochastic-controlled-averaging-for-federated-learning\">（🧐）SCAFFOLD: Stochastic Controlled Averaging for Federated Learning</h2>\n<blockquote>\n<p>Karimireddy, Sai Praneeth, et al. \"Scaffold: Stochastic controlled averaging for federated learning.\" <em>International conference on machine learning</em>. PMLR, 2020.</p>\n</blockquote>\n<p>文章提出了一种新的随机控制平均算法（SCAFFOLD）。创新点：</p>\n<ol type=\"1\">\n<li>提出了一种新的随机控制平均算法(SCAFFOLD)来通过获得漂移量纠正客户端漂移。作者证明了SCAFFOLD至少和SGD一样快，并且可以收敛于任意异构的数据；</li>\n<li>作者展示了SCAFFOLD还可以利用客户端之间的相似性来进一步减少所需的通信，这首次证明了采用本地步骤比大批量SGD的优势；</li>\n<li>作者证明了SCAFFOLD相对不受客户端抽样的影响，从而使得它特别适合于联邦学习。</li>\n</ol>\n<p>除此之外😁，文章还证明了：1. SCAFFOLD相对不受客户端抽样的影响，从而使得它特别适合于联邦学习；2. 作者给出了匹配的下界，以证明即使在没有客户端采样和全批处理梯度的情况下，由于客户端漂移，FEDAVG也可以比SGD慢。</p>\n<p>👀解决的问题还是<strong>联邦学习中不同客户端的数据漂移</strong>。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307171055108.png\" alt=\"image-20230717105541970\" style=\"zoom:100%;\" /></p>\n<h3 id=\"证明部分\">证明部分</h3>\n<h4 id=\"fedavg的聚合\">FedAvg的聚合</h4>\n<p>这个部分分为两个步骤：1. 本地更新模型；2. 聚合客户端的模型来更新服务器模型。</p>\n<p>在每轮中，对客户端进行抽样，并对抽样中的每个客户端复制当前的服务器模型<span class=\"math inline\">\\(y_i=x\\)</span>，并在<span class=\"math inline\">\\(K\\)</span>次本地更新中执行：<span class=\"math inline\">\\(y_i=y_i-\\eta_lg_i(y_i)\\)</span>，在运行结束后，进行全局聚合：<span class=\"math inline\">\\(x=x+\\frac{\\eta_g}{|S|}\\sum_{i\\in S}(y_i-x)\\)</span>。</p>\n<p>这里面<span class=\"math inline\">\\(\\eta_l\\)</span>是局部步长，<span class=\"math inline\">\\(\\eta_g\\)</span>是全局步长。</p>\n<p>文章将问题形式化为：最小化随机函数的总和 <span class=\"math display\">\\[\nmin_{x\\in R^d}\\{f(x)=\\frac{1}{N}\\sum_{i=1}^{N}(f_i(x)=E_{\\zeta_i}[f_i(x;\\zeta_i)]\\}\n\\]</span> 这里<span class=\"math inline\">\\(f_i()\\)</span>表示客户端的损失函数。文章假设<span class=\"math inline\">\\(f\\)</span>的下界是<span class=\"math inline\">\\(f^*\\)</span>，<span class=\"math inline\">\\(f_i\\)</span>是<span class=\"math inline\">\\(\\beta\\)</span>-光滑的，进一步文章假设<span class=\"math inline\">\\(g_i(x)=\\nabla f_i(x;\\zeta_i)\\)</span>是<span class=\"math inline\">\\(f_i\\)</span>的无偏差随机梯度，方差以<span class=\"math inline\">\\(\\sigma^2\\)</span>为界。</p>\n<p>对于满足上述条件的FedAvg，其输出在以下三种情况下均小于<span class=\"math inline\">\\(\\epsilon\\)</span>，<span class=\"math inline\">\\(R\\)</span>具有以下界限：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307171130478.png\" alt=\"image-20230717113005336\" style=\"zoom:100%;\" /></p>\n<p>速率改善的原因主要是<strong>使用了两种不同的步长，通过更大的全局步长和较小的局部步长，可以减少客户端漂移。</strong></p>\n<h4 id=\"异构性影响\">异构性影响</h4>\n<p>本文也对客户端漂移对全局模型影响进行了说明。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307171507557.png\" alt=\"image-20230717150754419\" style=\"zoom:100%;\" /></p>\n<p>如图所示：</p>\n<ol type=\"1\">\n<li>一开始服务器下发给客户端的模型是<span class=\"math inline\">\\(x\\)</span></li>\n<li>不同的客户端进行自己的训练，获得了<span class=\"math inline\">\\(y_1\\)</span>和<span class=\"math inline\">\\(y_2\\)</span>，并利用FedAvg获得了灰色的全局模型</li>\n<li>经过不断的训练，客户端1和客户端2的模型不断分散更新，FedAvg获得的模型为灰黑色圆圈</li>\n<li>但是全局最优模型<span class=\"math inline\">\\(x^*\\)</span>是图中的方块，我们发现普通的平均聚合会导致全局模型与最优模型相差越来越多。</li>\n</ol>\n<h3 id=\"算法部分-2\">算法部分</h3>\n<p>在算法开始的时候，我们定义两个变量：<span class=\"math inline\">\\(c\\)</span>：服务器控制变量；<span class=\"math inline\">\\(c_i\\)</span>：客户端控制变量。</p>\n<p><span class=\"math inline\">\\(c\\)</span>是全局模型往最优模型的梯度下降方向，<span class=\"math inline\">\\(c_i\\)</span>是客户端的梯度更新方向</p>\n<p>这两个变量的初始化可以均设置为<span class=\"math inline\">\\(0\\)</span>，但是注意要保证<span class=\"math inline\">\\(c=\\frac{1}{N}\\sum c_i\\)</span>，在每一轮的通信中，服务器参数<span class=\"math inline\">\\((x,c)\\)</span>被传输到了参与客户端<span class=\"math inline\">\\(S\\subset [N]\\)</span>。</p>\n<p>在最初始，每个客户端模型会复制服务器模型：<span class=\"math inline\">\\(y_i=x\\)</span>，然后他在其本地数据上进行训练，执行K轮更新： <span class=\"math display\">\\[\ny_i=y_i-\\eta_l(g_i(y_i)+c-c_i)\n\\]</span> <img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202308081920809.png\" alt=\"image-20230808192000434\" style=\"zoom:50%;\" /></p>\n<blockquote>\n<p>文章希望通过<span class=\"math inline\">\\(c\\)</span>和<span class=\"math inline\">\\(c_i\\)</span>让每个客户端的梯度更新方向向全局最优解的方向进行偏移。</p>\n</blockquote>\n<p>然后，本地服务器控制变量将会得到更新 <span class=\"math display\">\\[\nc_i^+=\\left\\{  \n             \\begin{array}{**lr**}  \n             Option 1.\\quad g_i(x), or &amp;  \\\\  \n             Option 2.\\quad c_i-c+\\frac{1}{K\\eta_l}(x-y_i).\n             \\end{array}  \n\\right.\n\\]</span></p>\n<p>第一种选择是计算服务器模型x处的梯度；第二个选择是重新使用先前计算的梯度来控制变量。第二种更👍🏻！</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202308081915777.png\" alt=\"image-20230808191515335\" style=\"zoom:50%;\" /></p>\n<blockquote>\n<p>在这张图中我们看到，文章利用客户端在K次训练的梯度下降方向的平均值作为下次梯度下降方向的预测方向。</p>\n<p>而全局模型向全局最优解的梯度下降方向近似于客户端梯度下降方向的平均值。</p>\n</blockquote>\n<p>服务器层的更新方程： <span class=\"math display\">\\[\nx=x+\\frac{\\eta_g}{|S|}\\sum_{i\\in S}(y_i-x)\n\\]</span></p>\n<p><span class=\"math display\">\\[\nc=c+\\frac{1}{N}\\sum_{i\\in S}(c_i^+-c_i)\n\\]</span></p>\n<p>如果<span class=\"math inline\">\\(c_i\\)</span>总是被设置为0，那么则是传统的FedAvg。</p>\n<p>如果不考虑通信成本，那么客户机上的理想更新应该为 <span class=\"math display\">\\[\ny_i=y_i+\\frac{1}{N}\\sum_jg_j(y_i)\n\\]</span> 文章模型利用控制变量获得了 <span class=\"math display\">\\[\nc_j\\approx g_j(y_i)\\quad and\\quad c\\approx \\frac{1}{N}\\sum_j g_j(y_i)\n\\]</span> 因此： <span class=\"math display\">\\[\n(g_i(y_i)-c_i+c)\\approx \\frac{1}{N}\\sum_j g_j(y_i)\n\\]</span> <img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307171537350.png\" alt=\"image-20230717153717189\" style=\"zoom:100%;\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307181026935.png\" alt=\"image-20230718102637720\" style=\"zoom:50%;\" /></p>\n<h2 id=\"addressing-heterogeneity-in-federated-learning-via-distributional-transformation\">Addressing Heterogeneity in Federated Learning via Distributional Transformation</h2>\n<blockquote>\n<p>Yuan, Haolin, et al. \"Addressing heterogeneity in federated learning via distributional transformation.\" <em>European Conference on Computer Vision</em>. Cham: Springer Nature Switzerland, 2022.</p>\n<p><a href=\"https://github.com/hyhmia/DisTrans\">DisTrans github源代码</a></p>\n</blockquote>\n<p>文章提出了联邦学习分布式转换框架，称为DisTrans。创新点：</p>\n<ol type=\"1\">\n<li>其不仅仅通过漂移量更改模型，与此同时还通过漂移量更改数据；</li>\n<li>设计了双通道的神经网络结构；</li>\n<li>提出了<span class=\"math inline\">\\(DH\\)</span>异构量化，并利用神经网络进行聚合。</li>\n</ol>\n<p>👀解决的问题是<strong>联邦学习中的客户端漂移</strong></p>\n<h3 id=\"动机\">动机</h3>\n<p>利用漂移量转换每个客户端的训练和测试数据，来提高异构数据下的联邦学习，为了证明其可行性，文章利用了两个例子。</p>\n<p><strong>对于非凸训练模型</strong></p>\n<p>假设<span class=\"math inline\">\\(f(x)=cos(wx)\\)</span>，对于每个客户端，通过本地数据<span class=\"math inline\">\\(x\\)</span>获得<span class=\"math inline\">\\(y\\)</span>：<span class=\"math inline\">\\(y=cos(w_{client_k}^{true}x)+\\epsilon_{clinet_k}\\)</span>，其中<span class=\"math inline\">\\(x\\)</span>是从高斯分布中绘制的IID数据，<span class=\"math inline\">\\(\\epsilon_{clinet_k}\\)</span>是均值为0的高斯噪声，漂移量为<span class=\"math inline\">\\(px+q\\)</span>，<span class=\"math inline\">\\(p\\)</span>是连个客户端处的固定值，<span class=\"math inline\">\\(q\\)</span>是通过暴力搜索来选择的。图(a)显示了有漂移的模型更加一致。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307181948523.png\" alt=\"image-20230718194856349\" style=\"zoom:100%;\" /></p>\n<p><strong>聚合服务器的线性回归问题</strong></p>\n<p>作者训练了两个局部线性模型，<span class=\"math inline\">\\(f(x)=wx\\)</span>，在服务器上进行聚合，重复联邦学习步骤直到收敛。本地训练数据是异构的，生成<span class=\"math inline\">\\(y=w^{true}_{clinet_k}x+\\epsilon_{clinet_k}\\)</span>。当存在漂移时，聚合模型收敛。</p>\n<h3 id=\"方法-5\">方法</h3>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307181953470.png\" alt=\"image-20230718195331301\" style=\"zoom:100%;\" /></p>\n<p>在每一轮中，每个客户端学习一个本地模型和一个漂移量，并将其发送给服务器。服务器聚合客户端的本地模型和漂移量，并将其送回客户端。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307181956792.png\" alt=\"image-20230718195614617\" style=\"zoom:70%;\" /></p>\n<p>对于本地、全局模型，DisTrans使用了<strong>双输入通道神经体系结构</strong>，如上图所示</p>\n<p>文章的神经网络架构有一个共享的backbone，一个密集层链接两个通道的输出，一个logit层合并输出。这两个通道使用相同的漂移量<span class=\"math inline\">\\(t\\)</span>，以两种方式移动本地数据分布： <span class=\"math display\">\\[\nx_t=((1-\\alpha)x+\\alpha t,\\quad(1+\\alpha)x-\\alpha t)\n\\]</span> 在优化中，每个客户端的目标是实现以下两个目标：</p>\n<ol type=\"1\">\n<li>优化漂移量，使局部数据更符合局部模型</li>\n<li>优化局部模型以适应便宜的局部数据分布</li>\n</ol>\n<p><span style=\"background-color: yellow;\">这和别的文章不一样，本文章是数据和模型同时漂移。</span></p>\n<p>将这两个目标合一获得以下目标方程： <span class=\"math display\">\\[\nmin_{\\theta_i^r,t_i^r}L_i^r=\\frac{1}{N}\\sum_{z_t\\in D_{ti}}l(\\theta_i^r,z_t)\n\\]</span> 其中<span class=\"math inline\">\\(\\theta_i^r\\)</span>为客户端<span class=\"math inline\">\\(i\\)</span>的模型，<span class=\"math inline\">\\(t_i^r\\)</span>是客户端<span class=\"math inline\">\\(i\\)</span>的漂移量，<span class=\"math inline\">\\(L\\)</span>是客户端的损失函数（交叉熵损失），<span class=\"math inline\">\\(z_t=(x_t,y)\\)</span>是训练样本用漂移量进行漂移，<span class=\"math inline\">\\(D_{ti}\\)</span>是对于客户端<span class=\"math inline\">\\(i\\)</span>漂移后的局部训练数据集。</p>\n<p>获得<span class=\"math inline\">\\(\\theta\\)</span>是为了解决Goal 2，获得<span class=\"math inline\">\\(t\\)</span>是为了解决Goal 1。</p>\n<p><strong>聚合</strong></p>\n<p>文章采用了基于度量的偏移量聚合方式，其提出了一种对异构性的度量方式： <span class=\"math display\">\\[\nDH=1-\\frac{\\sum_{j\\in [1,N]}c_j}{N\\times C}\n\\]</span> <span class=\"math inline\">\\(N\\)</span>是所有的类别，<span class=\"math inline\">\\(C\\)</span>是客户端数量，<span class=\"math inline\">\\(c_j\\)</span>的定义如下： <span class=\"math display\">\\[\nc_j=\\left\\{  \n             \\begin{array}{**lr**}  \n             0,\\quad if\\space only\\space one \\space client\\space has\\space data\\space from\\space class\\space j\\\\  \n             k,\\quad if\\space k&gt;1\\space clients\\space have\\space data\\space from\\space class\\space j\n             \\end{array}  \n\\right.\n\\]</span> <span class=\"math inline\">\\(DH\\)</span>是一个<span class=\"math inline\">\\([0\\%,100\\%]\\)</span>的量，DisTrans在聚合的时候，如果分布异构性非常大，一个客户端的漂移量可能无法为另一个客户机的漂移量提供信息，因为他们俩数据分布有本质区别，因此文章只会在异构性小于<span class=\"math inline\">\\(50\\%\\)</span>时聚合客户的偏移量。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202307182026462.png\" alt=\"image-20230718202636252\" style=\"zoom:67%;\" /></p>\n<p>假设联邦学习系统的异构性小于阈值。聚合客户端漂移量的一种简单方法是将其平均值作为全局偏移量计算，然后将其发送回所有客户端。然而，这种朴素的聚合方法对所有的客户端使用相同的全局漂移量，从而达到了<strong>次优精度</strong>。</p>\n<p>因此，文章提出了基于神经网络的聚合方法。</p>\n<p>其将客户端特定的嵌入向量<span class=\"math inline\">\\(e\\in R^{1\\times N}\\)</span>和客户端偏移量作为输入，并为客户端输出一个聚合的偏移量：其中嵌入向量的条目<span class=\"math inline\">\\(e_i\\)</span>就是客户端对类别<span class=\"math inline\">\\(i\\)</span>的训练数据的训练分数。服务器在训练过程中将聚合作为一个回归问题来学习。在每一轮中，服务器收取一组<span class=\"math inline\">\\((t_i,t&#39;_i)\\)</span>，其中<span class=\"math inline\">\\(t_i\\)</span>是当前轮钟来自客户端<span class=\"math inline\">\\(i\\)</span>的漂移量，<span class=\"math inline\">\\(t&#39;_i\\)</span>是上一轮的漂移量，服务器利用SGD来最小化两者的距离。</p>\n<h2 id=\"similaraccelerating-federated-learning-with-cluster-construction-and-hierarchical-aggregation\">（Similar）Accelerating Federated Learning With Cluster Construction and Hierarchical Aggregation</h2>\n<blockquote>\n<p>Wang, Zhiyuan, et al. \"Accelerating federated learning with cluster construction and hierarchical aggregation.\" <em>IEEE Transactions on Mobile Computing</em> (2022).</p>\n</blockquote>\n<p>文章提出了FedCH，其构建了一种特殊的集群拓扑结构进行分层聚合训练。创新点为：</p>\n<ol type=\"1\">\n<li>提出了一种新的FL机制来解决边缘计算中的资源约束和客户端异构</li>\n<li>提出了一种算法来确定资源约束下的最佳集群数量，并构建分层拓扑结构</li>\n</ol>\n<p>👀文章解决的问题是：联邦学习可能导致的网络拥塞、客户端资源有限且异构、客户端上计算资源有限</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230722121524066.png\" alt=\"image-20230722121524066\" style=\"zoom: 80%;\" /></p>\n<h3 id=\"算法部分-3\">算法部分</h3>\n<p>和BGFL很相似，FedCH的训练过程分为三个步骤：本地模型更新，集群内聚合，全局聚合。</p>\n<p>和BGFL不同的地方是：由于FedCH是异步联邦学习，其在分组的时候认为，群组内的设备是同步联邦学习；群组间是异步联邦学习。</p>\n<p>因此其全局聚合的部分采用了异步操作。具体流程如图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230721155049273.png\" alt=\"image-20230721155049273\" style=\"zoom: 67%;\" /></p>\n<p>现在有五个客户端，每个条的长度表示相应操作的时间消耗。</p>\n<ol type=\"1\">\n<li>首先基于他们的异构训练速度将五个客户端分配到三个集群中，即：a. 组一：1；b. 组二：2，3；c. 组三：4，5</li>\n<li>每个组独立执行训练过程，不同的组有不同的全局聚合频率。（三个集群分别经历了：4，2，1次全局聚合）</li>\n</ol>\n<p>对于Cluster 2，假设客户端3被选择为集群leader，在训练期间，客户端2将更新的本地模型发送到3用于群组聚合，客户端3将聚合后的模型发送给服务器进行全局聚合。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230721155648891.png\" alt=\"image-20230721155648891\" style=\"zoom: 67%;\" /></p>\n<p><strong>异步全局聚合</strong></p>\n<p>在异步联邦学习中，由于不同群组的训练完成时间不同，所以就会出现比较新的更新和比较老的更新。文章对此加入了陈旧性处理。对于每一次更新，参数更新函数为 <span class=\"math display\">\\[\n\\omega^t=(1-\\alpha_\\tau^t)\\omega^{t-1}+\\alpha_\\tau^t\\omega(k)\n\\]</span></p>\n<p><span class=\"math display\">\\[\n\\alpha_\\tau^t=\\left\\{  \n             \\begin{array}{**lr**}  \n             \\alpha,\\quad \\tau \\leq a\\\\  \n             \\alpha\\cdot\\tau^{-b},\\quad \\tau &gt; a\n             \\end{array}  \n\\right.\n\\]</span></p>\n<p>该函数意味着当超过<span class=\"math inline\">\\(a\\)</span>时，模型的权重会随着老化程度的增加迅速下降；同时，每个群组的模型权重应该随着群组数量的增加而下降，所以我们对<span class=\"math inline\">\\(\\alpha\\)</span>的初始化为<span class=\"math inline\">\\(\\frac{K-1}{N}\\)</span>。</p>\n<h4 id=\"分组方法\">分组方法</h4>\n<p>如果是用简单的K-means方式进行分组，会有以下几种问题：</p>\n<ol type=\"1\">\n<li>k-means独立、平等地对待对象的所有属性，然而，对于两个属性（比如计算和通信）对不同模型的效率有不同的影响。</li>\n<li>除了初始化过程中的K个聚类的质心，每个聚类的质心可能是迭代期间给定具有属性值的虚拟对象，而不是真正的客户端。</li>\n<li>K-means算法使得每个集群的客户端数量在<span class=\"math inline\">\\([1, N-K+1]\\)</span>，在某些情况下，集群可能会出现只包含一个客户端的情况</li>\n</ol>\n<p><strong>本文的分组方式：</strong></p>\n<p>分组目标：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230722113703820.png\" alt=\"image-20230722113703820\" style=\"zoom: 57%;\" /></p>\n<ul>\n<li><span class=\"math inline\">\\(C_{i,cmp}=H\\frac{|D_i|f}{f_i}\\)</span>，训练时间</li>\n<li><span class=\"math inline\">\\(C_{i,com}=\\frac{M}{B_{i,k}}\\)</span>，通信时间</li>\n<li><span class=\"math inline\">\\(LN_k\\)</span>为这个集群的leader，F对客户端<span class=\"math inline\">\\(i\\)</span>与leader的不相似度量设定为：<span class=\"math inline\">\\(d(i,LN_k)\\)</span></li>\n</ul>\n<p>在聚类算法中，我么你讲每个客户端与相应的leader相匹配。由于在这个匹配问题中只有两种类型的实体，因此采用了<span style=\"background-color: yellow;\">二分图</span>来解决。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230722121854703.png\" alt=\"image-20230722121854703\" style=\"zoom:100%;\" /></p>\n<p>文章将集群分成了两个大组，第一组是<span class=\"math inline\">\\(1\\leq k \\leq N\\%K\\)</span>，第二组是<span class=\"math inline\">\\(N\\%K \\leq k \\leq K\\)</span>。</p>\n<p>第一大组中每一个群组有<span class=\"math inline\">\\(\\lfloor N/K\\rfloor + 1\\)</span>个节点，第二大组每一个群组有<span class=\"math inline\">\\(\\lfloor N/K\\rfloor\\)</span>，总共有<span class=\"math inline\">\\(N\\)</span>个节点。</p>\n<p>同样的，文章也将客户端分成了<span class=\"math inline\">\\(N\\)</span>个节点，<span style=\"background-color: yellow;\">所以为了找到最优的聚类结构，等价于找到这两个图的最大匹配</span>。文章构建了一个<span class=\"math inline\">\\(N\\times N\\)</span>的矩阵<span class=\"math inline\">\\(A\\)</span>，其中每个元素表示对应客户端和集群leader之间的距离。文章搜索<span class=\"math inline\">\\(A\\)</span>中不同行和列的<span class=\"math inline\">\\(N\\)</span>个值，使其和最小。在文章中用的是<strong>匈牙利算法</strong>进行二分图匹配。具体算法如下所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230723142735003.png\" alt=\"image-20230723142735003\" style=\"zoom:80%;\" /></p>\n<ul>\n<li>初始化(1-2)：我们从<span class=\"math inline\">\\(N\\)</span>个节点中选择<span class=\"math inline\">\\(K\\)</span>个任意客户端作为每个集群的质心，并创建矩阵<span class=\"math inline\">\\(A\\)</span>。</li>\n<li>聚类构造(4-10)：计算<span class=\"math inline\">\\(d(i,LN_K)\\)</span>，并将其赋值到<span class=\"math inline\">\\(A\\)</span>，之后通过匈牙利算法聚类</li>\n<li>集群拓扑调整(11-16)：在将每个客户端分配到集群中后，更新每个集群的质心，选择集群内所有节点到其距离最近的点作为质心。</li>\n</ul>\n<p>上面的算法将会不断迭代，直到集群结果不再改变或者目标函数不在减少。</p>\n<h4 id=\"重新聚类\">重新聚类</h4>\n<p>文章提出了动态聚类的方式，其设置了一个<span class=\"math inline\">\\(t_b\\)</span>作为重新聚类触发器的阈值，如果<span class=\"math inline\">\\(T_b &gt; t_b\\)</span>，则开始重新聚合，<span style=\"background-color: orange;\">如今<span class=\"math inline\">\\(t_b\\)</span>的最佳数值还需要进行讨论。</span></p>\n<p>如果<span class=\"math inline\">\\(K\\)</span>很小，则说说明每个群组中的客户端数量很多，导致离散情况越容易发现，所以阈值应该设置较小</p>\n<p>如果<span class=\"math inline\">\\(K=1\\)</span>或者<span class=\"math inline\">\\(K=N\\)</span>，则阈值设置为无穷大，因为不会再进行分组。</p>\n<p><strong>如果是单独使用阈值聚类，无法适应网络状态的突然恶化。</strong>对此，文章提出了一种自适应重新聚类。</p>\n<p>服务器将采用<span class=\"math inline\">\\(s_k\\)</span>来记录每一个集群<span class=\"math inline\">\\(k\\)</span>的掉队情况，如果出现了掉队者则设置<span class=\"math inline\">\\(s_k=1\\)</span>（比如，集群<span class=\"math inline\">\\(k\\)</span>两次全局聚合的时间大大增加），反之为<span class=\"math inline\">\\(0\\)</span>。当<span class=\"math inline\">\\(\\sum s_k\\)</span>到达一定数量的时候，重新聚类算法将会被激活。激活后所有的<span class=\"math inline\">\\(s_k\\)</span>会被重置回<span class=\"math inline\">\\(0\\)</span>。</p>\n<h3 id=\"证明部分-1\">证明部分</h3>\n<p>该文章<strong>证明了<span class=\"math inline\">\\(K\\)</span>的最佳取值</strong>，如果需要分组，可以详细看一看。</p>\n<h2 id=\"similarfedhisyn-a-hierarchical-synchronous-federated-learning-framework-for-resource-and-data-heterogeneity\">（Similar）FedHiSyn: A Hierarchical Synchronous Federated Learning Framework for Resource and Data Heterogeneity</h2>\n<blockquote>\n<p>Li, Guanghao, et al. \"FedHiSyn: A hierarchical synchronous federated learning framework for resource and data heterogeneity.\" <em>Proceedings of the 51st International Conference on Parallel Processing</em>. 2022.</p>\n</blockquote>\n<p>也是分层聚合联邦学习，创新点是：<strong>聚类中采用了环形的拓扑结构进行聚合。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230723171004865.png\" alt=\"image-20230723171004865\" style=\"zoom:100%;\" /></p>\n<p>文章将计算能力相近的设备分成同一个群组<span class=\"math inline\">\\(\\{class_1,class_2,...,class_k\\}\\)</span>，其中<span class=\"math inline\">\\(class_1\\)</span>是计算最快的组别，<span class=\"math inline\">\\(class_k\\)</span>是计算最慢的组别。</p>\n<p>在每一个组中，也按照计算能力强弱进行由快到慢的排序，最慢的设备连接到最快的设备完成环形拓扑结构。当本地设备完成训练后，会将模型按照环形拓扑的方向传递给下一个模型。</p>\n<p>具体来说，在每个训练轮开始的时候，服务器向每个设备发送初始化参数，每经过<span class=\"math inline\">\\(R\\)</span>次，服务器会聚合其接收到的更新模型来完成一轮的训练。</p>\n<ol type=\"1\">\n<li>设备从服务器接受模型，进行本地训练以更新模型</li>\n<li>设备根据环形拓扑将更新后的模型发送个下一个设备</li>\n<li>设备接收到上一个设备发送的模型后，在本地训练接收到的模型来完成模型更新。如果没有接收到，则继续训练本地上次训练的模型。</li>\n<li>重复2-3，直到时间<span class=\"math inline\">\\(T\\)</span>，所有设备将本地模型上传到服务器完成一轮训练。</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230723171904557.png\" alt=\"image-20230723171904557\" style=\"zoom:100%;\" /></p>\n<p>由于每一个模型都是在各个设备中循环训练，所以聚合的时候不能采用数据量的方式进行聚合。因为训练时间更快的群组<span class=\"math inline\">\\(class_1\\)</span>可以经过更多轮的通信，为了避免不让聚合参数偏向这些本地训练时间较短的设备，文章采用了将设备完成本地训练的平均时间作为聚合权重。 <span class=\"math display\">\\[\nW_G^{r+1}=\\sum^{||S||}_{i=1}\\frac{l_i}{L}W_i^{r+1}\n\\]</span></p>\n<h2 id=\"similarblockchain-based-two-stage-federated-learning-with-non-iid-data-in-iomt-system\">（Similar）Blockchain-Based Two-Stage Federated Learning With Non-IID Data in IoMT System</h2>\n<blockquote>\n<p>Lian, Zhuotao, et al. \"Blockchain-based two-stage federated learning with non-IID data in IoMT system.\" <em>IEEE Transactions on Computational Social Systems</em> (2022).</p>\n</blockquote>\n<p>提出了基于区块链的两阶段联邦学习方法，创新点：</p>\n<ol type=\"1\">\n<li>基于区块链的数据共享策略</li>\n<li>客户端选择方案来减少通信开销</li>\n</ol>\n<p>解决的问题：在共享子数据集的时候，可能会有一些客户端共享虚假的子集；客户端不希望共享的数据被第三方服务提供商访问；还会出现梯度翻转攻击等恶意行为，所以要保护客户端和服务器的隐私。</p>\n<h3 id=\"算法层面\">算法层面</h3>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230728162029756.png\" alt=\"image-20230728162029756\" /></p>\n<ul>\n<li>文章首先构造一致的小型全局共享数据集来减少非IID</li>\n<li>文章在收集全局数据集的同时，通过区块链加强隐私保护</li>\n<li>文章还利用了客户端选择算法在联邦学习中选择高质量的客户端</li>\n</ul>\n<p><strong>文章的工作流程如下：</strong></p>\n<ol type=\"1\">\n<li>一阶段：通过区块链系统构建全局共享数据集。\n<ol type=\"1\">\n<li>标识参与联邦学习的客户机，并初始化区块链。</li>\n<li>客户端将小规模<span class=\"math inline\">\\(\\alpha\\)</span>的本地数据<span class=\"math inline\">\\(D_\\alpha\\)</span>上传到区块链系统。</li>\n<li>区块链系统合成全局共享数据集。</li>\n<li>客户端将共享数据集集成到本地数据中。</li>\n</ol></li>\n<li>二阶段：通过客户选择提高非IID数据训练性能。\n<ol type=\"1\">\n<li>服务器选择部分客户端参与全局训练。</li>\n<li>每个选定的客户端都使用全局共享数据集和本地数据集来训练本地联邦学习模型。</li>\n<li>本地培训完成后，客户端将培训结果上传到服务器。</li>\n<li>服务器根据来自参与客户机的本地更新执行全局聚合，以生成新的全局模型。</li>\n<li>服务器将新模型分发到客户机设备，以更新它们的本地模型。</li>\n</ol></li>\n</ol>\n<h4 id=\"小规模数据共享\">小规模数据共享</h4>\n<p>为了避免有些客户端会上传恶意的数据集子集，服务器应该能在不访问数据集的情况下指导这个数据集的来源。必须要保证参与数据共享的用户是可以控制和可追踪的。</p>\n<p>因此文章采用区块链系统实施数据集共享，首先只有选定的客户端才能参与数据共享，参加到区块链网络，由于数量少，所以共识速度也会很快。通过区块链共享数据可以限制其他用户对原始数据的访问，从而保证隐私。</p>\n<p>系统在选择参与全局数据共享的客户端之后，为其建立一条公共区块链。当用户作为数据共享者参与时，可以通过PoW机制计算哈希值，向区块来拿发送共享事务请求。然后客户端将在区块链系统中生成一个区块，并上传本地数据的<span class=\"math inline\">\\(\\alpha\\)</span>部分；当用户作为数据请求者参与，客户端向区块链发送下载数据请求，验证通过后客户端才可以下载。区块链数据共享如图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230728163422155.png\" alt=\"image-20230728163422155\" /></p>\n<p>在客户端下载共享信息之后，将共享数据和本地数据组合:<span class=\"math inline\">\\(D_i=D_i+D_g\\)</span>，那么全局优化目标则是： <span class=\"math display\">\\[\nargmin_{\\omega_t}\\sum_{i=1}^mp_jl(D_i+D_g,\\omega^i)\n\\]</span></p>\n<h4 id=\"客户端选择\">客户端选择</h4>\n<p>在使用非iid数据的联邦学习中<strong>，共享数据集的质量直观地反映了训练性能</strong>。如果共享数据集不是均匀分布的，而是有偏置的，可能会降低局部训练模型的鲁棒性，影响全局模型训练结果。数据共享阶段已经消耗了客户机的计算能力来保证隐私。因此，必须保证共享数据集的均匀分布和高质量。</p>\n<p>为了获取最有效的数据，文章需要获取本地数据集的相关性。</p>\n<ol type=\"1\">\n<li>文章在客户端生成最具有分布式特征的子数据集</li>\n<li>记录每个客户端子数据集的相似度得分，利用JS散度，越接近1，越说明相似度越低</li>\n<li>首先选择相似度得分较低的客户端来进行训练</li>\n</ol>\n<p><strong>寻找最具分布式特征的子数据集：选择相似度较低的数据放入共享数据集子集中</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20230728163941025.png\" alt=\"image-20230728163941025\" /></p>\n","categories":["XF-TANK"],"tags":["Top-Papers"]},{"title":"Mechanism of curiosity","url":"/2022/11/27/Mechanism-of-curiosity/","content":"<p>对于好奇心机制的一个小随笔😄😄</p>\n<span id=\"more\"></span>\n<h2 id=\"好奇心学习概述概念和方法\">好奇心学习概述：概念和方法</h2>\n<h3 id=\"好奇心理论认知与神经科学\">好奇心理论：认知与神经科学</h3>\n<p><strong>什么是好奇心</strong></p>\n<ul>\n<li>好奇心是我们<u>获取新的信息</u>的一个愿望</li>\n<li>好奇心是去探索<u>新颖的、不确定的、复杂的、模糊的</u>事件的一个愿望</li>\n</ul>\n<p><strong>好奇心的分类：</strong></p>\n<blockquote>\n<p>Grossnickle, Emily M. \"Disentangling curiosity: Dimensionality, definitions, and distinctions from interest in educational contexts.\" <em>Educational Psychology Review</em> 28.1 (2016): 23-60.</p>\n</blockquote>\n<ol type=\"1\">\n<li>Physical curiosity：针对自身及周围事物进行探索</li>\n<li>Perceptual curiosity：基于新颖的（视觉、听觉）激励信号探索新信息</li>\n<li>Social curiosity：利用语言询问和探索原因求助于其他人获取新信息</li>\n<li>Intellectual/epistemic curiosity：激发获取新感知和学习新知识的愿望(主动提出问题，并解决问题的方式)</li>\n</ol>\n<p><strong>好奇心中的四个变量</strong></p>\n<blockquote>\n<p>Wu, Qiong, and Chunyan Miao. \"Curiosity: From psychology to computation.\" <em>ACM Computing Surveys (CSUR)</em> 46.2 (2013): 1-26.</p>\n</blockquote>\n<ol type=\"1\">\n<li>Novelty：对于个体而言比较新的内容。也表现为变化、惊奇</li>\n<li>Uncertainty：个体面对一个激励信号时难以选择一个合适的相应</li>\n<li>Conflict：一个激励信号出现两个或多个不一致的相应</li>\n<li>Complexity：一个激励信号内模式的多样性（比较抽象，探索较少）</li>\n</ol>\n<p><strong>好奇心的特性：</strong></p>\n<ol type=\"1\">\n<li>高度好奇心会使人对<u>一些细微的事物</u>和<u>不熟悉事务</u>的记忆更佳</li>\n<li>好奇心与年龄呈负相关关系，年龄越大，其选择性越强，但是探索和好奇减弱；更<u>有限的未来时间</u>使得<u>好奇心重要性</u>的降低</li>\n<li>好奇心受环境因素影响，高度好奇心<u>有助于学习的持续性</u></li>\n</ol>\n<p>好奇心的潜在问题：</p>\n<ul>\n<li>不良习惯和嗜好的探索</li>\n<li>过度好奇会使人奇怪</li>\n<li>Exploration vs. Exploitation</li>\n<li>高失误可能性</li>\n<li>特定场景中的不当好奇</li>\n</ul>\n<h3 id=\"强化学习中的好奇心建模\">强化学习中的好奇心建模</h3>\n<h4 id=\"强化学习的奖励函数\"><strong>强化学习的奖励函数：</strong></h4>\n<ul>\n<li><p>奖励函数通过是否完成最终任务目标给予智能体反馈</p></li>\n<li><p>主要奖励函数往往在最后才能进行反馈</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211281019565.png\" /></p>\n<p>如图，像围棋一样，只有最后才能知道胜还是负，这就会出现<u>奖励信号稀疏问题</u>，导致强化学习无法收敛</p></li>\n</ul>\n<p>所以我们就不仅仅需要外在奖励，更需要一个内在奖励（根据所处环境，自发得到）</p>\n<blockquote>\n<p>eg.</p>\n<p>我想得到奖学金，每年最后的获奖是外在奖励；但是中间过程我要主动知道去学习，去从学习中获得乐趣和成就感，这就是内在奖励</p>\n</blockquote>\n<h4 id=\"内在驱动奖励函数\">内在驱动奖励函数</h4>\n<p><strong>基于计数的内在驱动奖励函数</strong></p>\n<blockquote>\n<p>Bellemare, Marc, et al. \"Unifying count-based exploration and intrinsic motivation.\" <em>Advances in neural information processing systems</em> 29 (2016).</p>\n<p>Ostrovski, Georg, et al. \"Count-based exploration with neural density models.\" <em>International conference on machine learning</em>. PMLR, 2017.</p>\n</blockquote>\n<ul>\n<li>鼓励智能体去探索未经历的状态，抑制其反复学习已经历的状态</li>\n<li>对经历过的状态进行计数，作为奖励的数值</li>\n</ul>\n<p><strong>基于自监督预测的好奇心驱动搜索</strong></p>\n<blockquote>\n<p>Pathak, Deepak, et al. \"Curiosity-driven exploration by self-supervised prediction.\" <em>International conference on machine learning</em>. PMLR, 2017.</p>\n</blockquote>\n<ul>\n<li><p>好奇心的作用：<u>探索环境以获得新知识；促进智能体学习对未来有帮助的新技能</u></p></li>\n<li><p>好奇心应当使得智能体只预测<u>环境中可能由于智能体的行为或影响智能体而发生的变化</u></p></li>\n<li><p>构造一个<u>特征空间</u>，只建模对智能体动作相关的信息</p></li>\n<li><p>使用正向、逆向两个网络来表示特征空间</p>\n<ul>\n<li>逆向：给定智能体当前和下一个状态的情况下预测智能体行为(<span class=\"math inline\">\\(State_0 + State_1 \\to Action\\)</span>)</li>\n<li>正向：给定当前状态和行动的表示下预测下状态的特征表示(<span class=\"math inline\">\\(State_0 + Action \\to State_1\\)</span>)</li>\n</ul></li>\n<li><p>好奇心：当前状态特征和下一个状态特征的差异值</p>\n<ul>\n<li><p>随机网络蒸馏：差异值可以用一个<u>随机初始化的固定网络</u></p></li>\n<li><blockquote>\n<p>Burda, Yuri, et al. \"Exploration by random network distillation.\" <em>arXiv preprint arXiv:1810.12894</em> (2018).</p>\n</blockquote></li>\n</ul></li>\n</ul>\n<p><strong>面向目标任务的好奇心度量：</strong></p>\n<p>问题：如果有一个随机的新颖状态，模型将会永久停留在那里）</p>\n<blockquote>\n<p>Savinov, Nikolay, et al. \"Episodic curiosity through reachability.\" <em>arXiv preprint arXiv:1810.02274</em> (2018).</p>\n</blockquote>\n<p><em>所以我们需要多步探索，才能观测到的状态进行奖励（橙色部分）</em></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211281107856.png\" alt=\"image-20221128110756803\" style=\"zoom:50%;\" /></p>\n<ul>\n<li>节点是观测状态</li>\n<li>边是转移状态</li>\n<li>绿色：很简单就能达到的状态</li>\n<li>橙色：比较复杂（大于两步）达到的状态</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211281108794.png\" alt=\"image-20221128110829769\" style=\"zoom:67%;\" /></p>\n<p>通过比较网络来判断这个状态是否值得学：使用对比学习</p>\n<ul>\n<li>正例：两步以内能达到的状态</li>\n<li>负例：多步才能达到的状态</li>\n</ul>\n<p>对当前的观测与memory内部的观测进行可达性分析，如果在橙色的部分，那么就给一个很高的reward</p>\n<p><strong>影响驱动的内在奖励建模：</strong></p>\n<blockquote>\n<p>Raileanu, Roberta, and Tim Rocktäschel. \"Ride: Rewarding impact-driven exploration for procedurally-generated environments.\" <em>arXiv preprint arXiv:2002.12292</em> (2020).</p>\n</blockquote>\n<p>我们不能随意去关注内在的奖励，而是要看看他最后的影响是什么。</p>\n<p>如果state差异过大了（比如游戏中不同的关卡），这个时候没有办法预测，所以我们要根据<u>最终的影响</u>来对奖励函数建模</p>\n<p><strong>基于技能的好奇心建模方法：</strong></p>\n<blockquote>\n<p>Bougie, Nicolas, and Ryutaro Ichise. \"Skill-based curiosity for intrinsically motivated reinforcement learning.\" <em>Machine Learning</em> 109.3 (2020): 493-512.</p>\n</blockquote>\n<p>动机：解决高维状态空间的模型训练问题</p>\n<p>方法：将实现目标的能力定义为技能，把最终任务（胜负）分解为多个简单的子任务（目标）</p>\n<p>奖励函数鼓励智能体学习那些难以学习的技能，行动——状态空间同时新颖性较高的区域。</p>\n<p><strong>基于惊奇的内在奖励建模方法：</strong></p>\n<blockquote>\n<p>Berseth, Glen, et al. \"Smirl: Surprise minimizing reinforcement learning in unstable environments.\" <em>arXiv preprint arXiv:1912.05510</em> (2019).</p>\n</blockquote>\n<p>在不断变化的场景下，减少过大的扰动，保持稳定平衡相比于探索来说更具有挑战性</p>\n<h4 id=\"总结\">总结</h4>\n<ol type=\"1\">\n<li>好奇心在认知学、神经科学等领域广泛研究的一项人类特质，已经被广泛认可为有助于持续学习和探索的一项基本能力</li>\n<li>在人工智能领域，好奇心主要用来对新事物或观测进行探索的一种建模手段和激励机制</li>\n<li>强化学习由于监督信息系数的问题，借鉴了好奇心原理，作为内在奖励函数建模与设计的一种重要手段</li>\n<li><strong>在其他领域如分类、检测中，好奇心的应用尚未得到广泛应用</strong></li>\n<li><strong>如何有效利用好奇心的优势同时规避其可能带来的负面问题，是未来的重要课题</strong></li>\n</ol>\n<h4 id=\"思考\">思考</h4>\n<p>好奇心包括了不确定性（uncertainty），学习是为了去消灭不确定性</p>\n<p>不确定性：不确定性与物体出现的次数有关，激励信号应该不断强化。</p>\n<blockquote>\n<p>eg.碰到一个陌生人，并不会好奇；但是如果天天碰到这个陌生人，就会好奇他是谁</p>\n</blockquote>\n<p>所以想法：<strong>可以利用好奇心机制去解决一些离散点。如果第一次碰到误差大的就应该给一个好奇心，如果反复出现这样的样本就应该去学习，以为可能是一个特例。</strong></p>\n","categories":["XF-TANK"],"tags":["Interests"]},{"title":"Oral English Notes","url":"/2022/11/19/Oral-English-Notes/","content":"<p>Practice makes Perfect！ヾ(◍°∇°◍)ﾉﾞ</p>\n<p>练习从模仿开始！o(╥﹏╥)o</p>\n<span id=\"more\"></span>\n<h2 id=\"talk-show\">Talk Show</h2>\n<h3 id=\"吉米欧阳中英双字-亚洲父母的习俗\">【吉米欧阳】中英双字 亚洲父母的习俗</h3>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1tW4y1Y7ye?vd_source=66fc2d7975b7b9803b18b0923756b00d\">【吉米欧阳】中英双字 亚洲父母的习俗</a></p>\n</blockquote>\n<ul>\n<li><p>pep talk 鼓舞士气的话；self esteem 自尊；rip off 欺诈；rebel 反抗；blow up 红火；freak out 兴奋到发疯</p></li>\n<li><p>Needless to say 无需多言；be supposed to do 应该做；<strong>he was like 他就说，心想</strong>；my dad's not even the worst, my mom much worse 我爸爸还不是最离谱的，我妈妈更离谱；my plan completely backfire 我的计划完全熄火了；</p></li>\n</ul>\n<p><strong>中文释义：</strong></p>\n<p>我爸也是个演员，但他在我之后才开始。因为他觉得你能做我也能做就这么简单。我说，行，如果你觉得我的日子很好过，为什么你不参加公开试镜，你就会明白这有多难，我的工作每天要面对多少拒绝。他说，行，然后他去参加试镜，并且预约了所有试镜。这是真的，他参加了一个节目，在中国大陆，叫，小爸爸。五亿人看那个节目，就像中国的生活大爆炸，然后Richard就红了，他就说，这确实简单，我不知道……我的计划完全熄火了。然后我在上海的阿姨看了这个节目，她打电话给我们在洛杉矶的家，她说，恭喜啊Richard，你真是个好演员，你的儿子有教你如何演戏么？他说，不不我是天生的。哦这太好了，父子在同一行业，你们两个真的很好玩。他说，不不，吉米不好玩。我说，爸你这是胡扯好么？你拿到了个好角色，挺牛的，我为你感觉高兴，但你还不算一个演员，真正的演员要会哭会笑，你知道如何在镜头面前哭出来么？他说，会啊，我只用想到你乒乓球打的多差。</p>\n<p>无需多言，我在自卑中长大，因为我是被亚洲父母养大的，我爸还不是最离谱的，我妈更胜一筹。你们有和亚洲大妈出去玩过么？亚洲大妈会准确告诉你你长得有什么毛病，就好像他们是想帮你个忙。有时候和我妈出去就是丢我的脸，因为亚洲人就是有不同的习俗你们知道么，比如我妈去购物的时候，她不会买她需要的玩意，她只会买她觉得便宜的玩意。一次我原价买了件衬衫回家，她问，原价么？别啊，买亏了，我说，妈，这只需要二十美元。她说，是啊，卖你二十美元，如果你蠢的话。她去Ross能疯掉，因为买什么都赚了。她会说，吉米买这个，这个很便宜。我说，妈这是XXL的衬衫，上面还印着“服从”，打死我都不穿。她就说，没关系嘛，打五折，以后你就能穿上了。如果你想买便宜的东西，就要跟着亚洲老人走。如果你去Costco，能看到老亚洲人海，因为你知道所有人都赚了，没有人被坑了。</p>\n<p>我的成长很符合刻板印象，我不玩篮球足球，我打乒乓球长大的，还和别人竞争，这在我们那是个很严肃的国家运动。我可没去过什么快乐夏令营，太空俱乐部，我爸送我去的是广州的乒乓球训练营。我差点挂了，哪里有一百多个小孩，竞争一个国家队的名额。简直就是用乒乓球拍的堡垒之夜。我们是很认真的，我爸会带我去每一次比赛，每一次锦标赛，然后会在每次比赛前给我一点动员的话，但你知道亚洲家长很诚实，所以每次动员将会都会变成辱骂。</p>\n<hr />\n<h3 id=\"自制双语美式单口吉米欧阳12分钟超长版奇怪的美国玩意儿\">[自制双语]美式单口，吉米欧阳12分钟超长版：奇怪的美国玩意儿</h3>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV16a411P7Tk?vd_source=66fc2d7975b7b9803b18b0923756b00d\">[自制双语]美式单口，吉米欧阳12分钟超长版：奇怪的美国玩意儿</a></p>\n</blockquote>\n<ul>\n<li><p>Words:</p>\n<p>deport 驱逐；skeptical 怀疑；ironically 讽刺的是；sobering 使清醒；minor 很小的；definitely 肯定；</p></li>\n<li><p>Sentences:</p>\n<p>a knee-jerk reaction 条件反射；that ship has sailed 太迟了；if you want me to 如果你想的话；and the thing is 而事实是；that's it 就这样；be a totally different story 完全不是一回事；if that's not xxx I don't know what is 如果这都不是，我就不知道什么是了；at the point 在那时候；nothing has changed 什么都没变</p></li>\n</ul>\n<p><strong>中文释义：</strong></p>\n<p>大概十年前，我参加了一次大学旅游，因为美国的乖乖大学生就是会这么做。而事情是从美国走进墨西哥，海关什么都不检查，你穿过一个大旋转门就好了，他们懒得检查身份证，入境墨西哥比走进Costco都容易，你走进去就是了，就这样。但是回来就完全不是一回事了。想从墨西哥回到美国，就不再有什么旋转门了，只有密不透风的水泥隧道，配上装备M16自动步枪的警卫。作为一个移民，我超紧张，我身边的大学同学Ian就安慰我说，告诉他你是美国人他们就让你直接走进去了。我说，你说这话倒挺容易啊。Ian走过去，直接让他通过，轻轻松松。我走过去，他们干的第一件事就是问我，先生你是不是美国公民。我说是，但我忘了一个很小的细节，我不是。绿卡上依旧写着我是移民，还不完全是个美国公民。之后，我被关进一个十乘十的盒子里，然后他们开始审问我。他说，先生，为什么要谎称你的公民身份，我马上回答，我太抱歉了，我喝醉了，我不是故意撒谎的。我走在前面的那个朋友，要我告诉你我是美国人，所以我就这么做了，只是条件反射。然后警官说，你要知道这是很严重的罪行，我们可以因此把你驱逐出境。我心想，把我驱逐出境，我甚至不知道还有这个选项，我回香港之后应该干什么，重新开始乒乓生涯么？这太迟了。所以我就说，求求了，千万别驱逐我，我只是一个喝醉了的傻大学生。然后我非常幸运，他是这么说的，小子听着，你很幸运，我们今天不会驱逐你，但是你永远不要再做这种事，不然我们把你送回你来的地方。然而这个人是亚洲人，我心想，我从哪来，兄弟我们从一个地方来的，两年前我应该在我舅的婚礼上见过你，那家伙肯定见过长城不止一次。</p>\n<p>但这个经历让我清醒了，虽然这时候我已经来到这个国家十年了，但是我依旧不是美国人，什么都没变。</p>\n<hr />\n<h3 id=\"cc字幕吉米欧阳上海菜吃播\">【CC字幕】吉米·欧阳上海菜吃播</h3>\n<blockquote>\n<p>中文字幕：<a href=\"https://www.bilibili.com/video/BV1j5411V7A8?vd_source=66fc2d7975b7b9803b18b0923756b00d\">【CC字幕】吉米·欧阳上海菜吃播</a></p>\n<p>英文字幕：<a href=\"https://youtu.be/ZQzJoL-LTbM\">HOMEMADE SHANGHAINESE FOOD MUKBANG | Jimmy's Taste Test</a></p>\n</blockquote>\n<ul>\n<li>quarantine 隔离；sane 理智的；sesame oil 香油；one and only 唯一的；soy sauce 酱油；dough 面团；bland 食物没有味道；homey 亲切感；saliva 口水；</li>\n<li>shout out to sb. 对某人感谢或表扬；literally means 意思是（用于解释单词）； <strong>it's not filling but fulfilling 不是为了填饱肚子，而是令人高兴</strong>；soaking in 沾满；it's all about 关键在于；nine out of ten 十分中的九分</li>\n</ul>\n<p><strong>中文释义：</strong></p>\n<p>今天来一期特别的吉米食评，我人在温哥华，隔离14天。新到温哥华就得先自我隔离14天，我现在是第7天了。温哥华的美食一向很出名——中餐、越南菜都是世界最棒的。等这个14天隔离过了，我会去拍个电影，叫《Love Heart》，由独一无二的妮娜·杜波夫主演，是个好玩的浪漫爱情喜剧。我要演浪漫爱情喜剧了，非常期待。让我在隔离期间保持冷静和活力的是亚洲美食和中国美食，所以今天的吉米食评有点意思了，因为这家并不是真正的餐厅，其实是我叔叔的food catering place。他们做菜都超好吃，我叔叔和婶婶住在温哥华，每个华裔都有亲戚住在温哥华。他们做上海菜太厉害了，他们还把自己做的汤圆，就是小面团状甜点卖给最高级的中餐厅，今天我有幸品尝他们的手艺，我表弟过来了，就放在门口，我俩没接触，他给我送了点菜。这是我最爱吃的菜之一了，抱歉了爸爸，这比咱家饭好吃。</p>\n<p>这是小虾米，配上我觉得是，笋、葱和油，把这个和热的已经沾满油和酱油的面混在一起吃。是这么吃的：盛一些面到碗里，一次盛一点，这还热着呢，刚送来。你可以闻到优质中国酱油的味道，还有一点醋，还有芝麻油，能闻到芝麻油的味道。这是最简单但最美味的食物，关键在于酱料和面条的比例，不应该太咸也不应该没味道。我叔叔和婶婶总是整的恰到好处，致敬。来吧，试试。这道非常简单，能尝到芝麻油和虾的味道，淡淡的。基本上是酱油味，如此简单却如此美味，<u>他不为填饱肚子，而是令人高兴</u>。葱油面给我一种亲切感，他不会太强烈，不会太咸，没有味精，也不酸，这就是一顿完美的午餐。他们还给我带了自制辣椒酱，我学到的一个小窍门就是，不要用沾了口水筷子直接去挖酱，酱还要放一段时间，你可不想让他坏掉，用筷子尾端、没碰过嘴的部分去挖，干净卫生，辣酱免受污染。</p>\n<hr />\n<h3 id=\"b站熟肉首发单口喜剧欧阳万成---2020全新单口好生意整场熟肉\">B站熟肉首发【单口喜剧】欧阳万成 - 2020全新单口《好生意》整场熟肉</h3>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1mv411i7wX?vd_source=66fc2d7975b7b9803b18b0923756b00d\">B站熟肉首发【单口喜剧】欧阳万成 - 2020全新单口《好生意》整场熟肉</a></p>\n<p>02:40- 05:22</p>\n</blockquote>\n<ul>\n<li></li>\n<li>what's wrong with you 你到底怎么了？；</li>\n</ul>\n<p><strong>中文释义：</strong></p>\n<p>我在街上看见很多人，他们都想走过来和我说话，但他们也不太确定。然后就和朋友瞎讨论一通，他们会说：嘿，兄弟，你确定那个是他么？如果我们要过去的话，我们得确定是他。不然我们过去了又认错人了，那我们就太种族歧视了。你肯定那不是郑肯么？我也不知道，看起来有点想黄阿丽，我不知道。他们走过来，说的第一句话总是，嘿，哥们，你就是那个《硅谷》里面的简阳吧？然后我说，噢，谢谢，对对对，非常感谢，我就是简阳。然后他们说，卧槽，原来你真的会讲英文啊！我心想，这就是演戏啊，难道你真的以为马特是中国人么？你是不是脑袋被门砸过。我也不懂是哪接不上了，如果一个白人演员讲英音，他就是戏剧演员了，他能赢得奥斯卡。如果我说话带中国口音，那我就是乡下来的。</p>\n<p>榜样很重要啊，很多亚洲人都很骄傲很友好地来和我交流，他们会说，吉米，谢谢你代表了亚洲人。 我就回，不客气，但你知道我没有别的选择了，对吧？你醒来是亚洲人的话，你也只能代表亚洲人了。我总不能有天醒来，就说，去他的，我今天要代表尼日利亚🇳🇬人。能代表亚洲人，我是很骄傲的，但同时，这压力也太大了。应该没有人对着马特说，嘿，谢谢你代表了白人。这听起来就很奇怪啊，画风突变的感觉你懂么？如果有人走过来和我说，吉米，我代表白人。我会立刻马上离开那个地，并且绝对不会回去。真的压力很大，我现在走到哪都得做个良好亚洲人。去哪都得付小费，这原本是做为亚洲人的最大好处之一了。我可以假装不知道怎么付小费，你们知道啥是中式小费么？中式小费就是，无论你吃了多少，你付两刀小费，就这样。现在我去哪都得给20%的小费了。打个的也得给司机五星好评，这样才能做个好的榜样。我去到哪都得做个榜样，即使在那些很日常的时候。</p>\n<h2 id=\"vlog\">Vlog</h2>\n<h3 id=\"全英vlog和我一起练听力美国大学生的一天\">全英Vlog和我一起练听力！美国大学生的一天</h3>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1f3411Z7Mg?vd_source=66fc2d7975b7b9803b18b0923756b00d\">全英Vlog和我一起练听力！美国大学生的一天</a></p>\n</blockquote>\n<ul>\n<li>grocery 超市；literally 表强调（直接）；</li>\n<li>I spend the rest of my morning 我用一上午时间；end up doing最后做什么；it was <strong>way</strong> too adj. 它太……了；be particular about 对……挑剔；I didn't like them at the time, but now I wish I got 当时觉得一般般，现在希望当时买了😁；</li>\n</ul>\n<p><strong>中文释义：</strong></p>\n<p>每周五早上我都去陶瓷社团，我一上午甚至中午都会在这里练陶艺。这次我正在给一些刚烧制的我的作品上光，最后我把他们的内部都涂成白色，其中两个外面是粉色的，一个是绿色的，我迫不及待地想看看他们最后会是什么样子。这个是我手工的，这个是我用转轮做的，然后这个也是我手捏的。他们都上光了。最后我还做了这个可以倒牛奶的小东西，下一段是一个松鼠发出的好玩的叫声。后来呢我和男朋友一起吃了午饭，今天学校食堂是美式中餐，美国化的中餐基本上就是春卷和捞面，然后有什么类似甜的鸡肉，之后我也吃了麦片，因为我还是很饿。然后我男朋友想给自己做一个冰淇淋蛋筒，但是冰淇淋还不够凉，所以搞的很糟糕，第二次成功了。之后我们去了超市，因为我需要买水，因为我对水的味道很挑剔，我不知道是不是只有我一个人……如果你们对水的味道也很挑剔，请在评论告诉我。然后我拿了一个包裹，他们有免费的C19检测。我当时正在拿我的新睫毛夹，因为之前的我用的时候坏了，直接断成了两节。总之，这是我的新的，并且我注意到新的的头更弯，这使它更容易用，另一个感觉就像一个刑具。然后我做了一些作业，之后我去上微积分课。</p>\n<p>这是第二天，我买了一杯抹茶拿铁，然后我去了李维斯。最后我试穿了这条牛仔短裤，我当时觉得一般般，但是现在希望当时买了。然后我吃了韩国料理。这是一只猫，在一个宿舍，宿舍不允许养宠物，但是他真的很可爱。然后我买了奶茶，樱花乌龙味的。</p>\n<hr />\n<h3 id=\"带你逛逛我的大学ucla吧-英文vlog\">带你逛逛我的大学UCLA吧 英文Vlog</h3>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1uU4y1G723?vd_source=66fc2d7975b7b9803b18b0923756b00d\">带你逛逛我的大学UCLA吧 英文Vlog</a></p>\n</blockquote>\n<ul>\n<li><p>head over 前往； merchandise 商品；is flooded with 挤满；renovate 翻修；later on 待会；accomplished 有成就感的；make my way to 前往； take a snap of 给…拍照；back in... 在之前的什么时候；</p></li>\n<li><p>He was thinking to himself 他自己想；That was the original inspiration to the younger version of myself. 这就是少年自己的志向；Fast forward to 10 years later today. 快进到十年后的今天；To my left hand side. 在我左手边；This pretty much... 这差不多是 ；there we are 我们到了；</p></li>\n</ul>\n<p><strong>中文释义：</strong></p>\n<p>我就是在这开始做梦的， 十年前，15岁的我把这里拍了下来，就是后面好看的景色。当时他就在想，原来世界上还有这么美的校园。之后他又在想，我该怎么努力才能来这里读书呢？这就是少年自己的志向。快进到十年后的今天，我带朋友们看看我的大学，UCLA。左手边，是UCLA Powell Library，是学校的主图书馆 ，我大学在那里工作过两年。不走运，他们现在关着，因为新冠。我身后的那栋楼，是我们学校唯一一栋楼。开玩笑的，我这么说是因为在UCLA相关资料里，照片上都是那栋楼。我现在去学校纪念品店买点东西，这差不多是我上学时候的通勤路线，我从停车场走到图书馆上班。看看有多好看 。那里有家很棒的咖啡店，很多小组讨论会在这栋楼里。在正常的上学日，这里通常挤满了学生，有很多学生在发传单，想让学生他们报名参加他们的社团。到了，UCLA store。我觉得他们翻修了这里。 我带你去我以前工作的地方，那扇门后，我以前就在那打工，那是一个仓库。我曾经做的事情就和他们现在一样，完成网上订单。每次你在网上订购UCLA商品，我会去仓库找到那件物品，放进袋子里，贴上运单，然后寄到你家。我做了一年的时间。 这份工作还有别的故事，我待会再跟你们讲。</p>\n<p>我在去往南校区的路上，是时候讲个小故事了。那份工作是我在学校的第一份工作，我大二开始做的，每小时挣8.75美元，但是最低的工资，但是我很喜欢。其实，我找到这份工作是为了达成当时的一个目标，我需要赚足够的钱来买一张会中国看望当时女朋友的往返机票，在春假那一周。 我好像但是需要1500美元左右，我后来成功赚到了。 这让我很有成就感，感受到了成年人的快乐，可以花自己的钱。我没告诉我爸妈这件事，因为我知道他们会喊我回家之类的，也不能刷他们的信用卡，因为是一笔很明显的开销，还得掰扯半天，我不想费那劲。</p>\n<hr />\n<h3 id=\"美国大厂程序员的佛系一天英文-vlog\">美国大厂程序员的佛系一天｜英文 VLOG</h3>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1ia411U7jp?vd_source=66fc2d7975b7b9803b18b0923756b00d\">美国大厂程序员的佛系一天｜英文 VLOG</a></p>\n</blockquote>\n<ul>\n<li>day-to-day 日常的；typically, 通常；on top of things 完全掌握；uninterrupted 不受打扰的；come up 到来；get distract 分心；rule of thumb 指导经验；engaging 迷人的；down time 休息时间</li>\n<li>I start my day from doing 每天做的第一件事是..； But in general 但一般来说； there is a lot of room to improvise 有很多自由发挥的空间；wrap up the work 停止工作；take some mental notes on 心里想一下……；</li>\n</ul>\n<p><strong>中文释义：</strong></p>\n<p>我会在视频里给大家展示作为程序员的自己日常的工作是怎么样的。通常我九点左右起床，我一般不吃早餐，今天我还有十多分钟去做咖啡，顺便练习拉花。我是一个全职远程工作的软件工程师，所以我不需要去办公室。早上十点通常是我开始工作的时间。每天的第一件事，我会先查看消息来确保我没有遗漏什么信息。今天早上从十点到十二点，我有两个小时不被打扰的时间来专心写代码和去做自己今天优先级最高的事情。周三一般是公司的无会议日，但是大体来说，我也会尽量避免开会，除非它是必须的。 中午十二点是午饭时间，我们会订制那种自带食谱的食材包，所以我们不需要自己花功夫决定吃什么。今天，我们会吃Shimp Tacos。所有的原材料都在这里啦，让我们一起准备吧。做饭对我来说是一个很重要的仪式，不仅仅是因为我喜欢食物 ，而是过程本身也是一个非常治愈和有益的正念练习。我非常喜欢Tacos，它非常好做，不会花我很长的时间，很好吃并且很健康，并且这里有很多自由发挥的空间。完成啦，把东西卷在玉米饼里，放一些蛋白质和蔬菜，啊，生活真好。</p>\n<p>通常情况下我会午休到下午1点钟，看看社交媒体，看看Youtube视频。开始工作之前，我会再做一杯冰美式，咖啡对我来说就像是生活和工作之间的严格界限。今天下午的工作也都是专注的不被打扰的时间。 我对工作安排的经验是每天只关注在完成一到两件事上，并且尽量不要被临时的工作事情所打扰。下午我通常会有多个小段的休息时间，今天我的一个小任务是安装刚买的猫的吊床，这个工作比较简单，但是它足够有趣来让我摆脱工作，休息一下脑子 。关于猫猫是否喜欢你给他们买的玩具永远是一个谜。每一只猫的性格都非常不同，但是我喜欢抓住每个机会去观察他们对生活里陌生事物的反应。休息结束继续回到工作，我的工作效率在一天内慢慢降低，在五点钟左右的时候，我通常会结束一天的工作然后在心里想一下明天的工作安排。</p>\n<p>在晚饭之前，我会享受一小段自己的时间，看看手机和猫， 看看更多的Youtube视频。今天我们两个都工作的累了 ，所以我们吃一些在Trader Joes买的速食，做饭总体来说还是很有意思的，但是有时候有不做饭的选择也是很棒的。晚饭之后，我一般会去健身房，但是今天是休息日，所以我决定出去走走。在我们家旁边的Lake Union大概只需要20分钟的步行路程，夏天那里的景色特别好。夏天西雅图的白天特别长，现在已经是晚上8点了，但是看上去还是很亮。休息的时间是很重要的，即使是每天花10分钟的时间来放空，不去想任何事情是非常重要的。我每天都会尽量安排这样一段时间。它会让你感觉到自己的渺小，忘记生活的压力。</p>\n<hr />\n<h3 id=\"如何做到停止在大脑里自动翻译中英字幕\">如何做到停止在大脑里自动翻译【中英字幕】</h3>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV14V4y1P7RT?vd_source=66fc2d7975b7b9803b18b0923756b00d\">如何做到停止在大脑里自动翻译【中英字幕】</a></p>\n</blockquote>\n<ul>\n<li></li>\n<li></li>\n</ul>\n","categories":["English"],"tags":["English"]},{"title":"中国计算机学会(CCF)推荐国际学术会议和期刊目录","url":"/2022/11/03/%E4%B8%AD%E5%9B%BD%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%BC%9A-CCF-%E6%8E%A8%E8%8D%90%E5%9B%BD%E9%99%85%E5%AD%A6%E6%9C%AF%E4%BC%9A%E8%AE%AE%E5%92%8C%E6%9C%9F%E5%88%8A%E7%9B%AE%E5%BD%95/","content":"<p>😁内容摘录自<a href=\"https://ccf.atom.im/\">中国计算机学会(CCF)推荐国际学术会议和期刊目录（2019年）</a>😁</p>\n<p><span id=\"more\"></span></p>\n<h2 id=\"计算机体系结构并行与分布计算存储系统期刊\">计算机体系结构/并行与分布计算/存储系统（期刊）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 46%\" />\n<col style=\"width: 4%\" />\n<col style=\"width: 39%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>TOCS</td>\n<td>ACM Transactions on Computer Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tocs/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>TOS</td>\n<td>ACM Transactions on Storage</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tos/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>TCAD</td>\n<td>IEEE Transactions on Computer-Aided Design of Integrated Circuits And System</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tcad/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>TC</td>\n<td>IEEE Transactions on Computers</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tc/index.html</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>TPDS</td>\n<td>IEEE Transactions on Parallel and Distributed Systems</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tpds/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B 类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 44%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 41%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>TACO</td>\n<td>ACM Transactions on Architecture and Code Optimization</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/taco/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>TAAS</td>\n<td>ACM Transactions on Autonomous and Adaptive Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/taas/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>TODAES</td>\n<td>ACM Transactions on Design Automation of Electronic Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/todaes/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>TECS</td>\n<td>ACM Transactions on Embedded Computing Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tecs/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>TRETS</td>\n<td>ACM Transactions on Reconfigurable Technology and Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/trets/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>TVLSI</td>\n<td>IEEE Transactions on Very Large Scale Integration (VLSI) Systems</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tvlsi/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>JPDC</td>\n<td>Journal of Parallel and Distributed Computing</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/jpdc/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>JSA</td>\n<td>Journal of Systems Architecture: Embedded Software Design</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/jsa/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>PARCO</td>\n<td>Parallel Computing</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/conf/parco/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td></td>\n<td>Performance Evaluation: An International Journal</td>\n<td>Elsevier</td>\n<td>http://www.journals.elsevier.com/performance-evaluation/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 8%\" />\n<col style=\"width: 44%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>JETC</td>\n<td>ACM Journal on Emerging Technologies in Computing Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/jetc/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td></td>\n<td>Concurrency and Computation: Practice and Experience</td>\n<td>Wiley</td>\n<td>http://dblp.uni-trier.de/db/journals/concurrency/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>DC</td>\n<td>Distributed Computing</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/dc/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>FGCS</td>\n<td>Future Generation Computer Systems</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/fgcs/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>TCC</td>\n<td>IEEE Transactions on Cloud Computing</td>\n<td>IEEE</td>\n<td>https://dblp.uni-trier.de/db/journals/tcc/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>Integration</td>\n<td>Integration, the VLSI Journal</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/integration/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>JETTA</td>\n<td>Journal of Electronic Testing-Theory and Applications</td>\n<td>Springer</td>\n<td>http://link.springer.com/journal/10836</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>JGC</td>\n<td>Journal of Grid computing</td>\n<td>Springer</td>\n<td>https://dblp.uni-trier.de/db/journals/grid/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>MICPRO</td>\n<td>Microprocessors and Microsystems: Embedded Hardware Design</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/mam/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>RTS</td>\n<td>Real-Time Systems</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/rts/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>TJSC</td>\n<td>The Journal of Supercomputing</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/tjs/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"计算机体系结构并行与分布计算存储系统会议\">计算机体系结构/并行与分布计算/存储系统（会议）</h2>\n<p><strong>A类</strong></p>\n<table style=\"width:100%;\">\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 45%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>PPoPP</td>\n<td>ACM SIGPLAN Symposium on Principles &amp; Practice of Parallel Programming</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/ppopp/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>FAST</td>\n<td>Conference on File and Storage Technologies</td>\n<td>USENIX</td>\n<td>http://dblp.uni-trier.de/db/conf/fast/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>DAC</td>\n<td>Design Automation Conference</td>\n<td>ACM</td>\n<td>https://dblp.uni-trier.de/db/conf/dac/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>HPCA</td>\n<td>High Performance Computer Architecture</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/hpca/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>MICRO</td>\n<td>IEEE/ACM International Symposium on Microarchitecture</td>\n<td>IEEE/ACM</td>\n<td>https://dblp.uni-trier.de/db/conf/micro/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>SC</td>\n<td>International Conference for High Performance Computing, Networking, Storage, and Analysis</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/sc/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>ASPLOS</td>\n<td>International Conference on Architectural Support for Programming Languages and Operating Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/asplos/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>ISCA</td>\n<td>International Symposium on Computer Architecture</td>\n<td>ACM /IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/isca/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>USENIX ATC</td>\n<td>USENIX Annual Technical Conference</td>\n<td>USENIX</td>\n<td>http://dblp.uni-trier.de/db/conf/usenix/index.html</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 8%\" />\n<col style=\"width: 45%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 36%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>SoCC</td>\n<td>ACM Symposium on Cloud Computing</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/cloud/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>SPAA</td>\n<td>ACM Symposium on Parallelism in Algorithms and Architectures</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/spaa/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>PODC</td>\n<td>ACM Symposium on Principles of Distributed Computing</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/podc/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>FPGA</td>\n<td>ACM/SIGDA International Symposium on Field-Programmable Gate Arrays</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/fpga/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>CGO</td>\n<td>Code Generation and Optimization</td>\n<td>IEEE/ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/cgo/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>DATE</td>\n<td>Design, Automation &amp; Test in Europe</td>\n<td>IEEE/ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/date/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>EuroSys</td>\n<td>European Conference on Computer Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/eurosys/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>HOT CHIPS</td>\n<td>Hot Chips: A Symposium on High Performance Chips</td>\n<td>IEEE</td>\n<td>http://www.hotchips.org/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>CLUSTER</td>\n<td>IEEE International Conference on Cluster Computing</td>\n<td>IEEE</td>\n<td>https://dblp.uni-trier.de/db/conf/cluster/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>ICCD</td>\n<td>International Conference on Computer Design</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/iccd/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>ICCAD</td>\n<td>International Conference on Computer-Aided Design</td>\n<td>IEEE/ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/iccad/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>ICDCS</td>\n<td>International Conference on Distributed Computing Systems</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icdcs/</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td>CODES+ISSS</td>\n<td>International Conference on Hardware/Software Co-design and System Synthesis</td>\n<td>ACM/ IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/codes/index.html</td>\n</tr>\n<tr class=\"even\">\n<td>14</td>\n<td>HiPEAC</td>\n<td>International Conference on High Performance and Embedded Architectures and Compilers</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/hipeac/</td>\n</tr>\n<tr class=\"odd\">\n<td>15</td>\n<td>SIGMETRICS</td>\n<td>International Conference on Measurement and Modeling of Computer Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/sigmetrics/</td>\n</tr>\n<tr class=\"even\">\n<td>16</td>\n<td>PACT</td>\n<td>International Conference on Parallel Architectures and Compilation Techniques</td>\n<td>IEEE/ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/IEEEpact/</td>\n</tr>\n<tr class=\"odd\">\n<td>17</td>\n<td>ICPP</td>\n<td>International Conference on Parallel Processing</td>\n<td></td>\n<td>http://dblp.uni-trier.de/db/conf/icpp/</td>\n</tr>\n<tr class=\"even\">\n<td>18</td>\n<td>ICS</td>\n<td>International Conference on Supercomputing</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/ics/</td>\n</tr>\n<tr class=\"odd\">\n<td>19</td>\n<td>VEE</td>\n<td>International Conference on Virtual Execution Environments</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/vee/</td>\n</tr>\n<tr class=\"even\">\n<td>20</td>\n<td>IPDPS</td>\n<td>International Parallel &amp; Distributed Processing Symposium</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/ipps/</td>\n</tr>\n<tr class=\"odd\">\n<td>21</td>\n<td>Performance</td>\n<td>International Symposium on Computer Performance Modeling, Measurements and Evaluation</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/performance/</td>\n</tr>\n<tr class=\"even\">\n<td>22</td>\n<td>HPDC</td>\n<td>International Symposium on High Performance Distributed Computing</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/hpdc/</td>\n</tr>\n<tr class=\"odd\">\n<td>23</td>\n<td>ITC</td>\n<td>International Test Conference</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/itc/</td>\n</tr>\n<tr class=\"even\">\n<td>24</td>\n<td>LISA</td>\n<td>Large Installation System Administration Conference</td>\n<td>USENIX</td>\n<td>http://dblp.uni-trier.de/db/conf/lisa/</td>\n</tr>\n<tr class=\"odd\">\n<td>25</td>\n<td>MSST</td>\n<td>Mass Storage Systems and Technologies</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/mss/</td>\n</tr>\n<tr class=\"even\">\n<td>26</td>\n<td>RTAS</td>\n<td>Real-Time and Embedded Technology and Applications Symposium</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/rtas/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 45%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 38%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>CF</td>\n<td>ACM International Conference on Computing Frontiers</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/cf</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>SYSTOR</td>\n<td>ACM International Systems and Storage Conference</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/systor/index.html</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>NOCS</td>\n<td>ACM/IEEE International Symposium on Networks-on-Chip</td>\n<td>ACM/IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/nocs</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>ASAP</td>\n<td>Application-Specific Systems, Architectures, and Processors</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/asap</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>ASP-DAC</td>\n<td>Asia and South Pacific Design Automation Conference</td>\n<td>ACM/IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/aspdac</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>Euro-Par</td>\n<td>European Conference on Parallel and Distributed Computing</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/europar/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>ETS</td>\n<td>European Test Symposium</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/ets/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>FPL</td>\n<td>Field Programmable Logic and Applications</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/fpl/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>FCCM</td>\n<td>Field-Programmable Custom Computing Machines</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/fccm/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>GLSVLSI</td>\n<td>Great Lakes Symposium on VLSI</td>\n<td>ACM/IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/glvlsi/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>ATS</td>\n<td>IEEE Asian Test Symposium</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/ats/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>HPCC</td>\n<td>IEEE International Conference on High Performance Computing and Communications</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/hpcc/</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td>HiPC</td>\n<td>IEEE International Conference on High Performance Computing, Data and Analytics</td>\n<td>IEEE/ ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/hipc/index.html</td>\n</tr>\n<tr class=\"even\">\n<td>14</td>\n<td>MASCOTS</td>\n<td>IEEE International Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/mascots/</td>\n</tr>\n<tr class=\"odd\">\n<td>15</td>\n<td>ISPA</td>\n<td>IEEE International Symposium on Parallel and Distributed Processing with Applications</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/ispa/</td>\n</tr>\n<tr class=\"even\">\n<td>16</td>\n<td>CCGRID</td>\n<td>IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing</td>\n<td>ACM/IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/ccgrid/</td>\n</tr>\n<tr class=\"odd\">\n<td>17</td>\n<td>NPC</td>\n<td>IFIP International Conference on Network and Parallel Computing</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/npc/</td>\n</tr>\n<tr class=\"even\">\n<td>18</td>\n<td>ICA3PP</td>\n<td>International Conference on Algorithms and Architectures for Parallel Processing</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/ica3pp/</td>\n</tr>\n<tr class=\"odd\">\n<td>19</td>\n<td>CASES</td>\n<td>International Conference on Compilers, Architectures, and Synthesis for Embedded Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/cases/index.html</td>\n</tr>\n<tr class=\"even\">\n<td>20</td>\n<td>FPT</td>\n<td>International Conference on Field-Programmable Technology</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/fpt/</td>\n</tr>\n<tr class=\"odd\">\n<td>21</td>\n<td>ICPADS</td>\n<td>International Conference on Parallel and Distributed Systems</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icpads/</td>\n</tr>\n<tr class=\"even\">\n<td>22</td>\n<td>ISCAS</td>\n<td>International Symposium on Circuits and Systems</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/iscas/</td>\n</tr>\n<tr class=\"odd\">\n<td>23</td>\n<td>ISLPED</td>\n<td>International Symposium on Low Power Electronics and Design</td>\n<td>ACM/IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/islped/</td>\n</tr>\n<tr class=\"even\">\n<td>24</td>\n<td>ISPD</td>\n<td>International Symposium on Physical Design</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/ispd/</td>\n</tr>\n<tr class=\"odd\">\n<td>25</td>\n<td>HotI</td>\n<td>Symposium on High-Performance Interconnects</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/hoti/</td>\n</tr>\n<tr class=\"even\">\n<td>26</td>\n<td>VTS</td>\n<td>VLSI Test Symposium</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/vts/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"计算机网络期刊\">计算机网络（期刊）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 43%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 38%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>JSAC</td>\n<td>IEEE Journal of Selected Areas in Communications</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/jsac/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>TMC</td>\n<td>IEEE Transactions on Mobile Computing</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tmc/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>TON</td>\n<td>IEEE/ACM Transactions on Networking</td>\n<td>IEEE/ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/ton/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table style=\"width:100%;\">\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 48%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 36%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>TOIT</td>\n<td>ACM Transactions on Internet Technology</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/toit/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>TOMCCAP</td>\n<td>ACM Transactions on Multimedia Computing, Communications and Applications</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tomccap/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>TOSN</td>\n<td>ACM Transactions on Sensor Networks</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tosn/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>CN</td>\n<td>Computer Networks</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/cn/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>TCOM</td>\n<td>IEEE Transactions on Communications</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tcom/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>TWC</td>\n<td>IEEE Transactions on Wireless Communications</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/twc/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 43%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 39%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td></td>\n<td>Ad Hoc Networks</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/adhoc/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>CC</td>\n<td>Computer Communications</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/comcom/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>TNSM</td>\n<td>IEEE Transactions on Network and Service Management</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tnsm/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td></td>\n<td>IET Communications</td>\n<td>IET</td>\n<td>http://dblp.uni-trier.de/db/journals/iet-com/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>JNCA</td>\n<td>Journal of Network and Computer Applications</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/jnca/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>MONET</td>\n<td>Mobile Networks &amp; Applications</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/monet/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td></td>\n<td>Networks</td>\n<td>Wiley</td>\n<td>http://dblp.uni-trier.de/db/journals/networks/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>PPNA</td>\n<td>Peer-to-Peer Networking and Applications</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/ppna/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>WCMC</td>\n<td>Wireless Communications &amp; Mobile Computing</td>\n<td>Wiley.</td>\n<td>http://dblp.uni-trier.de/db/journals/wicomm/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td></td>\n<td>Wireless Networks</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/winet/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"计算机网络会议\">计算机网络（会议）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 46%\" />\n<col style=\"width: 4%\" />\n<col style=\"width: 39%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>SIGCOMM</td>\n<td>ACM International Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/sigcomm/index.html</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>MobiCom</td>\n<td>ACM International Conference on Mobile Computing and Networking</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/mobicom/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>INFOCOM</td>\n<td>IEEE International Conference on Computer Communications</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/infocom/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>NSDI</td>\n<td>Symposium on Network System Design and Implementation</td>\n<td>USENIX</td>\n<td>http://dblp.uni-trier.de/db/conf/nsdi/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 48%\" />\n<col style=\"width: 8%\" />\n<col style=\"width: 33%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>SenSys</td>\n<td>ACM Conference on Embedded Networked Sensor Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/sensys/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>CoNEXT</td>\n<td>ACM International Conference on Emerging Networking Experiments and Technologies</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/conext/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>SECON</td>\n<td>IEEE Communications Society Conference on Sensor and Ad Hoc Communications and Networks</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/secon/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>IPSN</td>\n<td>International Conference on Information Processing in Sensor Networks</td>\n<td>IEEE/ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/ipsn/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>MobiSys</td>\n<td>International Conference on Mobile Systems, Applications, and Services</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/mobisys/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>ICNP</td>\n<td>International Conference on Network Protocols</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icnp/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>MobiHoc</td>\n<td>International Symposium on Mobile Ad Hoc Networking and Computing</td>\n<td>ACM/IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/mobihoc/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>NOSSDAV</td>\n<td>International Workshop on Network and Operating System Support for Digital Audio and Video</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/nossdav/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>IWQoS</td>\n<td>International Workshop on Quality of Service</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/iwqos/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>IMC</td>\n<td>Internet Measurement Conference</td>\n<td>ACM/USENIX</td>\n<td>http://dblp.uni-trier.de/db/conf/imc/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 43%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 39%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>ANCS</td>\n<td>Architectures for Networking and Communications Systems</td>\n<td>ACM/IEE E</td>\n<td>http://dblp.uni-trier.de/db/conf/ancs/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>APNOMS</td>\n<td>Asia-Pacific Network Operations and Management Symposium</td>\n<td>IFIP/IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/apnoms/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>FORTE</td>\n<td>Formal Techniques for Networked and Distributed Systems</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/forte/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>LCN</td>\n<td>IEEE Conference on Local Computer Networks</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/lcn/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>GLOBECO M</td>\n<td>IEEE Global Communications Conference</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/globecom/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>ICC</td>\n<td>IEEE International Conference on Communications</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icc/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>ICCCN</td>\n<td>IEEE International Conference on Computer Communications and Networks</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icccn/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>MASS</td>\n<td>IEEE International Conference on Mobile Ad-hoc and Sensor Systems</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/mass/index.html</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>P2P</td>\n<td>IEEE International Conference on Peer-to-Peer Computing</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/p2p/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>IPCCC</td>\n<td>IEEE International Performance Computing and Communications Conference</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/ipccc/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>WoWMoM</td>\n<td>IEEE International Symposium on a World of Wireless, Mobile and Multimedia Networks</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/wowmom/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>ISCC</td>\n<td>IEEE Symposium on Computers and Communications</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/iscc/</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td>WCNC</td>\n<td>IEEE Wireless Communications &amp; Networking Conference</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/wcnc/</td>\n</tr>\n<tr class=\"even\">\n<td>14</td>\n<td>Networking</td>\n<td>IFIP International Conferences on Networking</td>\n<td>IFIP</td>\n<td>http://dblp.uni-trier.de/db/conf/networking/index.html</td>\n</tr>\n<tr class=\"odd\">\n<td>15</td>\n<td>IM</td>\n<td>IFIP/IEEE International Symposium on Integrated Network Management</td>\n<td>IFIP/IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/im/index.html</td>\n</tr>\n<tr class=\"even\">\n<td>16</td>\n<td>MSN</td>\n<td>International Conference on Mobile Ad-hoc and Sensor Networks</td>\n<td>IEEE</td>\n<td>https://dblp.uni-trier.de/db/conf/msn/</td>\n</tr>\n<tr class=\"odd\">\n<td>17</td>\n<td>MSWiM</td>\n<td>International Conference on Modeling, Analysis and Simulation of Wireless and Mobile Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/mswim/</td>\n</tr>\n<tr class=\"even\">\n<td>18</td>\n<td>WASA</td>\n<td>International Conference on Wireless Algorithms, Systems, and Applications</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/wasa/</td>\n</tr>\n<tr class=\"odd\">\n<td>19</td>\n<td>HotNets</td>\n<td>The Workshop on Hot Topics in Networks</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/hotnets/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"网络与信息安全期刊\">网络与信息安全（期刊）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 47%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 35%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>TDSC</td>\n<td>IEEE Transactions on Dependable and Secure Computing</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tdsc/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>TIFS</td>\n<td>IEEE Transactions on Information Forensics and Security</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tifs/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td></td>\n<td>Journal of Cryptology</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/joc/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 37%\" />\n<col style=\"width: 8%\" />\n<col style=\"width: 42%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>TOPS</td>\n<td>ACM Transactions on Privacy and Security</td>\n<td>ACM</td>\n<td>https://tops.acm.org/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td></td>\n<td>Computers &amp; Security</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/compsec/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td></td>\n<td>Designs, Codes and Cryptography</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/dcc/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>JCS</td>\n<td>Journal of Computer Security</td>\n<td>IOS Press</td>\n<td>http://dblp.uni-trier.de/db/journals/jcs/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 40%\" />\n<col style=\"width: 9%\" />\n<col style=\"width: 41%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>CLSR</td>\n<td>Computer Law and Security Review</td>\n<td>Elsevier</td>\n<td>http://www.journals.elsevier.com/computer-law-and-security-review/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td></td>\n<td>EURASIP Journal on Information Security</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/ejisec/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td></td>\n<td>IET Information Security</td>\n<td>IET</td>\n<td>http://dblp.uni-trier.de/db/journals/iet-ifs/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>IMCS</td>\n<td>Information Management &amp; Computer Security</td>\n<td>Emerald</td>\n<td>http://dblp.uni-trier.de/db/journals/imcs/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>IJICS</td>\n<td>International Journal of Information and Computer Security</td>\n<td>Inderscience</td>\n<td>http://dblp.uni-trier.de/db/journals/ijics/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>IJISP</td>\n<td>International Journal of Information Security and Privacy</td>\n<td>Idea Group Inc</td>\n<td>http://dblp.uni-trier.de/db/journals/ijisp/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>JISA</td>\n<td>Journal of Information Security and Application</td>\n<td>Elsevier</td>\n<td>https://dblp.uni-trier.de/db/journals/istr/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>SCN</td>\n<td>Security and Communication Networks</td>\n<td>Wiley</td>\n<td>http://dblp.uni-trier.de/db/journals/scn/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"网络与信息安全会议\">网络与信息安全（会议）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 11%\" />\n<col style=\"width: 40%\" />\n<col style=\"width: 13%\" />\n<col style=\"width: 32%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>CCS</td>\n<td>ACM Conference on Computer and Communications Security</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/ccs/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>EUROCRYPT</td>\n<td>European Cryptology Conference</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/eurocrypt/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>S&amp;P</td>\n<td>IEEE Symposium on Security and Privacy</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/sp/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>CRYPTO</td>\n<td>International Cryptology Conference</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/crypto/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>USENIX Security</td>\n<td>Usenix Security Symposium</td>\n<td>USENIX Association</td>\n<td>http://dblp.uni-trier.de/db/conf/uss/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table style=\"width:100%;\">\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 48%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 34%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>ACSAC</td>\n<td>Annual Computer Security Applications Conference</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/acsac/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>ASIACRYPT</td>\n<td>Annual International Conference on the Theory and Application of Cryptology and Information Security</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/asiacrypt/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>ESORICS</td>\n<td>European Symposium on Research in Computer Security</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/esorics/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>FSE</td>\n<td>Fast Software Encryption</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/fse/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>CSFW</td>\n<td>IEEE Computer Security Foundations Workshop</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/csfw/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>SRDS</td>\n<td>IEEE International Symposium on Reliable Distributed Systems</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/srds/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>CHES</td>\n<td>International Conference on Cryptographic Hardware and Embedded Systems</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/ches/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>DSN</td>\n<td>International Conference on Dependable Systems and Networks</td>\n<td>IEEE/IFIP</td>\n<td>http://dblp.uni-trier.de/db/conf/dsn/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>RAID</td>\n<td>International Symposium on Recent Advances in Intrusion Detection</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/raid/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>PKC</td>\n<td>International Workshop on Practice and Theory in Public Key Cryptography</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/pkc/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>NDSS</td>\n<td>ISOC Network and Distributed System Security Symposium</td>\n<td>ISOC</td>\n<td>http://dblp.uni-trier.de/db/conf/ndss/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>TCC</td>\n<td>Theory of Cryptography Conference</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/tcc/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 9%\" />\n<col style=\"width: 46%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 34%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>WiSec</td>\n<td>ACM Conference on Security and Privacy in Wireless and Mobile Networks</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/wisec/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>SACMAT</td>\n<td>ACM Symposium on Access Control Models and Technologies</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/sacmat/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>DRM</td>\n<td>ACM Workshop on Digital Rights Management</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/drm/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>IH&amp;MMSec</td>\n<td>ACM Workshop on Information Hiding and Multimedia Security</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/ih/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>ACNS</td>\n<td>Applied Cryptography and Network Security</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/acns/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>AsiaCCS</td>\n<td>Asia Conference on Computer and Communications Security</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/ccs/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>ACISP</td>\n<td>Australasia Conference on Information Security and Privacy</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/acisp/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>CT-RSA</td>\n<td>Cryptographer's Track at RSA Conference</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/ctrsa/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>DIMVA</td>\n<td>Detection of Intrusions and Malware &amp; Vulnerability Assessment</td>\n<td></td>\n<td>http://dblp.uni-trier.de/db/conf/dimva/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>DFRWS</td>\n<td>Digital Forensic Research Workshop</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/conf/dfrws/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>FC</td>\n<td>Financial Cryptography and Data Security</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/fc/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>TrustCom</td>\n<td>IEEE International Conference on Trust, Security and Privacy in Computing and Communications</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/trustcom/</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td>SEC</td>\n<td>IFIP International Information Security Conference</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/sec/</td>\n</tr>\n<tr class=\"even\">\n<td>14</td>\n<td>IFIP WG 11.9</td>\n<td>IFIP WG 11.9 International Conference on Digital Forensics</td>\n<td>Springer</td>\n<td>http://www.ifip119.org/Conferences/</td>\n</tr>\n<tr class=\"odd\">\n<td>15</td>\n<td>ISC</td>\n<td>Information Security Conference</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/isw/</td>\n</tr>\n<tr class=\"even\">\n<td>16</td>\n<td>ICDF2C</td>\n<td>International Conference on Digital Forensics &amp; Cyber Crime</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/icdf2c/</td>\n</tr>\n<tr class=\"odd\">\n<td>17</td>\n<td>ICICS</td>\n<td>International Conference on Information and Communications Security</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/icics/</td>\n</tr>\n<tr class=\"even\">\n<td>18</td>\n<td>SecureComm</td>\n<td>International Conference on Security and Privacy in Communication Networks</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/securecomm/</td>\n</tr>\n<tr class=\"odd\">\n<td>19</td>\n<td>NSPW</td>\n<td>New Security Paradigms Workshop</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/nspw/</td>\n</tr>\n<tr class=\"even\">\n<td>20</td>\n<td>PAM</td>\n<td>Passive and Active Measurement Conference</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/pam/</td>\n</tr>\n<tr class=\"odd\">\n<td>21</td>\n<td>PETS</td>\n<td>Privacy Enhancing Technologies Symposium</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/pet/</td>\n</tr>\n<tr class=\"even\">\n<td>22</td>\n<td>SAC</td>\n<td>Selected Areas in Cryptography</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/sacrypt/</td>\n</tr>\n<tr class=\"odd\">\n<td>23</td>\n<td>SOUPS</td>\n<td>Symposium On Usable Privacy and Security</td>\n<td>USENIX</td>\n<td>http://dblp.uni-trier.de/db/conf/soups/</td>\n</tr>\n<tr class=\"even\">\n<td>24</td>\n<td>HotSec</td>\n<td>USENIX Workshop on Hot Topics in Security</td>\n<td>USENIX</td>\n<td>http://www.usenix.org/events/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"软件工程系统软件程序设计语言期刊\">软件工程/系统软件/程序设计语言（期刊）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 47%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>TOPLAS</td>\n<td>ACM Transactions on Programming Languages &amp; Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/toplas/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>TOSEM</td>\n<td>ACM Transactions on Software Engineering and Methodology</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tosem/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>TSE</td>\n<td>IEEE Transactions on Software Engineering</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tse/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 33%\" />\n<col style=\"width: 18%\" />\n<col style=\"width: 39%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>ASE</td>\n<td>Automated Software Engineering</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/ase/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>ESE</td>\n<td>Empirical Software Engineering</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/ese/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>TSC</td>\n<td>IEEE Transactions on Service Computing</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tsc/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>IETS</td>\n<td>IET Software</td>\n<td>IET</td>\n<td>https://dblp.uni-trier.de/db/journals/iet-sen/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>IST</td>\n<td>Information and Software Technology</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/infsof/index.html</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>JFP</td>\n<td>Journal of Functional Programming</td>\n<td>Cambridge University Press</td>\n<td>http://dblp.uni-trier.de/db/journals/jfp/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td></td>\n<td>Journal of Software: Evolution and Process</td>\n<td>Wiley</td>\n<td>http://dblp.uni-trier.de/db/journals/smr/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>JSS</td>\n<td>Journal of Systems and Software</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/jss/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>RE</td>\n<td>Requirements Engineering</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/re/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>SCP</td>\n<td>Science of Computer Programming</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/scp/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>SoSyM</td>\n<td>Software and System Modeling</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/sosym/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>STVR</td>\n<td>Software Testing, Verification and Reliability</td>\n<td>Wiley</td>\n<td>http://dblp.uni-trier.de/db/journals/stvr/index.html</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td>SPE</td>\n<td>Software: Practice and Experience</td>\n<td>Wiley</td>\n<td>http://dblp.uni-trier.de/db/journals/spe/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 39%\" />\n<col style=\"width: 17%\" />\n<col style=\"width: 35%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>CL</td>\n<td>Computer Languages, Systems and Structures</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/cl/index.html</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>IJSEKE</td>\n<td>International Journal on Software Engineering and Knowledge Engineering</td>\n<td>World Scientific</td>\n<td>http://dblp.uni-trier.de/db/journals/ijseke/index.html</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>STTT</td>\n<td>International Journal on Software Tools for Technology Transfer</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/sttt/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>JLAP</td>\n<td>Journal of Logic and Algebraic Programming</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/jlp/jlap.html</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>JWE</td>\n<td>Journal of Web Engineering</td>\n<td>Rinton Press</td>\n<td>http://dblp.uni-trier.de/db/journals/jwe/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>SOCA</td>\n<td>Service Oriented Computing and Applications</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/soca/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>SQJ</td>\n<td>Software Quality Journal</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/sqj/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>TPLP</td>\n<td>Theory and Practice of Logic Programming</td>\n<td>Cambridge University Press</td>\n<td>http://dblp.uni-trier.de/db/journals/tplp/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"软件工程系统软件程序设计语言会议\">软件工程/系统软件/程序设计语言（会议）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 49%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 33%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>PLDI</td>\n<td>ACM SIGPLAN Conference on Programming Language Design &amp; Implementation</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/pldi/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>POPL</td>\n<td>ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/popl/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>FSE/ESEC</td>\n<td>ACM SIGSOFT Symposium on the Foundation of Software Engineering/ European Software Engineering Conference</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/sigsoft/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>SOSP</td>\n<td>ACM Symposium on Operating Systems Principles</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/sosp/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>OOPSLA</td>\n<td>Conference on Object-Oriented Programming Systems, Languages, and Applications</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/oopsla/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>ASE</td>\n<td>International Conference on Automated Software Engineering</td>\n<td>IEEE/ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/kbse/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>ICSE</td>\n<td>International Conference on Software Engineering</td>\n<td>ACM/IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icse/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>ISSTA</td>\n<td>International Symposium on Software Testing and Analysis</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/issta/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>OSDI</td>\n<td>USENIX Symposium on Operating Systems Design and Implementations</td>\n<td>USENIX</td>\n<td>http://dblp.uni-trier.de/db/conf/osdi/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 44%\" />\n<col style=\"width: 11%\" />\n<col style=\"width: 32%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>ECOOP</td>\n<td>European Conference on Object-Oriented Programming</td>\n<td>AITO</td>\n<td>http://dblp.uni-trier.de/db/conf/ecoop/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>ETAPS</td>\n<td>European Joint Conferences on Theory and Practice of Software</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/etaps/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>ICPC</td>\n<td>IEEE International Conference on Program Comprehension</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/iwpc/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>RE</td>\n<td>IEEE International Requirements Engineering Conference</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/re/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>CAiSE</td>\n<td>International Conference on Advanced Information Systems Engineering</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/caise/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>ICFP</td>\n<td>International Conference on Function Programming</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/icfp/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>LCTES</td>\n<td>International Conference on Languages, Compilers and Tools for Embedded Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/lctrts/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>MoDELS</td>\n<td>International Conference on Model Driven Engineering Languages and Systems</td>\n<td>ACM, IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/models/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>CP</td>\n<td>International Conference on Principles and Practice of Constraint Programming</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/cp/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>ICSOC</td>\n<td>International Conference on Service Oriented Computing</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/icsoc/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>SANER</td>\n<td>International Conference on Software Analysis, Evolution, and Reengineering</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/wcre/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>ICSME</td>\n<td>International Conference on Software Maintenance and Evolution</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icsm/</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td>VMCAI</td>\n<td>International Conference on Verification, Model Checking, and Abstract Interpretation</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/vmcai/</td>\n</tr>\n<tr class=\"even\">\n<td>14</td>\n<td>ICWS</td>\n<td>International Conference on Web Services （Research Track）</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icws/</td>\n</tr>\n<tr class=\"odd\">\n<td>15</td>\n<td>Middleware</td>\n<td>International Middleware Conference</td>\n<td>ACM/IFIP/ USENIX</td>\n<td>http://dblp.uni-trier.de/db/conf/middleware/</td>\n</tr>\n<tr class=\"even\">\n<td>16</td>\n<td>SAS</td>\n<td>International Static Analysis Symposium</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/sas/</td>\n</tr>\n<tr class=\"odd\">\n<td>17</td>\n<td>ESEM</td>\n<td>International Symposium on Empirical Software Engineering and Measurement</td>\n<td>ACM/IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/esem/</td>\n</tr>\n<tr class=\"even\">\n<td>18</td>\n<td>FM</td>\n<td>International Symposium on Formal Methods</td>\n<td>FME</td>\n<td>http://dblp.uni-trier.de/db/conf/fm/</td>\n</tr>\n<tr class=\"odd\">\n<td>19</td>\n<td>ISSRE</td>\n<td>International Symposium on Software Reliability Engineering</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/issre/</td>\n</tr>\n<tr class=\"even\">\n<td>20</td>\n<td>HotOS</td>\n<td>USENIX Workshop on Hot Topics in Operating Systems</td>\n<td>USENIX</td>\n<td>http://dblp.uni-trier.de/db/conf/hotos/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 46%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>PEPM</td>\n<td>ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/pepm/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>PASTE</td>\n<td>ACMSIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/paste/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>APLAS</td>\n<td>Asian Symposium on Programming Languages and Systems</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/aplas/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>APSEC</td>\n<td>Asia-Pacific Software Engineering Conference</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/apsec/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>EASE</td>\n<td>Evaluation and Assessment in Software Engineering</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/ease/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>ICECCS</td>\n<td>IEEE International Conference on Engineering of Complex Computer Systems</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/iceccs/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>ICST</td>\n<td>IEEE International Conference on Software Testing, Verification and Validation</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icst/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>ISPASS</td>\n<td>IEEE International Symposium on Performance Analysis of Systems and Software</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/ispass/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>SCAM</td>\n<td>IEEE International Working Conference on Source Code Analysis and Manipulation</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/scam/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>COMPSAC</td>\n<td>International Computer Software and Applications Conference</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/compsac/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>ICFEM</td>\n<td>International Conference on Formal Engineering Methods</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/icfem/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>TOOLS</td>\n<td>International Conference on Objects, Models, Components, Patterns</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/tools/index.html</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td>SCC</td>\n<td>International Conference on Service Computing</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/IEEEscc/</td>\n</tr>\n<tr class=\"even\">\n<td>14</td>\n<td>ICSSP</td>\n<td>International Conference on Software and System Process</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/ispw/</td>\n</tr>\n<tr class=\"odd\">\n<td>15</td>\n<td>SEKE</td>\n<td>International Conference on Software Engineering and Knowledge Engineering</td>\n<td>KSI</td>\n<td>http://dblp.uni-trier.de/db/conf/seke/</td>\n</tr>\n<tr class=\"even\">\n<td>16</td>\n<td>QRS</td>\n<td>International Conference on Software Quality, Reliability and Security</td>\n<td>IEEE</td>\n<td>https://dblp.uni-trier.de/db/conf/qrs/</td>\n</tr>\n<tr class=\"odd\">\n<td>17</td>\n<td>ICSR</td>\n<td>International Conference on Software Reuse</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/icsr/</td>\n</tr>\n<tr class=\"even\">\n<td>18</td>\n<td>ICWE</td>\n<td>International Conference on Web Engineering</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/icwe/</td>\n</tr>\n<tr class=\"odd\">\n<td>19</td>\n<td>SPIN</td>\n<td>International SPIN Workshop on Model Checking Software</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/spin/index.html</td>\n</tr>\n<tr class=\"even\">\n<td>20</td>\n<td>ATVA</td>\n<td>International Symposium on Automated Technology for Verification and Analysis</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/atva/</td>\n</tr>\n<tr class=\"odd\">\n<td>21</td>\n<td>LOPSTR</td>\n<td>International Symposium on Logic-based Program Synthesis and Transformation</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/lopstr/</td>\n</tr>\n<tr class=\"even\">\n<td>22</td>\n<td>TASE</td>\n<td>International Symposium on Theoretical Aspects of Software Engineering</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/tase/</td>\n</tr>\n<tr class=\"odd\">\n<td>23</td>\n<td>MSR</td>\n<td>Mining Software Repositories</td>\n<td>IEEE/ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/msr/</td>\n</tr>\n<tr class=\"even\">\n<td>24</td>\n<td>REFSQ</td>\n<td>Requirements Engineering: Foundation for Software Quality</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/refsq/</td>\n</tr>\n<tr class=\"odd\">\n<td>25</td>\n<td>WICSA</td>\n<td>Working IEEE/IFIP Conference on Software Architecture</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/wicsa/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"数据库数据挖掘内容检索期刊\">数据库/数据挖掘/内容检索（期刊）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 45%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>TODS</td>\n<td>ACM Transactions on Database Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tods/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>TOIS</td>\n<td>ACM Transactions on Information Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tois/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>TKDE</td>\n<td>IEEE Transactions on Knowledge and Data Engineering</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tkde/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>VLDBJ</td>\n<td>The VLDB Journal</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/vldb/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 4%\" />\n<col style=\"width: 33%\" />\n<col style=\"width: 30%\" />\n<col style=\"width: 29%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>TKDD</td>\n<td>ACM Transactions on Knowledge Discovery from Data</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tkdd/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>TWEB</td>\n<td>ACM Transactions on the Web</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tweb/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>AEI</td>\n<td>Advanced Engineering Informatics</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/aei/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>DKE</td>\n<td>Data and Knowledge Engineering</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/dke/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>DMKD</td>\n<td>Data Mining and Knowledge Discovery</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/datamine/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>EJIS</td>\n<td>European Journal of Information Systems</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/ejis/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td></td>\n<td>GeoInformatica</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/geoinformatica/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>IPM</td>\n<td>Information Processing and Management</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/ipm/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td></td>\n<td>Information Sciences</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/isci/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>IS</td>\n<td>Information Systems</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/is/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>JASIST</td>\n<td>Journal of the American Society for Information Science and Technology</td>\n<td>American Society for Information Science and Technology</td>\n<td>http://dblp.uni-trier.de/db/journals/jasis/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>JWS</td>\n<td>Journal of Web Semantics</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/ws/</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td>KAIS</td>\n<td>Knowledge and Information Systems</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/kais/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 41%\" />\n<col style=\"width: 14%\" />\n<col style=\"width: 34%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>DPD</td>\n<td>Distributed and Parallel Databases</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/dpd/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>I&amp;M</td>\n<td>Information and Management</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/iam/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>IPL</td>\n<td>Information Processing Letters</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/ipl/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>IR</td>\n<td>Information Retrieval Journal</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/ir/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>IJCIS</td>\n<td>International Journal of Cooperative Information Systems</td>\n<td>World Scientific</td>\n<td>http://dblp.uni-trier.de/db/journals/ijcis/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>IJGIS</td>\n<td>International Journal of Geographical Information Science</td>\n<td>Taylor &amp; Francis</td>\n<td>http://dblp.uni-trier.de/db/journals/gis/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>IJIS</td>\n<td>International Journal of Intelligent Systems</td>\n<td>Wiley</td>\n<td>http://dblp.uni-trier.de/db/journals/ijis/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>IJKM</td>\n<td>International Journal of Knowledge Management</td>\n<td>IGI</td>\n<td>http://dblp.uni-trier.de/db/journals/ijkm/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>IJSWIS</td>\n<td>International Journal on Semantic Web and Information Systems</td>\n<td>IGI</td>\n<td>http://dblp.uni-trier.de/db/journals/ijswis/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>JCIS</td>\n<td>Journal of Computer Information Systems</td>\n<td>IACIS</td>\n<td>http://dblp.uni-trier.de/db/journals/jcis/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>JDM</td>\n<td>Journal of Database Management</td>\n<td>IGI-Global</td>\n<td>http://dblp.uni-trier.de/db/journals/jdm/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>JGITM</td>\n<td>Journal of Global Information Technology Management</td>\n<td>Ivy League Publishing</td>\n<td>http://www.tandfonline.com/loi/ugit20#.Vnv35pN97rI</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td>JIIS</td>\n<td>Journal of Intelligent Information Systems</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/jiis/</td>\n</tr>\n<tr class=\"even\">\n<td>14</td>\n<td>JSIS</td>\n<td>Journal of Strategic Information Systems</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/jsis/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"数据库数据挖掘内容检索会议\">数据库／数据挖掘／内容检索（会议）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 45%\" />\n<col style=\"width: 14%\" />\n<col style=\"width: 30%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>SIGMOD</td>\n<td>ACM Conference on Management of Data</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/sigmod/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>SIGKDD</td>\n<td>ACM Knowledge Discovery and Data Mining</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/kdd/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>ICDE</td>\n<td>IEEE International Conference on Data Engineering</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icde/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>SIGIR</td>\n<td>International Conference on Research on Development in Information Retrieval</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/sigir/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>VLDB</td>\n<td>International Conference on Very Large Data Bases</td>\n<td>Morgan Kaufmann/ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/vldb/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 40%\" />\n<col style=\"width: 11%\" />\n<col style=\"width: 40%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>CIKM</td>\n<td>ACM International Conference on Information and Knowledge Management</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/cikm/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>WSDM</td>\n<td>ACM International Conference on Web Search and Data Mining</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/wsdm/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>PODS</td>\n<td>ACM Symposium on Principles of Database Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/pods/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>DASFAA</td>\n<td>Database Systems for Advanced Applications</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/dasfaa/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>ECML-PKDD</td>\n<td>European Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/ecml/ http://dblp.uni-trier.de/db/conf/pkdd/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>ISWC</td>\n<td>IEEE International Semantic Web Conference</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/semweb/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>ICDM</td>\n<td>International Conference on Data Mining</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icdm/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>ICDT</td>\n<td>International Conference on Database Theory</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/icdt/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>EDBT</td>\n<td>International Conference on Extending DB Technology</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/edbt/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>CIDR</td>\n<td>International Conference on Innovative Data Systems Research</td>\n<td>Online Proceeding</td>\n<td>http://dblp.uni-trier.de/db/conf/cidr/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>SDM</td>\n<td>SIAM International Conference on Data Mining</td>\n<td>SIAM</td>\n<td>http://dblp.uni-trier.de/db/conf/sdm/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 50%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 32%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>APWeb</td>\n<td>Asia Pacific Web Conference</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/apweb/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>DEXA</td>\n<td>Database and Expert System Applications</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/dexa/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>ECIR</td>\n<td>European Conference on IR Research</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/ecir/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>ESWC</td>\n<td>Extended Semantic Web Conference</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/esws/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>WebDB</td>\n<td>International ACM Workshop on Web and Databases</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/webdb/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>ER</td>\n<td>International Conference on Conceptual Modeling</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/er/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>MDM</td>\n<td>International Conference on Mobile Data Management</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/mdm/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>SSDBM</td>\n<td>International Conference on Scientific and Statistical DB Management</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/ssdbm/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>WAIM</td>\n<td>International Conference on Web Age Information Management</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/waim/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>SSTD</td>\n<td>International Symposium on Spatial and Temporal Databases</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/ssd/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>PAKDD</td>\n<td>Pacific-Asia Conference on Knowledge Discovery and Data Mining</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/pakdd/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>WISE</td>\n<td>Web Information Systems Engineering</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/wise/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"计算机科学理论期刊\">计算机科学理论（期刊）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 37%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 43%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>TIT</td>\n<td>IEEE Transactions on Information Theory</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tit/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>IANDC</td>\n<td>Information and Computation</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/iandc/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>SICOMP</td>\n<td>SIAM Journal on Computing</td>\n<td>SIAM</td>\n<td>http://dblp.uni-trier.de/db/journals/siamcomp/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 8%\" />\n<col style=\"width: 31%\" />\n<col style=\"width: 19%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>TALG</td>\n<td>ACM Transactions on Algorithms</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/talg/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>TOCL</td>\n<td>ACM Transactions on Computational Logic</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tocl/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>TOMS</td>\n<td>ACM Transactions on Mathematical Software</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/toms/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>Algorithmica</td>\n<td>Algorithmica</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/algorithmica/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>CC</td>\n<td>Computational Complexity</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/cc/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>FAC</td>\n<td>Formal Aspects of Computing</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/fac/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>FMSD</td>\n<td>Formal Methods in System Design</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/fmsd/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>INFORMS</td>\n<td>INFORMS Journal on Computing</td>\n<td>INFORMS</td>\n<td>http://dblp.uni-trier.de/db/journals/informs/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>JCSS</td>\n<td>Journal of Computer and System Sciences</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/jcss/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>JGO</td>\n<td>Journal of Global Optimization</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/jgo/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>JSC</td>\n<td>Journal of Symbolic Computation</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/jsc/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>MSCS</td>\n<td>Mathematical Structures in Computer Science</td>\n<td>Cambridge University Press</td>\n<td>http://dblp.uni-trier.de/db/journals/mscs/</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td>TCS</td>\n<td>Theoretical Computer Science</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/tcs/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table style=\"width:100%;\">\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 8%\" />\n<col style=\"width: 29%\" />\n<col style=\"width: 23%\" />\n<col style=\"width: 34%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>ACTA</td>\n<td>Acta Informatica</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/acta/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>APAL</td>\n<td>Annals of Pure and Applied Logic</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/apal/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>DAM</td>\n<td>Discrete Applied Mathematics</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/dam/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>FUIN</td>\n<td>Fundamenta Informaticae</td>\n<td>IOS Press</td>\n<td>http://dblp.uni-trier.de/db/journals/fuin/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>LISP</td>\n<td>Higher-Order and Symbolic Computation</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/lisp/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>IPL</td>\n<td>Information Processing Letters</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/ipl/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>JCOMPLEXITY</td>\n<td>Journal of Complexity</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/jc/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>LOGCOM</td>\n<td>Journal of Logic and Computation</td>\n<td>Oxford University Press</td>\n<td>http://dblp.uni-trier.de/db/journals/logcom/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>JSL</td>\n<td>Journal of Symbolic Logic</td>\n<td>Association for Symbolic Logic</td>\n<td>http://dblp.uni-trier.de/db/journals/jsyml/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>LMCS</td>\n<td>Logical Methods in Computer Science</td>\n<td>LMCS</td>\n<td>http://dblp.uni-trier.de/db/journals/lmcs/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>SIDMA</td>\n<td>SIAM Journal on Discrete Mathematics</td>\n<td>SIAM</td>\n<td>http://dblp.uni-trier.de/db/journals/siamdm/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td></td>\n<td>Theory of Computing Systems</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/mst/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"计算机科学理论会议\">计算机科学理论（会议）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 49%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 33%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>STOC</td>\n<td>ACM Symposium on the Theory of Computing</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/stoc/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>SODA</td>\n<td>ACM-SIAM Symposium on Discrete Algorithms</td>\n<td>SIAM</td>\n<td>http://dblp.uni-trier.de/db/conf/soda/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>CAV</td>\n<td>Computer Aided Verification</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/cav/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>FOCS</td>\n<td>IEEE Annual Symposium on Foundations of Computer Science</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/focs/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>LICS</td>\n<td>IEEE Symposium on Logic in Computer Science</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/lics/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 45%\" />\n<col style=\"width: 12%\" />\n<col style=\"width: 31%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>SoCG</td>\n<td>ACM Symposium on Computational Geometry</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/compgeom/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>ESA</td>\n<td>European Symposium on Algorithms</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/esa/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>CCC</td>\n<td>IEEE Conference on Computational Complexity</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/coco/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>ICALP</td>\n<td>International Colloquium on Automata, Languages and Programming</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/icalp/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>CADE/IJCAR</td>\n<td>International Conference on Automated Deduction/International Joint Conference on Automated Reasoning</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/cade/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>CONCUR</td>\n<td>International Conference on Concurrency Theory</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/concur/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>HSCC</td>\n<td>International Conference on Hybrid Systems: Computation and Control</td>\n<td>Springer and ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/hybrid/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>SAT</td>\n<td>Theory and Applications of Satisfiability Testing</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/sat/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 4%\" />\n<col style=\"width: 36%\" />\n<col style=\"width: 31%\" />\n<col style=\"width: 24%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>CSL</td>\n<td>Computer Science Logic</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/csl/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>FMCAD</td>\n<td>Formal Methods in Computer-Aided Design</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/fmcad/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>FSTTCS</td>\n<td>Foundations of Software Technology and Theoretical Computer Science</td>\n<td>Indian Association for Research in Computing Science</td>\n<td>http://dblp.uni-trier.de/db/conf/fsttcs/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>DSAA</td>\n<td>IEEE International Conference on Data Science and Advanced Analytics</td>\n<td>IEEE</td>\n<td>https://dblp.uni-trier.de/db/conf/dsaa/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>ICTAC</td>\n<td>International Colloquium on Theoretical Aspects of Computing</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/ictac/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>IPCO</td>\n<td>International Conference on Integer Programming and Combinatorial Optimization</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/ipco/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>RTA</td>\n<td>International Conference on Rewriting Techniques and Applications</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/rta/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>ISAAC</td>\n<td>International Symposium on Algorithms and Computation</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/isaac/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>MFCS</td>\n<td>Mathematical Foundations of Computer Science</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/mfcs/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>STACS</td>\n<td>Symposium on Theoretical Aspects of Computer Science</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/stacs/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"计算机图形学与多媒体期刊\">计算机图形学与多媒体（期刊）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 48%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 36%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物名称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>TOG</td>\n<td>ACM Transactions on Graphics</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tog/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>TIP</td>\n<td>IEEE Transactions on Image Processing</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tip/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>TVCG</td>\n<td>IEEE Transactions on Visualization and Computer Graphics</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tvcg/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 45%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物名称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>TOMCCAP</td>\n<td>ACM Transactions on Multimedia Computing, Communications and Application</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tomccap/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>CAGD</td>\n<td>Computer Aided Geometric Design</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/cagd/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>CGF</td>\n<td>Computer Graphics Forum</td>\n<td>Wiley</td>\n<td>http://dblp.uni-trier.de/db/journals/cgf/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>CAD</td>\n<td>Computer-Aided Design</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/cad/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>GM</td>\n<td>Graphical Models</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/cvgip/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>TCSVT</td>\n<td>IEEE Transactions on Circuits and Systems for Video Technology</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tcsv/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>TMM</td>\n<td>IEEE Transactions on Multimedia</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tmm/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>JASA</td>\n<td>Journal of The Acoustical Society of America</td>\n<td>AIP</td>\n<td>http://scitation.aip.org/content/asa/journal/jasa</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>SIIMS</td>\n<td>SIAM Journal on Imaging Sciences</td>\n<td>SIAM</td>\n<td>http://dblp.uni-trier.de/db/journals/siamis/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>Speech Com</td>\n<td>Speech Communication</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/speech/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 41%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 44%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物名称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>CGTA</td>\n<td>Computational Geometry: Theory and Applications</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/comgeo/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>CAVW</td>\n<td>Computer Animation and Virtual Worlds</td>\n<td>Wiley</td>\n<td>http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)1546-427X</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>C&amp;G</td>\n<td>Computers &amp; Graphics</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/cg/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>DCG</td>\n<td>Discrete &amp; Computational Geometry</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/dcg/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>SPL</td>\n<td>IEEE Signal Processing Letters</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/spl/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>IET-IPR</td>\n<td>IET Image Processing</td>\n<td>IET</td>\n<td>http://dblp.uni-trier.de/db/journals/iet-ipr/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>JVCIR</td>\n<td>Journal of Visual Communication and Image Representation</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/jvcir/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>MS</td>\n<td>Multimedia Systems</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/mms/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>MTA</td>\n<td>Multimedia Tools and Applications</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/mta/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td></td>\n<td>Signal Processing</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/sigpro/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>SPIC</td>\n<td>Signal Processing: Image Communication</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/spic/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>TVC</td>\n<td>The Visual Computer</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/vc/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"计算机图形学与多媒体会议\">计算机图形学与多媒体（会议）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 35%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 48%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议名称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>ACM MM</td>\n<td>ACM International Conference on Multimedia</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/mm/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>SIGGRAPH</td>\n<td>ACM SIGGRAPH Annual Conference</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/siggraph/index.html</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>VR</td>\n<td>IEEE Virtual Reality</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/vr/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>IEEE VIS</td>\n<td>IEEE Visualization Conference</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/visualization/index.html</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 44%\" />\n<col style=\"width: 11%\" />\n<col style=\"width: 34%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议名称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>ICMR</td>\n<td>ACM SIGMM International Conference on Multimedia Retrieval</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/mir/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>SI3D</td>\n<td>ACM Symposium on Interactive 3D Graphics</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/si3d/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>SCA</td>\n<td>ACM/Eurographics Symposium on Computer Animation</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/sca/index.html</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>DCC</td>\n<td>Data Compression Conference</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/dcc/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>EG</td>\n<td>Eurographics</td>\n<td>Wiley/ Blackwell</td>\n<td>http://dblp.uni-trier.de/db/conf/eurographics/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>EuroVis</td>\n<td>Eurographics Conference on Visualization</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/vissym/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>SGP</td>\n<td>Eurographics Symposium on Geometry Processing</td>\n<td>Wiley/Blackwell</td>\n<td>http://dblp.uni-trier.de/db/conf/sgp/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>EGSR</td>\n<td>Eurographics Symposium on Rendering</td>\n<td>Wiley/Blackwell</td>\n<td>http://dblp.uni-trier.de/db/conf/rt/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>ICASSP</td>\n<td>IEEE International Conference on Acoustics, Speech and SP</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icassp/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>ICME</td>\n<td>IEEE International Conference on Multimedia &amp; Expo</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icmcs/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>ISMAR</td>\n<td>International Symposium on Mixed and Augmented Reality</td>\n<td>IEEE/ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/ismar/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>PG</td>\n<td>Pacific Graphics: The Pacific Conference on Computer Graphics and Applications</td>\n<td>Wiley/Blackwell</td>\n<td>http://dblp.uni-trier.de/db/conf/pg/index.html</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td>SPM</td>\n<td>Symposium on Solid and Physical Modeling</td>\n<td>SMA/Elsevier</td>\n<td>http://dblp.uni-trier.de/db/conf/sma/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table style=\"width:100%;\">\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 8%\" />\n<col style=\"width: 43%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 39%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议名称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td></td>\n<td>ACM Symposium on Virtual Reality Software and Technology</td>\n<td>ACM</td>\n<td>http://dblp2.uni-trier.de/db/conf/vrst/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>CASA</td>\n<td>Computer Animation and Social Agents</td>\n<td>Wiley</td>\n<td>http://dblp.uni-trier.de/db/conf/ca/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>CGI</td>\n<td>Computer Graphics International</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/cgi/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>INTERSPEECH</td>\n<td>Conference of the International Speech Communication Association</td>\n<td></td>\n<td>http://dblp.uni-trier.de/db/conf/interspeech/index.html</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>GMP</td>\n<td>Geometric Modeling and Processing</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/conf/gmp/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>PacificVis</td>\n<td>IEEE Pacific Visualization Symposium</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/apvis/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>3DV</td>\n<td>International Conference on 3D Vision</td>\n<td>IEEE</td>\n<td>https://dblp.uni-trier.de/db/conf/3dim/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>CAD/Graphics</td>\n<td>International Conference on Computer-Aided Design and Computer Graphics</td>\n<td>IEEE</td>\n<td>https://dblp.uni-trier.de/db/conf/cadgraphics/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>ICIP</td>\n<td>International Conference on Image Processing</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icip/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>MMM</td>\n<td>International Conference on Multimedia Modeling</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/mmm/index.html</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>PCM</td>\n<td>Pacific-Rim Conference on Multimedia</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/pcm/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>SMI</td>\n<td>Shape Modeling International</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/smi/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"人工智能期刊\">人工智能（期刊）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 46%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 35%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>AI</td>\n<td>Artificial Intelligence</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/ai/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>TPAMI</td>\n<td>IEEE Trans on Pattern Analysis and Machine Intelligence</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/pami/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>IJCV</td>\n<td>International Journal of Computer Vision</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/ijcv/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>JMLR</td>\n<td>Journal of Machine Learning Research</td>\n<td>MIT Press</td>\n<td>http://dblp.uni-trier.de/db/journals/jmlr/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 4%\" />\n<col style=\"width: 35%\" />\n<col style=\"width: 26%\" />\n<col style=\"width: 30%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>TAP</td>\n<td>ACM Transactions on Applied Perception</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tap/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>TSLP</td>\n<td>ACM Transactions on Speech and Language Processing</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tslp/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>AAMAS</td>\n<td>Autonomous Agents and Multi-Agent Systems</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/aamas/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td></td>\n<td>Computational Linguistics</td>\n<td>MIT Press</td>\n<td>http://dblp.uni-trier.de/db/journals/coling/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>CVIU</td>\n<td>Computer Vision and Image Understanding</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/cviu/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>DKE</td>\n<td>Data and Knowledge Engineering</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/dke/index.html</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td></td>\n<td>Evolutionary Computation</td>\n<td>MIT Press</td>\n<td>http://dblp.uni-trier.de/db/journals/ec/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>TAC</td>\n<td>IEEE Transactions on Affective Computing</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/taffco/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>TASLP</td>\n<td>IEEE Transactions on Audio, Speech, and Language Processing</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/taslp/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td></td>\n<td>IEEE Transactions on Cybernetics</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tcyb/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>TEC</td>\n<td>IEEE Transactions on Evolutionary Computation</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tec/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>TFS</td>\n<td>IEEE Transactions on Fuzzy Systems</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tfs/</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td>TNNLS</td>\n<td>IEEE Transactions on Neural Networks and learning systems</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tnn/</td>\n</tr>\n<tr class=\"even\">\n<td>14</td>\n<td>IJAR</td>\n<td>International Journal of Approximate Reasoning</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/ijar/</td>\n</tr>\n<tr class=\"odd\">\n<td>15</td>\n<td>JAIR</td>\n<td>Journal of Artificial Intelligence Research</td>\n<td>AAAI</td>\n<td>http://dblp.uni-trier.de/db/journals/jair/index.html</td>\n</tr>\n<tr class=\"even\">\n<td>16</td>\n<td></td>\n<td>Journal of Automated Reasoning</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/jar/</td>\n</tr>\n<tr class=\"odd\">\n<td>17</td>\n<td>JSLHR</td>\n<td>Journal of Speech, Language, and Hearing Research</td>\n<td>American Speech- Language Hearing Association</td>\n<td>http://jslhr.pubs.asha.org/</td>\n</tr>\n<tr class=\"even\">\n<td>18</td>\n<td></td>\n<td>Machine Learning</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/ml/</td>\n</tr>\n<tr class=\"odd\">\n<td>19</td>\n<td></td>\n<td>Neural Computation</td>\n<td>MIT Press</td>\n<td>http://dblp.uni-trier.de/db/journals/neco/</td>\n</tr>\n<tr class=\"even\">\n<td>20</td>\n<td></td>\n<td>Neural Networks</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/nn/</td>\n</tr>\n<tr class=\"odd\">\n<td>21</td>\n<td>PR</td>\n<td>Pattern Recognition</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/conf/par/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 38%\" />\n<col style=\"width: 16%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>TALLIP</td>\n<td>ACM Transactions on Asian and Low- Resource Language Information Processing</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/talip/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td></td>\n<td>Applied Intelligence</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/apin/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>AIM</td>\n<td>Artificial Intelligence in Medicine</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/artmed/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td></td>\n<td>Artificial Life</td>\n<td>MIT Press</td>\n<td>http://dblp.uni-trier.de/db/journals/alife/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td></td>\n<td>Computational Intelligence</td>\n<td>Wiley</td>\n<td>http://dblp.uni-trier.de/db/journals/ci/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td></td>\n<td>Computer Speech and Language</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/csl/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td></td>\n<td>Connection Science</td>\n<td>Taylor &amp; Francis</td>\n<td>http://dblp.uni-trier.de/db/journals/connection/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>DSS</td>\n<td>Decision Support Systems</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/dss/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>EAAI</td>\n<td>Engineering Applications of Artificial Intelligence</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/eaai/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td></td>\n<td>Expert Systems</td>\n<td>Blackwell/Wiley</td>\n<td>http://dblp.uni-trier.de/db/journals/es/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>ESWA</td>\n<td>Expert Systems with Applications</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/eswa/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td></td>\n<td>Fuzzy Sets and Systems</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/fss/</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td>TG</td>\n<td>IEEE Transactions on Games</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tciaig/</td>\n</tr>\n<tr class=\"even\">\n<td>14</td>\n<td>IET-CVI</td>\n<td>IET Computer Vision</td>\n<td>IET</td>\n<td>http://digital-library.theiet.org/content/journals/iet-cvi</td>\n</tr>\n<tr class=\"odd\">\n<td>15</td>\n<td></td>\n<td>IET Signal Processing</td>\n<td>IET</td>\n<td>http://digital-library.theiet.org/content/journals/iet-spr</td>\n</tr>\n<tr class=\"even\">\n<td>16</td>\n<td>IVC</td>\n<td>Image and Vision Computing</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/ivc/</td>\n</tr>\n<tr class=\"odd\">\n<td>17</td>\n<td>IDA</td>\n<td>Intelligent Data Analysis</td>\n<td>IOS Press</td>\n<td>http://dblp.uni-trier.de/db/journals/ida/</td>\n</tr>\n<tr class=\"even\">\n<td>18</td>\n<td>IJCIA</td>\n<td>International Journal of Computational Intelligence and Applications</td>\n<td>World Scientific</td>\n<td>http://dblp.uni-trier.de/db/journals/ijcia/</td>\n</tr>\n<tr class=\"odd\">\n<td>19</td>\n<td>IJIS</td>\n<td>International Journal of Intelligent Systems</td>\n<td>Wiley</td>\n<td>http://dblp.uni-trier.de/db/journals/ijis/</td>\n</tr>\n<tr class=\"even\">\n<td>20</td>\n<td>IJNS</td>\n<td>International Journal of Neural Systems</td>\n<td>World Scientific</td>\n<td>http://dblp.uni-trier.de/db/journals/ijns/</td>\n</tr>\n<tr class=\"odd\">\n<td>21</td>\n<td>IJPRAI</td>\n<td>International Journal of Pattern Recognition and Artificial Intelligence</td>\n<td>World Scientific</td>\n<td>http://dblp.uni-trier.de/db/journals/ijprai/</td>\n</tr>\n<tr class=\"even\">\n<td>22</td>\n<td>IJUFKS</td>\n<td>International Journal of Uncertainty, Fuzziness and Knowledge-Based System</td>\n<td>World Scientific</td>\n<td>https://dblp.uni-trier.de/db/journals/ijufks/</td>\n</tr>\n<tr class=\"odd\">\n<td>23</td>\n<td>IJDAR</td>\n<td>International Journal on Document Analysis and Recognition</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/ijdar/</td>\n</tr>\n<tr class=\"even\">\n<td>24</td>\n<td>JETAI</td>\n<td>Journal of Experimental and Theoretical Artificial Intelligence</td>\n<td>Taylor &amp; Francis</td>\n<td>http://dblp.uni-trier.de/db/journals/jetai/</td>\n</tr>\n<tr class=\"odd\">\n<td>25</td>\n<td>KBS</td>\n<td>Knowledge-Based Systems</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/kbs/</td>\n</tr>\n<tr class=\"even\">\n<td>26</td>\n<td></td>\n<td>Machine Translation</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/mt/</td>\n</tr>\n<tr class=\"odd\">\n<td>27</td>\n<td></td>\n<td>Machine Vision and Applications</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/mva/</td>\n</tr>\n<tr class=\"even\">\n<td>28</td>\n<td></td>\n<td>Natural Computing</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/nc/</td>\n</tr>\n<tr class=\"odd\">\n<td>29</td>\n<td>NLE</td>\n<td>Natural Language Engineering</td>\n<td>Cambridge University Press</td>\n<td>http://dblp.uni-trier.de/db/journals/nle/</td>\n</tr>\n<tr class=\"even\">\n<td>30</td>\n<td>NCA</td>\n<td>Neural Computing &amp; Applications</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/nca/</td>\n</tr>\n<tr class=\"odd\">\n<td>31</td>\n<td>NPL</td>\n<td>Neural Processing Letters</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/npl/</td>\n</tr>\n<tr class=\"even\">\n<td>32</td>\n<td></td>\n<td>Neurocomputing</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/ijon/</td>\n</tr>\n<tr class=\"odd\">\n<td>33</td>\n<td>PAA</td>\n<td>Pattern Analysis and Applications</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/paa/</td>\n</tr>\n<tr class=\"even\">\n<td>34</td>\n<td>PRL</td>\n<td>Pattern Recognition Letters</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/prl/</td>\n</tr>\n<tr class=\"odd\">\n<td>35</td>\n<td></td>\n<td>Soft Computing</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/soco/</td>\n</tr>\n<tr class=\"even\">\n<td>36</td>\n<td>WI</td>\n<td>Web Intelligence</td>\n<td>IOS Press</td>\n<td>http://dblp.uni-trier.de/db/journals/wias/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"人工智能会议\">人工智能（会议）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 47%\" />\n<col style=\"width: 11%\" />\n<col style=\"width: 30%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>AAAI</td>\n<td>AAAI Conference on Artificial Intelligence</td>\n<td>AAAI</td>\n<td>http://dblp.uni-trier.de/db/conf/aaai/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>NeurIPS</td>\n<td>Annual Conference on Neural Information Processing Systems</td>\n<td>MIT Press</td>\n<td>http://dblp.uni-trier.de/db/conf/nips/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>ACL</td>\n<td>Annual Meeting of the Association for Computational Linguistics</td>\n<td>ACL</td>\n<td>http://dblp.uni-trier.de/db/conf/acl/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>CVPR</td>\n<td>IEEE Conference on Computer Vision and Pattern Recognition</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/cvpr/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>ICCV</td>\n<td>International Conference on Computer Vision</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/iccv/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>ICML</td>\n<td>International Conference on Machine Learning</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/icml/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>IJCAI</td>\n<td>International Joint Conference on Artificial Intelligence</td>\n<td>Morgan Kaufmann</td>\n<td>http://dblp.uni-trier.de/db/conf/ijcai/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 44%\" />\n<col style=\"width: 11%\" />\n<col style=\"width: 35%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>COLT</td>\n<td>Annual Conference on Computational Learning Theory</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/colt/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>EMNLP</td>\n<td>Conference on Empirical Methods in Natural Language Processing</td>\n<td>ACL</td>\n<td>http://dblp.uni-trier.de/db/conf/emnlp/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>ECAI</td>\n<td>European Conference on Artificial Intelligence</td>\n<td>IOS Press</td>\n<td>http://dblp.uni-trier.de/db/conf/ecai/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>ECCV</td>\n<td>European Conference on Computer Vision</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/eccv/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>ICRA</td>\n<td>IEEE International Conference on Robotics and Automation</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icra/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>ICAPS</td>\n<td>International Conference on Automated Planning and Scheduling</td>\n<td>AAAI</td>\n<td>http://dblp.uni-trier.de/db/conf/aips/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>ICCBR</td>\n<td>International Conference on Case-Based Reasoning and Development</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/iccbr/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>COLING</td>\n<td>International Conference on Computational Linguistics</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/coling/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>KR</td>\n<td>International Conference on Principles of Knowledge Representation and Reasoning</td>\n<td>Morgan Kaufmann</td>\n<td>http://dblp.uni-trier.de/db/conf/kr/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>UAI</td>\n<td>International Conference on Uncertainty in Artificial Intelligence</td>\n<td>AUAI</td>\n<td>http://dblp.uni-trier.de/db/conf/uai/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>AAMAS</td>\n<td>International Joint Conference on Autonomous Agents and Multi- agent Systems</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/atal/index.html</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>PPSN</td>\n<td>Parallel Problem Solving from Nature</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/ppsn/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 38%\" />\n<col style=\"width: 26%\" />\n<col style=\"width: 26%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>AISTATS</td>\n<td>Artificial Intelligence and Statistics</td>\n<td>JMLR</td>\n<td>http://dblp.uni-trier.de/db/conf/aistats/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>ACCV</td>\n<td>Asian Conference on Computer Vision</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/accv/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>ACML</td>\n<td>Asian Conference on Machine Learning</td>\n<td>JMLR</td>\n<td>http://dblp.uni-trier.de/db/conf/acml/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>BMVC</td>\n<td>British Machine Vision Conference</td>\n<td>British Machine Vision Association</td>\n<td>http://dblp.uni-trier.de/db/conf/bmvc/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>NLPCC</td>\n<td>CCF International Conference on Natural Language Processing and Chinese Computing</td>\n<td>Springer</td>\n<td>https://dblp.uni-trier.de/db/conf/nlpcc/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>CoNLL</td>\n<td>Conference on Computational Natural Language Learning</td>\n<td>Association for Computational Linguistics</td>\n<td>http://dblp.uni-trier.de/db/conf/conll</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>GECCO</td>\n<td>Genetic and Evolutionary Computation Conference</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/gecco/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>ICTAI</td>\n<td>IEEE International Conference on Tools with Artificial Intelligence</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/ictai/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>IROS</td>\n<td>IEEEInternational Conference on Intelligent Robots and Systems</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/iros/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>ALT</td>\n<td>International Conference on Algorithmic Learning Theory</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/alt/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>ICANN</td>\n<td>International Conference on Artificial Neural Networks</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/icann/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>FG</td>\n<td>International Conference on Automatic Face and Gesture Recognition</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/fgr/</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td>ICDAR</td>\n<td>International Conference on Document Analysis and Recognition</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icdar/</td>\n</tr>\n<tr class=\"even\">\n<td>14</td>\n<td>ILP</td>\n<td>International Conference on Inductive Logic Programming</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/ilp/</td>\n</tr>\n<tr class=\"odd\">\n<td>15</td>\n<td>KSEM</td>\n<td>International conference on Knowledge Science, Engineering and Management</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/ksem/</td>\n</tr>\n<tr class=\"even\">\n<td>16</td>\n<td>ICONIP</td>\n<td>International Conference on Neural Information Processing</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/iconip/</td>\n</tr>\n<tr class=\"odd\">\n<td>17</td>\n<td>ICPR</td>\n<td>International Conference on Pattern Recognition</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icpr/</td>\n</tr>\n<tr class=\"even\">\n<td>18</td>\n<td>ICB</td>\n<td>International Joint Conference on Biometrics</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/icb/</td>\n</tr>\n<tr class=\"odd\">\n<td>19</td>\n<td>IJCNN</td>\n<td>International Joint Conference on Neural Networks</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/ijcnn/</td>\n</tr>\n<tr class=\"even\">\n<td>20</td>\n<td>PRICAI</td>\n<td>Pacific Rim International Conference on Artificial Intelligence</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/pricai/</td>\n</tr>\n<tr class=\"odd\">\n<td>21</td>\n<td>NAACL</td>\n<td>The Annual Conference of the North American Chapter of the Association for Computational Linguistics</td>\n<td>NAACL</td>\n<td>http://dblp.uni-trier.de/db/conf/naacl/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"人机交互与普适计算期刊\">人机交互与普适计算（期刊）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 42%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 39%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>TOCHI</td>\n<td>ACM Transactions on Computer-Human Interaction</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tochi/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>IJHCS</td>\n<td>International Journal of Human Computer Studies</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/ijmms/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 39%\" />\n<col style=\"width: 17%\" />\n<col style=\"width: 33%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>CSCW</td>\n<td>Computer Supported Cooperative Work</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/cscw/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>HCI</td>\n<td>Human Computer Interaction</td>\n<td>Taylor &amp; Francis</td>\n<td>http://dblp.uni-trier.de/db/journals/hhci/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td></td>\n<td>IEEE Transactions on Human-Machine Systems</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/thms/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>IWC</td>\n<td>Interacting with Computers</td>\n<td>Oxford University Press</td>\n<td>http://dblp.uni-trier.de/db/journals/iwc/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>IJHCI</td>\n<td>International Journal of Human-Computer Interaction</td>\n<td>Taylor &amp; Francis</td>\n<td>http://dblp.uni-trier.de/db/journals/ijhci/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>UMUAI</td>\n<td>User Modeling and User-Adapted Interaction</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/umuai/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 30%\" />\n<col style=\"width: 14%\" />\n<col style=\"width: 44%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>BIT</td>\n<td>Behaviour &amp; Information Technology</td>\n<td>Taylor &amp; Francis</td>\n<td>http://dblp.uni-trier.de/db/journals/behaviourIT/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>PUC</td>\n<td>Personal and Ubiquitous Computing</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/puc/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>PMC</td>\n<td>Pervasive and Mobile Computing</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/percom/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"人机交互与普适计算会议\">人机交互与普适计算（会议）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 52%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 32%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>CSCW</td>\n<td>ACM Conference on Computer Supported Cooperative Work and Social Computing</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/cscw</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>CHI</td>\n<td>ACM Conference on Human Factors in Computing Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/chi</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>UbiComp</td>\n<td>ACM International Conference on Ubiquitous Computing</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/huc/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 7%\" />\n<col style=\"width: 48%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 34%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>GROUP</td>\n<td>ACM Conference on Supporting Group Work</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/group/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>IUI</td>\n<td>ACM International Conference on Intelligent User Interfaces</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/iui/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>ITS</td>\n<td>ACM International Conference on Interactive Tabletops and Surfaces</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/tabletop/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>UIST</td>\n<td>ACM Symposium on User Interface Software and Technology</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/uist/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>ECSCW</td>\n<td>European Conference on Computer Supported Cooperative Work</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/ecscw/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>PERCOM</td>\n<td>IEEE International Conference on Pervasive Computing and Communications</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/percom/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>MobileHCI</td>\n<td>International Conference on Human Computer Interaction with Mobile Devices and Services</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/mhci/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 10%\" />\n<col style=\"width: 43%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>DIS</td>\n<td>ACM Conference on Designing Interactive Systems</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/ACMdis</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>ICMI</td>\n<td>ACM International Conference on Multimodal Interaction</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/icmi/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>ASSETS</td>\n<td>ACM SIGACCESS Conference on Computers and Accessibility</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/assets</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>GI</td>\n<td>Graphics Interface conference</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/graphicsinterface/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>UIC</td>\n<td>IEEE International Conference on Ubiquitous Intelligence and Computing</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/uic/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td></td>\n<td>IEEE World Haptics Conference</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/haptics/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>INTERACT</td>\n<td>IFIP TC13 Conference on Human-Computer Interaction</td>\n<td>IFIP</td>\n<td>http://dblp.uni-trier.de/db/conf/interact/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>IDC</td>\n<td>Interaction Design and Children</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/acmidc/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>CollaborateCom</td>\n<td>International Conference on Collaborative Computing: Networking, Applications and Worksharing</td>\n<td>Springer</td>\n<td>http://collaboratecom.org</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>CSCWD</td>\n<td>International Conference on Computer Supported Cooperative Work in Design</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/cscwd/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>CoopIS</td>\n<td>International Conference on Cooperative Information Systems</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/coopis/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td>MobiQuitous</td>\n<td>International Conference on Mobile and Ubiquitous Systems: Computing, Networking and Services</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/mobiquitous/</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td>AVI</td>\n<td>International Working Conference on Advanced Visual Interfaces</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/avi/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"交叉综合新兴期刊\">交叉/综合/新兴（期刊）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 4%\" />\n<col style=\"width: 11%\" />\n<col style=\"width: 26%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 50%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>JACM</td>\n<td>Journal of the ACM</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/jacm/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>Proc. IEEE</td>\n<td>Proceedings of the IEEE</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/pieee/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 38%\" />\n<col style=\"width: 19%\" />\n<col style=\"width: 33%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td></td>\n<td>Bioinformatics</td>\n<td>Oxford University Press</td>\n<td>http://dblp.uni-trier.de/db/journals/bioinformatics/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td></td>\n<td>Briefings in Bioinformatics</td>\n<td>Oxford University Press</td>\n<td>http://dblp.uni-trier.de/db/journals/bib/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>Cognition</td>\n<td>Cognition：International Journal of Cognitive Science</td>\n<td>Elsevier</td>\n<td>http://www.journals.elsevier.com/cognition/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>TASAE</td>\n<td>IEEE Transactions on Automation Science and Engineering</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tase/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>TGARS</td>\n<td>IEEE Transactions on Geoscience and Remote Sensing</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tgrs/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>TITS</td>\n<td>IEEE Transactions on Intelligent Transportation Systems</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tits/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>TMI</td>\n<td>IEEE Transactions on Medical Imaging</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/tmi/</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>TR</td>\n<td>IEEE Transactions on Robotics</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/trob/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td>TCBB</td>\n<td>IEEE-ACM Transactions on Computational Biology and Bioinformatics</td>\n<td>IEEE/ACM</td>\n<td>http://dblp.uni-trier.de/db/journals/tcbb/</td>\n</tr>\n<tr class=\"even\">\n<td>10</td>\n<td>JCST</td>\n<td>Journal of Computer Science and Technology</td>\n<td>SCIENCE PRESS/Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/jcst/</td>\n</tr>\n<tr class=\"odd\">\n<td>11</td>\n<td>JAMIA</td>\n<td>Journal of the American Medical Informatics Association</td>\n<td>BMJ Journals</td>\n<td>http://dblp.uni-trier.de/db/journals/jamia/</td>\n</tr>\n<tr class=\"even\">\n<td>12</td>\n<td></td>\n<td>PLOS Computational Biology</td>\n<td>Public Library of Science</td>\n<td>http://dblp.uni-trier.de/db/journals/ploscb/</td>\n</tr>\n<tr class=\"odd\">\n<td>13</td>\n<td></td>\n<td>Science China Information Sciences</td>\n<td>Science in China Press/Springer</td>\n<td>http://dblp.uni-trier.de/db/journals/chinaf/</td>\n</tr>\n<tr class=\"even\">\n<td>14</td>\n<td></td>\n<td>The Computer Journal</td>\n<td>Oxford University Press</td>\n<td>http://dblp.uni-trier.de/db/journals/cj/</td>\n</tr>\n<tr class=\"odd\">\n<td>15</td>\n<td></td>\n<td>World Wide Web Journal</td>\n<td>Springer</td>\n<td>https://www.springer.com/journal/11280</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 2%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 34%\" />\n<col style=\"width: 15%\" />\n<col style=\"width: 41%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>刊物简称</th>\n<th>刊物全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td></td>\n<td>BMC Bioinformatics</td>\n<td>BioMed Central</td>\n<td>http://dblp.uni-trier.de/db/journals/bmcbi/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td></td>\n<td>Cybernetics and Systems</td>\n<td>Taylor &amp; Francis</td>\n<td>http://dblp.uni-trier.de/db/journals/cas/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>FCS</td>\n<td>Frontiers of Computer Science</td>\n<td>Higher Education Press</td>\n<td>http://dblp.uni-trier.de/db/journals/fcsc/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td></td>\n<td>IEEE Geoscience and Remote Sensing Letters</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/lgrs/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>JBHI</td>\n<td>IEEE Journal of Biomedical and Health Informatics</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/journals/titb/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>TBD</td>\n<td>IEEE Transactions on Big Data</td>\n<td>IEEE</td>\n<td>https://dblp.uni-trier.de/db/journals/tbd/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td></td>\n<td>IET Intelligent Transport Systems</td>\n<td>IET</td>\n<td>http://digital-library.theiet.org/content/journals/iet-its</td>\n</tr>\n<tr class=\"even\">\n<td>8</td>\n<td>JBI</td>\n<td>Journal of Biomedical Informatics</td>\n<td>Elsevier</td>\n<td>https://dblp.uni-trier.de/db/journals/jbi/</td>\n</tr>\n<tr class=\"odd\">\n<td>9</td>\n<td></td>\n<td>Medical Image Analysis</td>\n<td>Elsevier</td>\n<td>http://dblp.uni-trier.de/db/journals/mia/</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"交叉综合新兴会议\">交叉/综合/新兴（会议）</h2>\n<p><strong>A类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 4%\" />\n<col style=\"width: 8%\" />\n<col style=\"width: 41%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 39%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网站</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>WWW</td>\n<td>International World Wide Web Conferences</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/www/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>RTSS</td>\n<td>Real-Time Systems Symposium</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/rtss/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>B类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 46%\" />\n<col style=\"width: 12%\" />\n<col style=\"width: 31%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>CogSci</td>\n<td>Cognitive Science Society Annual Conference</td>\n<td>Psychology Press</td>\n<td>https://dblp.uni-trier.de/db/conf/cogsci/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>BIBM</td>\n<td>IEEE International Conference on Bioinformatics and Biomedicine</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/bibm/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>EMSOFT</td>\n<td>International Conference on Embedded Software</td>\n<td>ACM/IEEE/IFIP</td>\n<td>http://dblp.uni-trier.de/db/conf/emsoft/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>ISMB</td>\n<td>International conference on Intelligent Systems for Molecular Biology</td>\n<td>Oxford Journals</td>\n<td>http://www.iscb.org/about-ismb</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>RECOMB</td>\n<td>International Conference on Research in Computational Molecular Biology</td>\n<td>Springer</td>\n<td>http://dblp.uni-trier.de/db/conf/recomb/</td>\n</tr>\n</tbody>\n</table>\n<p><strong>C类</strong></p>\n<table>\n<colgroup>\n<col style=\"width: 3%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 45%\" />\n<col style=\"width: 10%\" />\n<col style=\"width: 34%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>序号</th>\n<th>会议简称</th>\n<th>会议全称</th>\n<th>出版社</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>AMIA</td>\n<td>American Medical Informatics Association Annual Symposium</td>\n<td>AMIA</td>\n<td>http://dblp.uni-trier.de/db/conf/amia/</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>APBC</td>\n<td>Asia Pacific Bioinformatics Conference</td>\n<td>BioMed Central</td>\n<td>http://dblp.uni-trier.de/db/conf/apbc/</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td></td>\n<td>IEEE International Conference on Big Data</td>\n<td>IEEE</td>\n<td>https://dblp.uni-trier.de/db/conf/bigdataconf/</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td></td>\n<td>IEEE International Conference on Cloud Computing</td>\n<td>IEEE</td>\n<td>http://dblp.uni-trier.de/db/conf/IEEEcloud/</td>\n</tr>\n<tr class=\"odd\">\n<td>5</td>\n<td>SMC</td>\n<td>IEEE International Conference on Systems, Man, and Cybernetics</td>\n<td>IEEE</td>\n<td>https://dblp.uni-trier.de/db/conf/smc/</td>\n</tr>\n<tr class=\"even\">\n<td>6</td>\n<td>COSIT</td>\n<td>International Conference on Spatial Information Theory</td>\n<td>ACM</td>\n<td>http://dblp.uni-trier.de/db/conf/cosit/</td>\n</tr>\n<tr class=\"odd\">\n<td>7</td>\n<td>ISBRA</td>\n<td>International Symposium on Bioinformatics Research and Applications</td>\n<td>Springer</td>\n<td>https://dblp.uni-trier.de/db/conf/isbra/</td>\n</tr>\n</tbody>\n</table>\n","categories":["Others"],"tags":["Others"]},{"title":"BGFL-Improve-GraphDiv","url":"/2022/10/26/BGFL-Improve-GraphDiv/","content":"<p><strong>Paper Name</strong></p>\n<blockquote>\n<p>Web: <a href=\"http://phoenixdai.cn\">http://phoenixdai.cn</a></p>\n<p>Citing info.</p>\n</blockquote>\n<p><strong>Solve probs, Merits</strong></p>\n<p><strong>Main work</strong></p>\n<p><strong>Conclusion</strong></p>\n<hr />\n<p><span id=\"more\"></span></p>\n<h2 id=\"preliminaries\">Preliminaries</h2>\n<h3 id=\"super-graph\">Super Graph</h3>\n<p><strong>超图是什么？</strong></p>\n<p>简单的来说，对于我们熟悉的图而言，它的一个边（edge）只能和<strong>两个</strong>点连接；而对于超图来讲，人们定义它的边（这里叫超边，hyperedge, nets）可以和<strong>任意个数</strong>的顶点连接。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211061809284.png\" /></p>\n<p>上图看的很清楚，所谓的超图就是每个边连接的顶点数不再是两个，而是任意一个。而<strong>均匀超图</strong>的概念就是每一个边所连接的点的个数是相同的，即：</p>\n<ul>\n<li>2-均匀超图 = 图</li>\n</ul>\n<p>在数学层面上，超图的定义为<span class=\"math inline\">\\(H = (X, E)\\)</span>，其中<span class=\"math inline\">\\(X\\)</span>是点（vertices）的集合，<span class=\"math inline\">\\(E\\)</span>是边的集合，这里的<span class=\"math inline\">\\(E\\)</span>就变成了顶点集合<span class=\"math inline\">\\(X\\)</span>的子集，因为每一个边都由<strong>若干个点的集合</strong>来表示。每一条超边中的点我们称之为针（pin）</p>\n<p>加权无向超图：<span class=\"math inline\">\\(H=(V,E,c,\\omega)\\)</span>，其中<span class=\"math inline\">\\(c\\)</span>是顶点权重，<span class=\"math inline\">\\(\\omega\\)</span>是超边的权重</p>\n<h3 id=\"标签传播算法\">标签传播算法</h3>\n<p>标签传播算法简称<strong>LPA</strong>，是一种常用的半监督学习算法，用于向未标记（unlabel）的样本分配标签。LPA的核心思想非常简单：<strong>相似的数据应该拥有同样的标签。</strong>标签传播算法通过将所有样本依据相似性构建一个有权重的图，然后各个样本在其相邻的样本之间进行标签传播。</p>\n<p>算法图如下所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211062034003.png\" /></p>\n<ul>\n<li>红色的数字代表对应节点的权重</li>\n<li>黑色的数字代表边上的权重。</li>\n</ul>\n<p>最终的输出图如下所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211062036637.png\" /></p>\n<p><strong>LPA原理：</strong></p>\n<p>对于网络中的每一个节点，在初始阶段，LPA对每个节点初始化一个唯一的标签，在每次的迭代过程中，每个节点<strong>根据与其相连的节点所属的标签改变自己的标签</strong>，更改的原则是选择与其相连的节点中所属<strong>标签最多的社区标签</strong>为自己的社区标签，这便是标签传播的含义。</p>\n<p>LPA包括两大步骤：1. 构造相似矩阵；2. 标签传播</p>\n<p>构造相似矩阵：</p>\n<p>因为LPA依赖图，所以我们第一步要构建一个Graph，图的节点就是我们的数据点，包含了Label和Unlabel的数据；边代表两个节点之间的相似度，相似度的计算公式如下所示，<span class=\"math inline\">\\(\\alpha\\)</span>是超参： <span class=\"math display\">\\[\nw_{ij}=exp(-\\frac{||x_i-x_j||^2}{\\alpha^2})\n\\]</span> 标签传播：</p>\n<p>在一开始，每一个节点都有自己的标签，即每一个节点都属于不同的社区，当社区的标签在节点间传播的时候，紧密相连的节点迅速取得一致的标签</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211062044237.png\" /></p>\n<ol type=\"1\">\n<li>对于c节点，由于周围节点都属于不同的社区，所以随机选择a社区</li>\n<li>对于d节点，相邻属于a社区的最多，所以将标签改成a</li>\n<li>同理对于b节点，相邻的节点中都是属于a社区的，所以标签改变成a</li>\n</ol>\n<p>在标签的更新中分为：同步更新；异步更新</p>\n<p>同步更新是指对于一个节点<span class=\"math inline\">\\(x\\)</span>，在<span class=\"math inline\">\\(t\\)</span>时刻的更新，根据的是邻居节点在<span class=\"math inline\">\\(t-1\\)</span>时刻的标签。 <span class=\"math display\">\\[\nC_x(t)=f(C_{x_1}(t-1),...,C_{x_k}(t-1))\n\\]</span> 但是这种问题可能会导致标签震荡如下图：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211062048700.png\" /></p>\n<p>在第一步的更新中，若左侧节点的标签更改为 a，右侧节点的标签更改为 b，在第二步中，左侧的节点又会更改为 b，右侧的节点又会更改为 a，如此往复，两边的标签会在社区标签 a 和 b 间不停地震荡。</p>\n<p>对于异步更新方式： <span class=\"math display\">\\[\nC_x(t)=f(C_{x_{i1}}(t),...,C_{x_{im}}(t),C_{x_{i(m+1)}}(t-1),...,C_{x_{ik}}(t-1))\n\\]</span> 其中，邻居节点<span class=\"math inline\">\\(x_{i1},...,x_{im}\\)</span>的社区标签在第t代已经更新过，则使用其最新的社区标签。而邻居节点<span class=\"math inline\">\\(x_{i(m+1),...,x_{ik}}\\)</span>在第<span class=\"math inline\">\\(t\\)</span>代时还没有更新，则对于这些邻居节点还是用其在第<span class=\"math inline\">\\(t-1\\)</span>代时的社区标签。</p>\n<h3 id=\"fm-algorithm\">FM Algorithm</h3>\n<p>FM算法是一种改进网络分区的线性时间启发式算法，旨在减少不同分区之间的连接数。</p>\n<p>FM主要用在超图的<em>双分区问题</em>。</p>\n<p><strong>For Example</strong></p>\n<p>我们对下面的电路图进行超图建模：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211071033532.png\" /></p>\n<ul>\n<li>(a)图中的每一个导线都连接多个门电路，这就是超图的超边</li>\n<li>例如a,e,c由一根导线连接</li>\n<li>(b)图即超图的直观表现</li>\n</ul>\n<p><strong>步骤如下：</strong></p>\n<ol type=\"1\">\n<li><p>初始化分区</p>\n<p>左图为超图，不同的线代表不同的超边，右图是超边集合</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211071038811.png\" /></p>\n<p>现随机将超图进行双分区，节点：a, c, d, g 在左边；节点：d, e, f, h在右边</p></li>\n<li><p>计算gain值和初始化</p>\n<ul>\n<li><span class=\"math inline\">\\(FS(i)\\)</span>：每当有超边包含节点<span class=\"math inline\">\\(i\\)</span>，并且有且仅有<span class=\"math inline\">\\(i\\)</span>在<span class=\"math inline\">\\(i\\)</span>所属的分区：<span class=\"math inline\">\\(FS(i)=FS(i)+1\\)</span>，初始值为0</li>\n<li><span class=\"math inline\">\\(TE(i)\\)</span>：每当有超边包含节点<span class=\"math inline\">\\(i\\)</span>，且超边中所有的节点都在<span class=\"math inline\">\\(i\\)</span>所属分区：<span class=\"math inline\">\\(TE(i)=TE(i)+1\\)</span>，初始值为0</li>\n<li><span class=\"math inline\">\\(gain(i)\\)</span>：<span class=\"math inline\">\\(FS(i)+TE(i)\\)</span></li>\n</ul>\n<p>对于元件c，c包含在超边<span class=\"math inline\">\\(n1=\\{a,c,e\\}，n3=\\{c,f,e\\}，n2=\\{b,c,d\\}\\)</span>中，其中在超边n3中，只有元件c在左边的集合中，其他的元件都在右边的集合中，因此<span class=\"math inline\">\\(FS(c)+1\\)</span>。</p>\n<p>并没有超边中所有的元组都在左边，因此<span class=\"math inline\">\\(TE(c)=0\\)</span>。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211071102464.png\" /></p></li>\n<li><p>第一次移动</p>\n<p>由上面第二步计算出所有元件的gain值，其中元件g和元件e的值都是2是最大的，而且对于g和e都是没有移动约束的。</p>\n<p><strong>移动约束：尽量使得两边的元件数量维持一致，不能有太大的偏差，左边的数量和右边的数量要尽量维持相等</strong></p>\n<p>根据字母顺序，将e从右边移动到左边，重新计算gain值。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211071106259.png\" /></p></li>\n<li><p>第二次移动</p>\n<p>虽然经过了第一次的移动<span class=\"math inline\">\\(gain(f)\\)</span>的值是最大的，但是f有区域的移动约束（<strong>要是移动了f，便导致了左边的元件数量远远大于右边的元件数量，所以f不能移动</strong>），选择d元件进行移动</p>\n<p><em>注意：已经移动过的节点不需要再重新计算gain，避免产生算法不收敛的情况。</em></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211071108206.png\" /></p></li>\n<li><p>一直移动到所有的点都不需要重新计算gain。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211081537063.png\" /></p></li>\n</ol>\n<h3 id=\"graph-coarsening\">Graph Coarsening</h3>\n<p><a href=\"https://www.youtube.com/watch?v=o0mhbHdfgTA\">Graph Coarsening视频讲解</a></p>\n<p>图的粗化（graph coarsening）是一种图压缩的算法。</p>\n<p>计算出的聚类被压缩以获得一个更粗的图。 收缩聚类的工作方式如下：<strong>聚类的每个块收缩为单个节点。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211071229778.png\" /></p>\n<ul>\n<li>节点的权重设置为原来块中所有节点权重的和</li>\n<li>如果聚类中的两个对应块在G中相邻，则收缩图中的两个节点U和V之间存在边，即块U和块V至少有一条边相连，边的权重设为在聚类的块A和块B之间运行的边的权重之和</li>\n</ul>\n<hr />\n<h2 id=\"复杂网络的平衡图分割\">复杂网络的平衡图分割</h2>\n<blockquote>\n<p>网址：<a href=\"https://ieeexplore.ieee.org/document/7859409\">https://ieeexplore.ieee.org/document/7859409</a></p>\n<p>Meyerhenke, Henning, Peter Sanders, and Christian Schulz. \"Parallel graph partitioning for complex networks.\" <em>IEEE Transactions on Parallel and Distributed Systems</em> 28.9 (2017): 2625-2638.</p>\n</blockquote>\n<h3 id=\"带有尺寸约束的标签传播算法\">带有尺寸约束的标签传播算法</h3>\n<blockquote>\n<p>网址：<a href=\"https://arxiv.org/abs/1402.3281\">https://arxiv.org/abs/1402.3281</a></p>\n<p>Meyerhenke, Henning, Peter Sanders, and Christian Schulz. \"Partitioning complex networks via size-constrained clustering.\" <em>International Symposium on Experimental Algorithms</em>. Springer, Cham, 2014.</p>\n</blockquote>\n<p>算法大体流程：先利用标签传播算法进行聚类(有修改)，然后利用图的粗化将图压缩。</p>\n<p>本论文意图将图分割成大小相近的多个块，所以定义了一个约束条件，即每一个块不能超过的权重大小<span class=\"math inline\">\\(L_{max}\\)</span>。 <span class=\"math display\">\\[\nL_{max}=(1+\\epsilon)(\\frac{C(v)}{k})\n\\]</span> 其中<span class=\"math inline\">\\(C(v)\\)</span>是图中所有节点权重的和，<span class=\"math inline\">\\(\\epsilon\\)</span>是一个范围参数</p>\n<p>我们对于每一个节点都设置一个属于他们自己的ID，然后随机遍历每一个节点，将这个节点移动到与之最为相连(边的权重最大)的块中。但是我们要对其尺寸进行约束，每一个block的上界规定为上文的<span class=\"math inline\">\\(max(max_vc(v),W)\\)</span>。我们定义如果节点<span class=\"math inline\">\\(v\\)</span>归入到<span class=\"math inline\">\\(V_l\\)</span>块中，这个块的权重并不会超过上限，那么这个块认为是合格的；反之，则认为其不合格。所以在遍历每一个节点，这个节点要被归入到合格的块中关联最紧密的那个。这样在收缩聚类之后，每一个块都符合约束。上文中的<span class=\"math inline\">\\(W=\\frac{L_{max}}{f}\\)</span>，<span class=\"math inline\">\\(f\\)</span>是调优参数。</p>\n<p>回忆传统的标签传播算法，LPA算法是随机遍历每一个节点，在这里我们规定：<strong>首先遍历度小的节点</strong></p>\n<p>聚类+粗化的过程将被递归执行下去，直到图已经变得足够小（每一个粗节点都被划分到了同一个类中）</p>\n<h3 id=\"parallelization\">Parallelization</h3>\n<p><strong>并行化的标签传播（聚类）：</strong></p>\n<p>首先我们将图分成不同的子图放入到每一个PE（处理单元 process element）中，每一个PE获得的子图是节点ID在<span class=\"math inline\">\\([a,b]\\)</span>中的节点，以及这些节点相关的边，还有一些边的端点（不在区间范围里）（我们称作为ghost节点）。这就意味着，每一个PE可能有将该子图连接到其他PE中的子图中的边。</p>\n<p>每一个PE并不使用输入图的节点ID（<span class=\"math inline\">\\([a,b]\\)</span>），而是将其映射到<span class=\"math inline\">\\([0,n_p-1]\\)</span>，其中<span class=\"math inline\">\\(n_p\\)</span>是子图中的节点数量（这里是包括ghost的）。</p>\n<p>-&gt; 区间内节点的映射规律为：<span class=\"math inline\">\\(i-a\\)</span></p>\n<p>-&gt; ghost节点的映射到剩下的<span class=\"math inline\">\\([b-a, n_p-(b-a+1)]\\)</span>，先后顺序根据遍历顺序确定。</p>\n<p>我们将区间内节点，下文称为<strong>本地节点</strong>存储到一个数组中，其本地ID和全局ID仅仅相差<span class=\"math inline\">\\(a\\)</span>；将ghost节点通过哈希表存储全局ID到本地ID的映射，并将其存储到另一个数组中。</p>\n<p>我们在每一个PE中都执行PLA，这里注意，由于每一个PE中的节点的ID都被映射到了<span class=\"math inline\">\\([0,n_p-1]\\)</span>中，所以节点的集群ID也落在这个区间中。</p>\n<p><strong>平衡、尺寸约束：</strong></p>\n<p>这里文章中使用了两种不同的办法来保持平衡，一个用在粗化中，另一个用在去粗化中。在粗化的过程中，块比较多，所以约束比较软（<span class=\"math inline\">\\(\\frac{L_{max}}{f}\\)</span>）；在去粗化中，块比较少，约束比较严（<span class=\"math inline\">\\(L_{max}\\)</span>）。</p>\n<p>-&gt; 在粗化过程中，PE只维护和更新其本地节点和ghost节点的块的局部节点权重。 由于标签传播算法的初始化方式，每个PE一开始就知道本地节点块和鬼节点块的准确权重。 然后标签传播使用本地信息来绑定块权重。 一旦节点改变其块，本地块权重就会更新。</p>\n<p>-&gt; 在去粗化中，每一个PE先本地计算自己块的精确权重，然后将本地块的权重聚合并广播到所有的PE中。现在每个PE都知道所有k个区块的全局区块权重。利用LPA更新本地权重。</p>\n<p><strong>并行收缩与去粗化：</strong></p>\n<p>-&gt; 并行收缩：每一个PE上聚类的ID可以任意分布在<span class=\"math inline\">\\([0,n-1]\\)</span>上（n是当前层次下所有的节点数量），因此通过寻找不同聚类id的数量（粗节点的数量）来启动收缩算法。因此，每个PE <span class=\"math inline\">\\(p\\)</span> 计算ID在区间<span class=\"math inline\">\\(I_p=p[\\frac{n}{P}]+1...(p+1)[\\frac{n}{P}]\\)</span>的不同聚类数量（<span class=\"math inline\">\\(P\\)</span>是使用PE的总数）<strong><em>对应前文的<span class=\"math inline\">\\([a,b]\\)</span>。</em></strong>这也就意味着每个PE要迭代本地的节点，<u>收集非本地的集群ID <span class=\"math inline\">\\(a\\)</span>（<span class=\"math inline\">\\(a \\notin I_p\\)</span>），然后将非本地集群的ID发送给对应的PE。</u></p>\n<p>设<span class=\"math inline\">\\(n&#39;\\)</span>是不同聚类ID数，这也是执行收缩后的粗节点数。下一步就是要计算从<span class=\"math inline\">\\(C:[0,n-1] \\to [0,n&#39;-1]\\)</span>的映射。当映射结束后，新的PE <span class=\"math inline\">\\(p\\)</span> 就会负责<span class=\"math inline\">\\(p[\\frac{n&#39;}{P}]+1...(p+1)[\\frac{n&#39;}{P}]\\)</span>的子图。</p>\n<p>-&gt; 去粗化：并行去粗化算法实现简单。 每个PE知道子图中所有节点的粗节点（通过映射<span class=\"math inline\">\\(C\\)</span>）。 因此，PE从保存相应粗节点的PE请求代表精细节点的粗节点的块ID。</p>\n<p><strong>整个并行系统的工作方式如下：</strong></p>\n<p>我们使用并行尺寸约束标记传播算法的迭代来计算图簇并并行收缩它们。 我们递归地这样做，直到剩余的图剩下不到20,000个节点。 然后在每个PE上收集分布式粗图，即每个PE拥有的完整最粗图的副本。 将该图作为粗粒度分布式进化算法Kaffpae的输入，得到其高质量的K-划分（我们已经修改了Kaffpae，以使用组合操作，这些操作也使用了上面基于聚类的粗化方案）。 然后将进化算法的最优解广播给所有PEs，这些PEs将解转移到分布粗图的局部。 然后，我们使用并行去粗化算法将当前级的解传递到下一个更细的级，并在原划分问题的大小约束下（设置<span class=\"math inline\">\\(W=L_{max}\\)</span>)应用并行标记传播算法的r次迭代来改进当前级的解。 我们在层次结构的每一个层次上都这样做，并最终获得输入网络的良好分区。</p>\n<hr />\n<h2 id=\"深度多层图分割\">深度多层图分割</h2>\n<blockquote>\n<p>网址：<a href=\"https://arxiv.org/abs/2105.02022\">https://arxiv.org/abs/2105.02022</a></p>\n<p>Gottesbüren, Lars, et al. \"Deep multilevel graph partitioning.\" <em>arXiv preprint arXiv:2105.02022</em> (2021).</p>\n</blockquote>\n<h3 id=\"notation\"><strong>Notation</strong></h3>\n<p><strong>本文章的平衡约束设置为：</strong><span class=\"math inline\">\\(\\forall i \\in \\{1..k\\}:c(V_i)\\leq L_{max,k}=max\\{(1+\\epsilon)\\frac{c(V)}{k},\\frac{c(V)}{k}+max_vc(v)\\}\\)</span></p>\n<ul>\n<li>这里有两个约束，并不在是像其他文章只有第一个约束，这里的最大阈值取了两个值的最大值</li>\n<li>原因是：找到<span class=\"math inline\">\\((1+\\epsilon)\\frac{c(V)}{k}\\)</span>是一个<em>NP完全问题</em>，而<span class=\"math inline\">\\(L_{max,k}\\)</span>则不是</li>\n</ul>\n<p><strong>文章的目标：</strong></p>\n<ul>\n<li><p>将图划分成尽可能均匀的子图</p></li>\n<li><p><em><u>切割边的权重是最小的</u></em></p>\n<blockquote>\n<p>这里可能和BGFL的思路有一些不同，因为我们进行分组是要尽可能组与组之间的差异足够大，组内的差异足够小，所以应该是让分割边的权重最大。🤔</p>\n</blockquote></li>\n</ul>\n<p><strong>多层级图划分：</strong></p>\n<p>这是许多高质量图划分器采用的范式：1. 粗化阶段；2. 初始划分；3. 细化</p>\n<p>-&gt; 粗化阶段：算法建立一个较小的图，根据聚类方法，将同一类的图压缩成一个节点</p>\n<p>-&gt; 初始划分：当粗图的节点数低于某一个阈值或粗化算法收敛，计算最粗图的一个划分</p>\n<p>-&gt; 细化：撤销粗化执行的操作，在更精细的图上局部改进</p>\n<p>使用多层级范式将图划分为k个block，一般有两种办法：1. 直接k-way划分；2. 递归二划分</p>\n<p>-&gt; 直接k-way：将图粗化到只剩下<span class=\"math inline\">\\(k·C\\)</span>个节点后，计算k-way分区</p>\n<p>-&gt; 递归二划分：首先计算一个二划分<span class=\"math inline\">\\(\\{V_1, V_2\\}\\)</span>，然后将<span class=\"math inline\">\\(V_1\\)</span>分成<span class=\"math inline\">\\(\\frac{k}{2}\\)</span>块，同理对待<span class=\"math inline\">\\(V_2\\)</span>，之后变成问题：<strong>在两个子图中分<span class=\"math inline\">\\(\\frac{k}{2}\\)</span>块，</strong>继续重复操作。</p>\n<p>==许多使用直接k-way在初始划分的时候也会选择递归二划分。==</p>\n<p><strong>尺寸约束的标签传播算法：</strong></p>\n<p><a href=\"#带有尺寸约束的标签传播算法\">带有尺寸约束的标签传播算法</a></p>\n<p><strong>保持平衡约束：</strong></p>\n<p>为了满足平衡约束：<span class=\"math inline\">\\((1+\\epsilon)\\frac{c(V)}{k}\\)</span>，这个问题是一个NP完全问题，因此他可以简化为在相同的并行机器上的调度作业问题，因此，人们采用了一些技术：通过惩罚大权重的节点的收缩 / 强制执行节点权重的严格上限 来防止生成重节点。</p>\n<p><u>但是如果我们将<span class=\"math inline\">\\(L_{k}\\)</span>更换成<span class=\"math inline\">\\(L_{max,k}\\)</span>，则可以在多项式时间找到平衡分区</u></p>\n<p>如果在递归双分区的时候，对每个双分区输入<span class=\"math inline\">\\(\\epsilon\\)</span>，那么在最后的k-way分区的时候就会违反约束。</p>\n<p>Therefore，Kahypar提出了一种办法：通过递归二分法获得k-way分区时单独调整每个二分法的不平衡比<span class=\"math inline\">\\(\\epsilon\\)</span>来使得最终的k分区平衡。</p>\n<p>设<span class=\"math inline\">\\(G[V&#39;]\\)</span>是当前二分区的一个子图，他应该递归地规划为<span class=\"math inline\">\\(k&#39;&lt;k\\)</span>个块。则<span class=\"math inline\">\\(\\epsilon&#39;\\)</span>为二分区的不平衡比。 <span class=\"math display\">\\[\n\\epsilon&#39;=((1+\\epsilon)\\frac{c(V)}{k}·\\frac{k&#39;}{c(V&#39;)})^{\\frac{1}{log_2(k&#39;)}-1}\n\\]</span></p>\n<p>如果每一个二分区都是<span class=\"math inline\">\\(\\epsilon’-balanced\\)</span>，那么最后的k-way分区就是<span class=\"math inline\">\\(\\epsilon-balanced\\)</span>。</p>\n<h3 id=\"generic-deep-mgp\">Generic Deep MGP</h3>\n<p><strong>大体流程：</strong></p>\n<p>输入一个图，然后将其进行粗化，一直到只剩下2C个分区（这里C是输入参数），这就是最粗的图了。</p>\n<p>然后，我们将这个最粗的图通过二分区，分成两个块。</p>\n<p>在去粗化的过程中（将归并的节点还原成多个节点），要保证<span class=\"math inline\">\\(n&#39;\\)</span>个节点要分成<span class=\"math inline\">\\(min\\{k,ceil_2(|V_i|/C)\\}\\)</span>个块，这样每次进行二分区都能在大约2C个点上工作。</p>\n<p>直到分出k组。</p>\n<p><strong>详细流程：</strong></p>\n<p>首先，我们输入图<span class=\"math inline\">\\(G_1=(V_1,E_1)\\)</span>，然后建立一系列越来越粗的图<span class=\"math inline\">\\(G_1, G_2,..,G_l\\)</span>。图粗化的办法是对每一个<span class=\"math inline\">\\(G_i\\)</span>的图进行聚类，然后将类别压缩成一个点来获得<span class=\"math inline\">\\(G_{i+1}\\)</span>。这个过程直到步骤收敛或者图节点拥有不超过<span class=\"math inline\">\\(2C\\)</span>个节点。<em>对应算法1:2-3</em></p>\n<p><u>此时图中仅有2C个节点，且此时2C个节点并没有分块。</u></p>\n<p>之后，我们开始以下操作：</p>\n<ol type=\"1\">\n<li>使用递归二划分来将当前的图划分成<span class=\"math inline\">\\(k_l\\)</span>个块；</li>\n<li>重新平衡分区并利用k-way局部改进；</li>\n<li>将分区映射到前一个图<span class=\"math inline\">\\(G_{l-1}\\)</span>。</li>\n</ol>\n<p>在这些操作期间，我们保证以下量不变</p>\n<ol type=\"1\">\n<li>一个粗图<span class=\"math inline\">\\(G_i\\)</span>划分成<span class=\"math inline\">\\(k_i=ceil_2(|V_i|/C)\\)</span>个块</li>\n<li><span class=\"math inline\">\\(G_i\\)</span>的<span class=\"math inline\">\\(k_i\\)</span>-way分区应该满足平衡约束</li>\n</ol>\n<blockquote>\n<p>解释一下<span class=\"math inline\">\\(ceil_2\\)</span>，<span class=\"math inline\">\\(ceil_2(x)\\)</span>的意思是，将x向上取到2的幂次。</p>\n<p>eg. <span class=\"math inline\">\\(ceil_2(10) \\to 16\\)</span></p>\n<p>所以1条件，就是每一个图分成的块的数量必须是2的幂，这样才能保证二划分。3C个点就要分成4块。</p>\n</blockquote>\n<p>理想的情况下，算法会产生一个图层次结构，其中节点数在两个层次之间减半，最粗的图有2C个节点。在这种情况下，对最粗的图G进行一次二划分就足以满足1条件。为了在去粗化的时候（将当前图中的节点数增加一倍）后恢复不变量，必须将当前分区的每一个块进行一次二分区。</p>\n<blockquote>\n<p>eg.</p>\n<p>现在最大的图有2C个点，此时需要分区<span class=\"math inline\">\\(ceil_2(2C/C)=2\\)</span>，所以二分区将其分成两个块</p>\n<p>之后映射到前一个图，此时节点变成了4C个，需要分区<span class=\"math inline\">\\(cel_2(4C/C)=4\\)</span>，在第一步的时候已经分出了两个块，所以再在两个块中分别进行一次二分区就满足了。</p>\n</blockquote>\n<p>一般的条件下，粗化会将图缩小大于1/2，因此使用递归二划分来保持1条件。也就是说，每当图<span class=\"math inline\">\\(G_i\\)</span>的划分不满足1条件，就要递归的对每一个块进行二划分，直到拥有<span class=\"math inline\">\\(k_i\\)</span>个块。<em>对应算法1:7-10</em></p>\n<blockquote>\n<p>eg.</p>\n<p>现在最大的图有2C个点，此时需要分区<span class=\"math inline\">\\(ceil_2(2C/C)=2\\)</span>，所以二分区将其分成两个块</p>\n<p>之后映射到前一个图，此时大概率会变成大于4C个节点，比如说6C个，所以此时分组要分成<span class=\"math inline\">\\(cel_2(6C/C)=8\\)</span>，此时就需要递归进行二分区，在已经存在的两块中进行二分区，变成4个块，再在4个块中进行二分区，变成8个块。</p>\n</blockquote>\n<p>因为现实中的节点数量不一定是C的整数倍，所以进行单一二分区是可能没有办法获得<span class=\"math inline\">\\(k&#39;\\)</span>个分区，所以不满足约束的话会使用k-way局部改进算法，<em>对应算法1:11</em></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211081649225.png\" style=\"zoom:80%;\" /></p>\n<h3 id=\"parallelization-1\">Parallelization</h3>\n<p>使用方法：<strong>并行粗化、局部改进、平衡算法</strong></p>\n<p>在很粗的层次上，<strong>保持<span class=\"math inline\">\\(p\\)</span>个PE在至少有<span class=\"math inline\">\\(pC\\)</span>个节点的图上进行并行任务</strong>，这是通过在越来越多的粗图副本上运行初始化分区来得到的。</p>\n<ol type=\"1\">\n<li><p>我们使用<a href=\"#Notation\">Notation</a>中的步骤来使得最后的粗图<span class=\"math inline\">\\(G_C\\)</span>还有<span class=\"math inline\">\\(pC\\)</span>个节点。(下图中的前三个步骤）</p></li>\n<li><p>我们复制<span class=\"math inline\">\\(G_C\\)</span>得到两个副本<span class=\"math inline\">\\(G_C^r\\)</span>和<span class=\"math inline\">\\(G_C^l\\)</span>，同时将PE进行分割成两组，每一组有<span class=\"math inline\">\\(p&#39;=\\frac{p}{2}\\)</span>个PE。如果<span class=\"math inline\">\\(p&#39; &gt; 1\\)</span>，我们用第一组的PE继续粗化<span class=\"math inline\">\\(G_C^r\\)</span>，用第二组的PE粗化<span class=\"math inline\">\\(G_C^l\\)</span>，直到每个图中剩下<span class=\"math inline\">\\(p&#39;C\\)</span>个节点。（下图三到四的分叉）</p></li>\n<li><p>我们以这种方式进行递归，直到最后获得<span class=\"math inline\">\\(p\\)</span>个有<span class=\"math inline\">\\(2C\\)</span>节点的图。（下图四到五的二变四，又进行了一次复制，一次粗化）</p></li>\n<li><p>然后使用单个PE对这些图中的每一个进行二分区，选择两者中更好的二分区划分，如果就一个可行，那么就用那一个。（下图从五到六）</p>\n<blockquote>\n<p>比如下图从2C的节点进行复制，因为<span class=\"math inline\">\\(p&#39;=2/2=1\\)</span>，所以不用再进行粗化，两个PE上各自有一个副本，之后进行二分类，其实就是在两个相同的图上进行二分区。</p>\n</blockquote></li>\n<li><p>之后我们继续在4中的二分区的每个块进行二分区，并应用平衡和局部改进算法。（下图从六到七）</p></li>\n<li><p>递归进行。</p></li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211081543191.png\" /></p>\n<p><strong>对k的处理：</strong></p>\n<p>在上文中，我们默认k是2的倍数。对于一般情况，我们要给B个块分k组，此时<span class=\"math inline\">\\(f_V=k\\)</span>，我们对B进行二分区<span class=\"math inline\">\\(B_0=\\lceil\\frac{B}{2}\\rceil\\)</span>，<span class=\"math inline\">\\(\\lfloor\\frac{B}{2}\\rfloor\\)</span>。同时我们将B的权重分割成了<span class=\"math inline\">\\(f_{B_0}\\)</span>和<span class=\"math inline\">\\(f_{B_1}\\)</span>……我们要计算<span class=\"math inline\">\\(k&#39;=floor_2(k)\\)</span>的<span class=\"math inline\">\\(k&#39;-way\\)</span>划分。这样就会有<span class=\"math inline\">\\(k-k&#39;\\)</span>个重块<span class=\"math inline\">\\(f=2\\)</span>，以及有<span class=\"math inline\">\\(2k&#39;-k\\)</span>个<span class=\"math inline\">\\(f=1\\)</span>的轻块，之后我们只要对重块进行双分区就行了。</p>\n<blockquote>\n<p>eg. k = 7，B = 15</p>\n<p>k’=4，所以要进行一个4-分区，用Notation的方法，将15进行4分区，分成了3,4,4,4。</p>\n<p>此时有重块3个：4,4,4；轻块1个：3</p>\n<p>对重块二分区：2,2,2,2,2,2</p>\n<p>最后：2,2,2,2,2,2,3</p>\n</blockquote>\n<h3 id=\"merits\">Merits</h3>\n<p>它成功地结合了经典的直接k-way划分和递归二划分的优点。 与直接K-way划分相似，深度MGP只对图进行一次粗化和去粗化，并允许使用K-way局部改进算法。 当k较大时，它不会遇到可伸缩性问题，并且比递归二划分具有更好的渐近运行时间</p>\n","categories":["XF-TANK"],"tags":["My-Papers"]},{"title":"2022JSAC Papers' Comprehension","url":"/2022/10/22/2022JSAC%20Papers'%20Comprehension/","content":"<ul>\n<li>BC-based Trusted Trafic Offloading in SAGIN\n<ul>\n<li>预备知识（PBFT、MDP、AC算法）</li>\n<li>论文解读</li>\n</ul></li>\n<li>A Fast BC-based FL Framework with Compressed Communications\n<ul>\n<li>预备知识（FL过程）</li>\n<li>论文解读</li>\n</ul></li>\n</ul>\n<p><span id=\"more\"></span></p>\n<h1 id=\"blockchain-based-trusted-trafﬁc-ofﬂoading-in-saginfrl-approach\">Blockchain-based Trusted Trafﬁc Ofﬂoading in SAGIN:FRL Approach</h1>\n<blockquote>\n<p>网址：<a href=\"https://ieeexplore.ieee.org/document/9918062\">https://ieeexplore.ieee.org/document/9918062</a></p>\n<p>F. Tang, C. Wen, L. Luo, M. Zhao and N. Kato, \"Blockchain-based Trusted Traffic Offloading in Space-Air-Ground Integrated Networks (SAGIN): A Federated Reinforcement Learning Approach,\" in IEEE Journal on Selected Areas in Communications, 2022, doi: 10.1109/JSAC.2022.3213317.</p>\n</blockquote>\n<h2 id=\"preliminaries\">Preliminaries</h2>\n<h3 id=\"pbft\">PBFT</h3>\n<p>在讨论PBFT之前，我需要先讲述一下区块链网络中的共识机制。</p>\n<p>由于区块链是一个完全公开的数据链，所有人都可以匿名接入，所以共识机制的出现就是为了防止区块链的不稳定和被攻击。按大白话来说：共识机制就是如何网络中的所有节点<strong>达成共识，获得一样的结果</strong>。普遍的共识机制有PoW，PoS等等。</p>\n<p>在区块链中：一个矿工挖矿之后，必须通过共识才可以上链，上链即意味着：可以存储到所有的账本之中，这项交易被记录。</p>\n<p><strong>这里讲一下PBFT算法（实用拜占庭容错算法）</strong></p>\n<p>这个算法的本质就是：任何一个节点收到了Leader节点的消息，都要去怀疑这个命令是否正确，而为了能确保消息的准确，我要和团队中的其他节点进行确认，只有大多数人认为Leader的命令是正确的时候，节点才会去执行这个命令。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210231027074.png\" alt=\"image-20221023102256914\" style=\"zoom: 30%;\" /></p>\n<ul>\n<li><p><strong>Pre-prepare</strong>：负责执行区块，产生签名包，并将签名包广播给所有共识节点；</p>\n<p><span class=\"math inline\">\\(&lt;&lt;PRE-PREPARE,v,n,d&gt;,m&gt;\\)</span></p>\n<p>其中v是视图数，这个阶段为了给request排序</p></li>\n<li><p><strong>Prepare</strong>：负责收集签名包，某节点收集满<code>2*f+1</code>的签名包后，表明自身达到可以提交区块的状态，开始广播Commit包；</p>\n<p><span class=\"math inline\">\\(&lt;PREPARE,v,n,d,i&gt;\\)</span></p>\n<p>从节点告诉其他节点：表明自己已经收到了Leader的建议，然后将该建议分发给所有节点，去核实信息。</p>\n<p>每一个节点达到prepare状态时，并不知道其他节点的状态（恶意节点会给不同的节点发送不同的信息），所以还需要广播commit包</p></li>\n<li><p><strong>Commit</strong>：负责收集Commit包，某节点收集满<code>2*f+1</code>的Commit包后，直接将本地缓存的最新区块提交到数据库。</p></li>\n</ul>\n<p>​ 收集到prepare包，表明自己已经收到了和大多数节点一致的主节点命令，我可以在本地提交；广播给大家之后，收集到<code>2f+1</code>个commit包之后，就表明大多数已经在本地提交，此时可以区块落盘。</p>\n<p>​ 在这里需要对request的序号达成共识，<strong>这些节点可能会在不同的视图中提交</strong>。</p>\n<p><strong>视图：</strong></p>\n<p>如果说主节点宕机或者主节点是恶意节点，就需要进行视图切换。</p>\n<p>从节点发现主节点有问题，就需要广播切换视图的数据包，只要从节点发现就需要发送该数据包。新的主节点（主节点候选人）收到<code>2f+1</code>个切换视图的数据包，就会进行视图切换。该新主节点就会广播NewView数据包，从节点收到数据包之后进行校验，校验成功之后会进入新的视图。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210231040105.png\" alt=\"image-20221023104048072\" style=\"zoom:30%;\" /></p>\n<p>在上图中node3是恶意节点，在0号view中，node0-2分别当Leader节点，此时是没有问题的，但是当node3成为Leader节点之后，其他节点发现主节点是恶意节点，此时触发视图切换，重新选择主节点，就变成了1号view，此时node0成为了主节点。</p>\n<h3 id=\"马尔科夫决策过程-mdp\">马尔科夫决策过程 MDP</h3>\n<p>第一个概念是马尔科夫性：</p>\n<p>指该系统的下一个状态<span class=\"math inline\">\\(s_{t+1}\\)</span>只与当前状态<span class=\"math inline\">\\(s_t\\)</span>有关，和之前的状态没有关系。公式表示：<span class=\"math inline\">\\(P[s_{t+1}|s_t] = P[s_{t+1}|s_1,...,s_t]\\)</span></p>\n<p>第二个概念是马尔科夫过程：</p>\n<p>该过程的定义：马尔科夫过程是一个二元组<span class=\"math inline\">\\((S,P)\\)</span>，且满足：<span class=\"math inline\">\\(S\\)</span>是有限状态集合， <span class=\"math inline\">\\(P\\)</span>是状态转移概率。状态转移概率矩阵为：<span class=\"math inline\">\\(P = \\begin{bmatrix} P_{11} &amp; ...&amp;P_{1n} \\\\ . &amp; . &amp; .\\\\P_{n1} &amp; ...&amp;P_{nn} \\end{bmatrix}\\)</span></p>\n<p>具体来说就是每一个状态转换到下一个不同的状态都会自己不同的<strong>概率</strong>，只知道开始与结束是不能确定中间的过程的。比如说一个学生从课1 到 睡觉，之间就会有很多不同的状态序列。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210231101263.png\" style=\"zoom:100%;\" /></p>\n<p><strong>第三个概念是马尔科夫决策过程</strong></p>\n<p>马尔科夫决策过程由元组<span class=\"math inline\">\\((S,A,P,R,γ)\\)</span>描述，其中：<span class=\"math inline\">\\(S\\)</span>为有限的状态集, $A $为有限的动作集, <span class=\"math inline\">\\(P\\)</span> 为状态转移概率,$ R$为回报函数, <span class=\"math inline\">\\(γ\\)</span> 为折扣因子，用来计算累积回报。</p>\n<p><em>注意：跟马尔科夫过程的不同点是，马尔科夫决策过程的状态转移概率是包含动作的。</em></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210231103910.png\" style=\"zoom:100%;\" /></p>\n<p>在上图中，学生总共有五个状态<span class=\"math inline\">\\(S = \\{s_1,s_2,s_3,s_4,s_5\\}\\)</span>，动作也有五个<span class=\"math inline\">\\(A=\\{玩、退出、学习、发论文、睡觉\\}\\)</span>，其中每一个动作都会有一个立即回报R$</p>\n<p>一般来说，在马尔科夫决策过程上的强化学习目标都是寻找最优策略。策略<span class=\"math inline\">\\(\\pi\\)</span>就是状态到动作的映射，它是指给定状态<span class=\"math inline\">\\(s\\)</span>时，动作集的一个分布，即<span class=\"math inline\">\\(\\pi(a|s)=p[A_t=a|S_t=s]\\)</span></p>\n<p>含义是：策略<span class=\"math inline\">\\(π\\)</span>在每个状态<span class=\"math inline\">\\(s\\)</span>指定一个动作的概率。如果给出的策略<span class=\"math inline\">\\(π\\)</span>是确定性的，那么策略<span class=\"math inline\">\\(π\\)</span>在每个状态<span class=\"math inline\">\\(s\\)</span>指定一个确定的动作。</p>\n<p>例如：其中一个学生的策略为玩<span class=\"math inline\">\\(π_1(玩|s_1)=0.8\\)</span>，是指该学生在状态<span class=\"math inline\">\\(s1\\)</span>时玩的概率为0.8，不玩的概率是0.2，显然这个学生更喜欢玩。</p>\n<p>强化学习的目标就是找到最优的策略，这里的策略是指得到的<strong>总回报</strong>最大</p>\n<p>累计回报计算公式：<span class=\"math inline\">\\(G_t=R_{t+1}+\\gamma R_{t+2}+...=\\sum_{k=0}^{\\infty}\\gamma^{k}R_{t+k+1}\\)</span></p>\n<hr />\n<p><strong>讲解一下<span class=\"math inline\">\\(\\gamma\\)</span>的用处：</strong></p>\n<p>为游戏里，越接近游戏开始处的奖励，就越容易获得；而随着游戏的进行，后面的奖励就没有那么容易拿到了。</p>\n<p>把智能体想成一只<strong>小老鼠</strong>，对手是只猫。它的目标就是在被猫吃掉之前，<strong>吃到最多的奶酪</strong>。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210232051558.png\" alt=\"image-20221023205137426\" style=\"zoom:80%;\" /></p>\n<p>就像图中，<strong>离老鼠最近的奶酪很容易吃</strong>，<strong>而从猫眼皮底下顺走奶酪就难了</strong>。离猫越近，就越危险。</p>\n<p>结果就是，从猫身旁获取的奖励会<strong>打折扣</strong>：吃到的可能性小，就算奶酪放得很密集也没用。</p>\n<hr />\n<p>假设从状态<span class=\"math inline\">\\(s_1\\)</span>出发，给定了策略<span class=\"math inline\">\\(\\pi\\)</span>，那么学生的状态序列可能为：</p>\n<p><span class=\"math inline\">\\(s_1\\to s_2 \\to s_3 \\to s_4\\to s_5\\)</span>；<span class=\"math inline\">\\(s_1 \\to s_2 \\to s_3 \\to s_5\\)</span></p>\n<p>所以说在给定了策略<span class=\"math inline\">\\(\\pi\\)</span>后，由于过程的不确定，那么<span class=\"math inline\">\\(G_1\\)</span>也有不同的值，为了更好的评价状态<span class=\"math inline\">\\(s_1\\)</span>的价值，我们需要定义一个确定的量来表示该价值，所以我们利用期望来作为状态值函数的定义。</p>\n<p><strong>状态值函数（在某个状态有多好）：</strong></p>\n<p>当智能体采用策略<span class=\"math inline\">\\(π\\)</span>时，累积回报服从一个分布，累积回报在状态<span class=\"math inline\">\\(s\\)</span>处的期望值定义为状态-值函数： <span class=\"math display\">\\[\nv_\\pi(s)= E_\\pi[\\sum^{\\infty}_{k=0}\\gamma_kR_{t+k+1}|S_t=s]\n\\]</span> 这个含义就是在状态<span class=\"math inline\">\\(s\\)</span>上，到最后目标状态的所有路径的回报期望值。</p>\n<p><em>注意：状态值函数是与策略<span class=\"math inline\">\\(π\\)</span>相对应的，这是因为策略<span class=\"math inline\">\\(π\\)</span>决定了累积回报<span class=\"math inline\">\\(G\\)</span>的状态分布。</em></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210231133925.png\" alt=\"image-20221023113305866\"  /></p>\n<p>红色部分是每一个状态的状态值函数。</p>\n<p><strong>状态-行为值函数（在某个状态选择某个动作有多好）：</strong> <span class=\"math display\">\\[\nq_\\pi(s,a)= E_\\pi[\\sum^{\\infty}_{k=0}\\gamma_kR_{t+k+1}|S_t=s, A_t=a]\n\\]</span></p>\n<h3 id=\"actor-critic算法\">Actor-Critic算法</h3>\n<p>我们将 Actor-Critic 分为两个部分：Actor（策略网络）和 Critic（价值网络）</p>\n<ul>\n<li>Actor 要做的是与环境交互，并在 Critic 价值函数的指导下用策略梯度学习一个更好的策略。</li>\n<li>Critic 要做的是通过 Actor 与环境交互收集的数据学习一个价值函数，这个价值函数会用于判断在当前状态什么动作是好的，什么动作不是好的，进而帮助 Actor 进行策略更新。</li>\n</ul>\n<p>Actor 的更新采用<strong>策略梯度</strong>的原则，那 Critic 如何更新呢？</p>\n<p>我们将 Critic 价值网络表示为<span class=\"math inline\">\\(V_\\omega\\)</span>，参数为<span class=\"math inline\">\\(\\omega\\)</span>。于是，我们可以采取时序差分残差的学习方式，对于单个数据定义如下价值函数的损失函数： <span class=\"math display\">\\[\nL(\\omega)=\\frac{1}{2}(r+\\gamma V_\\omega(s_{t+1})-V_\\omega (s_t))^2\n\\]</span> 与 DQN 中一样，我们采取类似于目标网络的方法，将上式中<span class=\"math inline\">\\(r+\\gamma V_\\omega(s_{t+1})\\)</span>作为时序差分目标，不会产生梯度来更新价值函数。因此，价值函数的梯度为： <span class=\"math display\">\\[\n\\nabla_\\omega L(\\omega)=-(r+\\gamma V_\\omega(s_{t+1})-V_\\omega (s_t))\\nabla_\\omega V_\\omega(s_t)\n\\]</span> 然后使用梯度下降方法来更新 Critic 价值网络参数即可。</p>\n<p>Actor-Critic 算法的具体流程如下：</p>\n<ul>\n<li>初始化策略网络参数<span class=\"math inline\">\\(\\theta\\)</span>，价值网络参数<span class=\"math inline\">\\(\\omega\\)</span></li>\n<li><strong>for</strong> 序列<span class=\"math inline\">\\(e=1\\to E\\)</span> <strong>do</strong> :</li>\n<li>用当前策略<span class=\"math inline\">\\(\\pi_{\\theta}\\)</span>采样轨迹<span class=\"math inline\">\\(\\{s_1,a_1,r_1...\\}\\)</span></li>\n<li>为每一步数据计算: <span class=\"math inline\">\\(\\delta_t=r_t +\\gamma V_\\omega(s_{t+1})-V_\\omega (s_t)\\)</span></li>\n<li>更新价值参数<span class=\"math inline\">\\(\\omega=\\omega + \\alpha_\\omega \\sum_t\\delta_t \\nabla_\\omega V_\\omega(s_t)\\)</span></li>\n<li>更新策略参数<span class=\"math inline\">\\(\\theta = \\theta + \\alpha_{\\theta}\\sum_t\\delta_t \\nabla_\\omega log\\pi_{\\theta}(a_t|s_t)\\)</span></li>\n<li><strong>end for</strong></li>\n</ul>\n<h2 id=\"论文解读\">论文解读</h2>\n<h3 id=\"遇到的问题\">遇到的问题</h3>\n<ul>\n<li>如今单靠地面无线技术来满足超高服务质量需求是一个挑战，以为预计到2023年，将有超过5000亿个物联网设备投入使用，这就导致了不同物联网设备之间的数据和信息交换数量激增，但是由于地面上的网段的覆盖范围和容量有限，没有办法对偏远或非地面的设备提供稳定的网络接入。</li>\n<li>为了解决上述问题，研究人员<strong>选择了使用<code>Space-Air-Ground</code>网络来缓解上述压力。</strong>但是由于卫星和无人机的高机动性和异构性，又会导致没办法用基于固定规则的流量卸载方法来处理该问题。<strong>这里使用到了强化学习方法</strong>来取代正常的流量卸载方法。</li>\n<li>由于SAGIN巨大的网络空间，传统的机器学习需要全局数据将成为较大的开销，同时原始训练数据的交换将显著增加隐私担忧。</li>\n<li>研究人员<strong>选择使用联邦学习来缓解上述问题</strong>，但是中心服务器的入侵也会导致联邦学习的学习效果下降。</li>\n<li><strong>该模型引入了区块链</strong>来保证联邦学习不会受到恶意入侵的剧烈影响。</li>\n</ul>\n<h3 id=\"场景描述\">场景描述</h3>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210231723119.png\" alt=\"image-20221023172309069\" style=\"zoom:100%;\" /></p>\n<p>地面上有两种设备：一个是用户的设备：UE，一个是类似基站的东西：BS</p>\n<p>空中有一种设备：无人机UAV</p>\n<p>太空上有两个设备：低轨卫星LEO，同步卫星GEO</p>\n<p>我们现在要做的就是：两个UE设备要进行数据交换，通过强化学习的方法来<strong>找到一个最优的路径来连接两个UE</strong>，无论是卸载到BS还是UAV还是LEO、GEO，总之目的就是数据交换。</p>\n<p>部分安全分数较高的BS作为本地训练节点，BS中安全分数最高的一部分是中心共识节点。</p>\n<p>UAV、LEO、GEO都是区块链的轻节点（不存全部的信息）</p>\n<h3 id=\"创新点\">创新点</h3>\n<ol type=\"1\">\n<li><p>为了实现网络信息在节点间的安全共享，引入了区块链技术。</p>\n<p>引入联邦学习技术来保护数据隐私，减少SAGIN中传输原始数据的开销。</p>\n<p>提出了一种新的基于区块链的联邦学习架构。</p>\n<p>基于上述框架，提出了一种双区块链结构。</p></li>\n<li><p>为了解决流量卸载中的安全节点选择问题，设计了一种节点安全评估机制。</p></li>\n<li><p>提出了一种共识节点选择机制，然后在此基础上提出了一种改进的实用拜占庭容错算法(EPBFT)。</p></li>\n<li><p>我们将SAGIN中基于区块链的流量卸载问题抽象为MDP，并提出了基于RL的方法来解决该问题。</p>\n<p>我们提出了一种无模型的A3C算法来动态学习网络拓扑结构，并做出优化决策，以使系统总时延最小</p></li>\n</ol>\n<h4 id=\"总体框架\">总体框架</h4>\n<p><strong>本地训练层</strong></p>\n<p>本地训练层由地上的BS组成，当BS超过负载的时候，系统启用卸载方案，本地节点会收集相邻节点的拓扑信息（包含连通性、安全评估信息）</p>\n<p><strong>中心共识层</strong></p>\n<p>通过安全评估机制选择的BS节点组成中心共识层，该层收集本地训练层上传的拓扑信息和局部模型参数，并对训练结果进行评估。中心共识层都是共识节点，来作为分布式的区块链来运行，该层的节点可以通过区块链与其他节点共享模型参数。</p>\n<p><strong>区块链系统</strong></p>\n<p>该文章提出了一个双区块链系统，一个用来存储网络的拓扑信息，一个用来存储模型信息。中心共识节点都作为区块链的全节点，参与共识过程，本地训练节点和其他设备节点（UAV等）都是轻节点，并不参与共识</p>\n<ul>\n<li>拓扑链：拓扑信息包括：本地训练节点一跳、两跳的设备集（BS、UAV、GEO、LEO）；节点队列；安全评估信息。共识层会将其打包到区块链中，在模型验证中起到必不可少的作用</li>\n<li>模型链：本地训练节点将本地模型上传，共识层进行聚合然后打包成块，添加到区块链中。此外共识层还需要对本地模型进行验证来作为安全评估。</li>\n</ul>\n<h4 id=\"系统模型\">系统模型</h4>\n<p>文章将整个SAGIN看成了一个加权有向图，节点包括各个设备，加权的赋值为0,1（0为两个设备没有建立连接，1代表两个设备建立了连接）。系统节点分为UN和RN，UN就是UE（生成数据包并将其传输到其他的UE），RN就是无人机等中继节点（relay nodes）。在每一个时间<span class=\"math inline\">\\(t\\)</span>，每一个UE会生成一个大小为<span class=\"math inline\">\\((\\mu, \\omega^2)\\)</span>正态分布的数据包，按照一个预设好的路径传输给另一个UE：<span class=\"math inline\">\\(path=\\{un_s \\to un_d\\}\\)</span></p>\n<p><strong>通信模型</strong></p>\n<ul>\n<li><p>UAV-Ground通信<strong>传输速率</strong>：即BS和UAV的通信，公式如下 <span class=\"math display\">\\[\ntr_t^{UB}=W_{UB}log_2(1+ \\frac{P_{UB}·10^{-\\frac{L}{10}}}{\\sigma^2_{UB}})\n\\]</span> <span class=\"math inline\">\\(W_{ub}\\)</span>表示无人机与BS之间的信道带宽，<span class=\"math inline\">\\(P_{ub}\\)</span>表示无人机与BS之间的发射功率，<span class=\"math inline\">\\(σ^2_{UB}\\)</span>表示无人机与BS之间的噪声功率，<span class=\"math inline\">\\(L\\)</span>表示无人机与BS之间的平均路径损耗。</p></li>\n<li><p>UAV-Satellite通信<strong>传输速率</strong>：这里需要考虑雨水对信号的影响。由于无人机的运动相比于卫星的运动很小，所以可以看做UAV的运动是静止的。 <span class=\"math display\">\\[\ntr_t^{US}=W_{US}log_2(1+ \\frac{P_{US}·I^2_{US}}{\\sigma^2_{US}})\n\\]</span> <span class=\"math inline\">\\(I_{US}\\)</span>表示雨水对信号的缩减（基于Weibull）。</p></li>\n</ul>\n<p><strong>区块链延迟模型</strong></p>\n<p>区块链中的延迟主要是共识延迟和节点更新延迟，文章定义每m次共识之后需要进行一次节点更新，所以区块链的平均延迟为 <span class=\"math display\">\\[\nT_c^b(t)=\\frac{MT_{con}(t)+T_{upd}(t)}{M}\n\\]</span> 为了保证避免恶意节点对于SAGIN的影响，我们需要对平均延迟做一个约束，即<span class=\"math inline\">\\(T_c^b(t)\\leq(T_c^b)_{min}\\)</span>，<span class=\"math inline\">\\((T_c^b)_{min}\\)</span>是为了安全所设定的限制。</p>\n<p><strong>流量卸载延迟模型</strong></p>\n<p>端到端时延是源节点到目的节点路径上所有时延分量的总和，分为<strong>链路上时延</strong>和<strong>排队时延</strong>两个分量。 另外，链路上的时延又分为<strong>传播时延</strong>和<strong>传输时延</strong>。</p>\n<blockquote>\n<p>传播时延：信号在传播过程中的延迟</p>\n<p>传输时延：由于信号信息是有大小的，传输这个数据所需要的延迟</p>\n</blockquote>\n<p><span class=\"math display\">\\[\nT_{path_{i,j}}=\\frac{x_{i,j}}{\\iota}+\\frac{l}{tr_t^{i,j}}+\\eta \\frac{l}{tr_t^{i,j}}\n\\]</span></p>\n<p>其中<span class=\"math inline\">\\(x_{i,j}\\)</span>是节点之间的物理距离，<span class=\"math inline\">\\(\\iota\\)</span>是信号的物理传输速度；<span class=\"math inline\">\\(l\\)</span>是信号的长度，<span class=\"math inline\">\\(tr_t^{i,j}\\)</span>是节点<span class=\"math inline\">\\(i\\)</span>和节点<span class=\"math inline\">\\(j\\)</span>之间的传输速率，<span class=\"math inline\">\\(\\eta\\)</span>是排队的位次</p>\n<ul>\n<li>第一项：两节点之间的传播时延</li>\n<li>第二项：本信号的传输时延</li>\n<li>第三项：排队时延</li>\n</ul>\n<p><strong>最终的问题描述就是，我们需要找到一个路径使得在约束条件下，流量卸载的延迟是最小的。</strong></p>\n<h4 id=\"节点安全评估和共识机制\">节点安全评估和共识机制</h4>\n<h5 id=\"节点安全评估\">节点安全评估</h5>\n<p>我们假设恶意节点有以下三种行为</p>\n<ol type=\"1\">\n<li>恶意节点有一定的几率丢包</li>\n<li>恶意节点可能不按照指定的路由路径或卸载方案传输包</li>\n<li>恶意节点可能将性能不佳的模型上传中心共识层</li>\n</ol>\n<p>针对上述三种行为，文章给出了以下三个安全评估指标</p>\n<ol type=\"1\">\n<li><p>计算节点的投递率，投递率越高该节点丢包几率越小，越安全：<span class=\"math inline\">\\(\\frac{传出数量}{传入数量}\\)</span></p></li>\n<li><p>本地训练节点接收到数据包时，检测最后一跳是否采取了最优路径，如果没有采用，就检测错误，将该值归一化</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210232005171.png\" alt=\"image-20221023200559139\"  /></p></li>\n<li><p>通过测试上传模型的性能来评估是否为恶意节点，将不正确的模型与正确模型相比，然后归一化。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210232006876.png\" alt=\"image-20221023200614804\"  /></p></li>\n</ol>\n<p>最后将三个值相乘，得出最后的安全评估指数，由于三个值的区间全是<span class=\"math inline\">\\((0,1]\\)</span>，所以最后的值也是<span class=\"math inline\">\\((0,1]\\)</span></p>\n<h5 id=\"共识机制epbft\">共识机制EPBFT</h5>\n<p>传统的PBFT的主节点选择是利用残差法，但残差法对主节点的选择具有随意性和不可控性，不能保证所选主节点的安全性。</p>\n<p>这个算法与PBFT的区别就是增加了动态添加和删除节点的功能。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210232009738.png\" alt=\"image-20221023200933662\"  /></p>\n<p><strong>更新共识节点步骤：</strong></p>\n<ol type=\"1\">\n<li>在共识M次之后，启动节点更新进程，主节点（node 1）将安全评估值最低的共识节点发送给其他节点（node 4）</li>\n<li>在共识节点收到该消息之后，向其他共识节点发送消息，如果收到<code>2f+1</code>以上的消息（包括第一步主节点发送的消息），将公式列表更新</li>\n<li>如果删除成功，那么所有节点向安全值最高的节点发送INVITE消息</li>\n<li>候选人收到消息之后，向每一个向他发送INVITE的节点发送INVITE-ACK回复</li>\n<li>共识节点收到ACK消息之后，共识节点向其他节点发送UPDATE消息，每一个共识节点收到<code>2f+1</code>个UPDATE消息，将候选节点正式变成共识节点</li>\n</ol>\n<p><strong>主节点的选择：</strong></p>\n<p>选择安全值最高的节点作为主节点，当要切换视图的时候，我们从中心节点重新选择安全值最高的节点作为主节点</p>\n<hr />\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210232017275.png\" alt=\"image-20221023201752246\" /></p>\n<p><strong>共识步骤：</strong></p>\n<ol type=\"1\">\n<li><p>中继节点（BS、UAV、SAT）向最近的共识节点发送自己的信息</p></li>\n<li><p>共识节点收到之后向主节点打包发送</p></li>\n<li><p>主节点将该信息广播给其他共识，主节点验证MAC之后，<strong>开始PBFT传统过程</strong></p></li>\n</ol>\n<blockquote>\n<p>同时为了加快共识进程，我们把共识信息设置BS传输的最高优先级。</p>\n</blockquote>\n<h4 id=\"联邦强化学习下的流量卸载\">联邦强化学习下的流量卸载</h4>\n<h5 id=\"mdp\">MDP</h5>\n<p>(<a href=\"#%20马尔科夫决策过程%20MDP\">马尔科夫决策MDP</a>)</p>\n<ul>\n<li><p><strong>状态空间</strong></p>\n<p>一个多维数组，包含节点周围所有的一跳和两跳邻居的相关信息</p></li>\n<li><p><strong>动作空间</strong></p>\n<p><span class=\"math inline\">\\(a(t) = \\{0,RN_i\\}\\)</span>，0代表着采用最开始的路由路径，<span class=\"math inline\">\\(RN\\)</span>代表着根据写在决策来卸载到邻居节点如BS、UAV、SAT</p></li>\n<li><p><strong>转移概率</strong></p>\n<p>由于无人机等带来的不确定性，这一方面是很难建模的，所以要利用机器学习</p></li>\n<li><p><strong>回报函数</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210232043053.png\" alt=\"image-20221023204335967\"  /></p>\n<p>如果消息传到了目的节点，那么取其倒数，传播事件越长回报越小</p>\n<p>如果消息没有达到目的节点，那么直接取反，回报函数会随着时间显著减小</p></li>\n<li><p><strong>价值函数</strong></p>\n<p>和MDP一样，取其期望。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210232048041.png\" alt=\"image-20221023204828960\" style=\"zoom:80%;\" /></p></li>\n<li><p><strong>决策</strong></p></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210232059365.png\" alt=\"image-20221023205901276\"  /></p>\n<p>在状态<span class=\"math inline\">\\(s\\)</span>选择<span class=\"math inline\">\\(s&#39;\\)</span>的概率×(在s状态选择a动作的回报 + 在<span class=\"math inline\">\\(s&#39;\\)</span> 的状态下采用<span class=\"math inline\">\\(\\pi&#39;\\)</span>的价值)</p>\n<p><strong>在状态S下选择动作A的最优策略π，使包延迟最小</strong></p>\n<h5 id=\"bfa3c-联邦强化学习\">BFA3C 联邦强化学习</h5>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210232108820.png\" alt=\"image-20221023210804783\"  /></p>\n<p><strong>框架</strong></p>\n<p>BFA3C有一个全局神经网络模型（即中心权重矩阵），它包含一个Actor网络和一个Critic网络，以及几个由局部Actor网络和局部Critic网络组成的局部网络模型（即局部权重矩阵）。</p>\n<p>每个局部训练节点都有其局部网络，局部网络单独探索环境</p>\n<p>∆ <strong>并周期性地将局部网络学习的结果馈送到中心共识层。 同时将本地网获取的拓扑信息上传到中心共识层。 该拓扑信息在共识处理后添加到拓扑链中。</strong></p>\n<p>∆ <strong>中心共识层聚合上传的本地模型，并将全局模型打包到一个块中，将其添加到模型链中。</strong></p>\n<p>∆ <strong>局部训练节点从模型链中获取最新的全局模型，并对局部模型进行更新。</strong></p>\n<p>此外，中心共识层从拓扑链中获取拓扑信息作为模型输入，对本地模型进行验证，验证结果将添加到拓扑链中，更新节点安全评估信息。</p>\n<p><strong>BFA3C流量卸载算法如下：</strong></p>\n<ul>\n<li><p>该算法首先在中心共识层初始化Actor网络和Critic网络参数。</p></li>\n<li><p>当本地训练节点开始接收对传输包的请求时，本地训练节点从模型链中获取相应的预训练模型并进行在线学习。</p></li>\n<li><p>本地训练节点通过收集来自周围邻近节点的信息作为模型的输入，根据本地参与者网络中的策略选择用于卸载决策的动作。</p></li>\n<li><p>局部评价网络生成最后一个时间序列位置<span class=\"math inline\">\\(s_t\\)</span>的奖励值，并计算每个时刻的累积折扣函数。 最后，分别计算了局部Actor和Critic网络的梯度。</p></li>\n<li><p>在本地训练时，作为运行BFA3C的本地训练节点进行异步训练，并周期性地将新的模型参数上传到中心控制层。</p></li>\n<li><p>中心共识节点在从本地训练节点接收到本地网络模型后，中心共识层从拓扑信息链中获取拓扑信息，以验证本地模型的性能。</p></li>\n<li><p>中心共识层根据模型的性能更新本地训练节点的安全评估值。 中心共识层在整合局部模型后，将全局模型放入区块，执行共识过程。</p></li>\n<li><p>最后，局部学习节点从模型链中获取最新的全局网络模型，并更新其局部网络模型。</p></li>\n</ul>\n<h3 id=\"总结\">总结</h3>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211122232143.png\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211122233867.png\" /></p>\n<blockquote>\n<p><strong>Handscript(informal) ：</strong></p>\n<p>场景大概就是两个UE要进行通信，但是由于地面上的基站覆盖面比较小，所以引入了UAV和Sat设备进行流量卸载。</p>\n<p>每一个UE产生信息之后会传输给中继节点（BS，UAV，SAT），中继节点也可以传输给下一个中继节点，最后传给终点UE。</p>\n<p>每个信息的传输路径是有一个最初设计的路径，还有一个卸载路径：由训练节点训练的模型通过联邦学习生成的，模型的目的是使得延迟最小。</p>\n<p>每一个BS训练节点在每一个时隙t（一段时间）进行模型更新，因为这是一个动态异构的拓扑结构，所以要一直更新，同时每一个时隙t中都要计算每一个节点的安全评估。</p>\n<p>联邦学习并不是训练一次就结束了：他是下载模型，然后训练更新之后，上传聚合之后，再下载，再训练……</p>\n<p>所以说，每一个时隙t中都要进行拓扑结构的更新，模型的训练。期间数据的传输按照模型链上的最新模型进行指导。</p>\n<p>拓扑结构的更新是每一个BS（训练节点）收集其连接的一跳、二跳的BS、UAV、SAT。（并不是全连接）</p>\n<p><em>？？貌似只有训练节点才有安全值？？</em></p>\n<p>在每一次本地训练节点收到传输的请求的时候，它首先从模型链中获取模型，然后将周围邻居节点的信息作为输入，获得决策动作。</p>\n</blockquote>\n<hr />\n<h1 id=\"a-fast-bc-based-fl-framework-with-compressed-communications\">A Fast BC-based FL Framework with Compressed Communications</h1>\n<blockquote>\n<p>网址：<a href=\"https://ieeexplore.ieee.org/document/9917527\">https://ieeexplore.ieee.org/document/9917527</a></p>\n<p>L. Cui, X. Su and Y. Zhou, \"A Fast Blockchain-based Federated Learning Framework with Compressed Communications,\" in IEEE Journal on Selected Areas in Communications, 2022, doi: 10.1109/JSAC.2022.3213345.</p>\n</blockquote>\n<h2 id=\"preliminaries-1\">Preliminaries</h2>\n<h3 id=\"fl过程\">FL过程</h3>\n<p>在联邦学习中，数据样本分布在多个客户端。我们假设有N个客户端，客户端<span class=\"math inline\">\\(i\\)</span>的数据集为<span class=\"math inline\">\\(D_i\\)</span>，那么这个客户端的局部损失函数定义为： <span class=\"math display\">\\[\nG_i(w,D_i)=\\frac{1}{|D|}\\sum_{\\xi\\in D_i}f(w,\\xi)\n\\]</span> 其中<span class=\"math inline\">\\(w\\)</span>表示模型参数，<span class=\"math inline\">\\(D_i\\)</span>表示局部数据集的大小，<span class=\"math inline\">\\(\\xi\\)</span>表示特定的数据样本，<span class=\"math inline\">\\(f\\)</span>为损失函数。联邦学习的目标是训练一个使全局损失函数最小化的模型即 <span class=\"math display\">\\[\nminF(w)=min\\sum_{i=1}^{N}p_iF_i(w,D_i)\n\\]</span> <span class=\"math inline\">\\(p_i\\)</span>表示每一个客户端的权重，一般根据该客户端数据集大小占据总共数据集的多少</p>\n<p><strong>FedAvg</strong>由多次全局迭代组成，在每一次迭代<span class=\"math inline\">\\(t\\)</span>中，参数服务器将随机选择<span class=\"math inline\">\\(K\\)</span>个客户端作为<span class=\"math inline\">\\(K_t\\)</span>，选择的客户端将从服务器端下载最新的模型<span class=\"math inline\">\\(w_t\\)</span>，之后在每一个客户端上进行局部迭代，每一个epoch的梯度下降如下所示。 <span class=\"math display\">\\[\nw_{t+1}^{i}=w_t^i-\\eta \\nabla F_i(w_t^i,B_t^i)\n\\]</span> <span class=\"math inline\">\\(B^i_t\\)</span>是客户端的数据集<span class=\"math inline\">\\(D_i\\)</span>中的一个小批量样本，之后将在局部进行<span class=\"math inline\">\\(E\\)</span>个局部epoch来对模型进行更新<span class=\"math inline\">\\(g_{t+E}^i=w_{t+E}^i-w_t^i\\)</span> <span class=\"math display\">\\[\nw_{t+E}=w_t+\\sum p_ig_{t+E}^i\n\\]</span> 即在原始的全局模型中将每一个客户端的更新梯度进行相加。之后将客户端的模型更新为新的模型。</p>\n<p>一般来说，全局模型只会在局部模型进行E的整数倍训练之后进行更新。<span class=\"math inline\">\\(t\\in I=\\{E,2E,3E\\}\\)</span></p>\n<h2 id=\"论文解读-1\">论文解读</h2>\n<h3 id=\"解决问题\">解决问题</h3>\n<p>该文章解决的问题主要是：<strong>BFL面临的通信延迟长和训练效率低</strong></p>\n<p>这可以归结为：</p>\n<ol type=\"1\">\n<li>在BFL中，所有的中间模型的更新都会广播给所有矿工来维护区块链</li>\n<li>每个客户端需要下载所有中间模型进行更新，以便本地进行模型聚合</li>\n</ol>\n<p>所以作者就希望可以<strong>减少中间模型更新的数量</strong>来提高BFL的通信效率，利用<span class=\"math inline\">\\(Top_K\\)</span>算法对每个局部模型进行压缩，来减轻通信负载</p>\n<h3 id=\"bcfl流程\">BCFL流程</h3>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210251519944.png\" alt=\"image-20221025151915830\"  /></p>\n<p><strong>基础设定</strong></p>\n<p>区块链系统中有N个客户端，M个矿工。我们假设每一个客户端都连接着一个特定的矿工，这个矿工用来上传和下载模型的更新（但是一个矿工可以连接多个客户端）。在文章的系统中，使用的是TOPK算法和PoW的共识机制（这些可以进行更换）</p>\n<p><strong>主要步骤</strong></p>\n<ol type=\"1\">\n<li><p><strong>本地模型训练</strong></p>\n<p>每个客户端使用梯度下降来更新本地的模型参数，更新公式如:<span class=\"math inline\">\\(w_{t+\\frac{1}{2}}^{i}=w_t^i-\\eta \\nabla F_i(w_t^i,B_t^i)\\)</span>，和传统FL一样，<span class=\"math inline\">\\(B\\)</span>是本地数据集中的一个batch，注意的是，这里并不是<span class=\"math inline\">\\(t+1\\)</span>，而是<span class=\"math inline\">\\(t+\\frac{1}{2}\\)</span> ，当且仅当在这次迭代之后需要上传模型时，才会令<span class=\"math inline\">\\(w_{t+1}^i=w^i_{t+\\frac{1}{2}}\\)</span>。</p>\n<p>我们将模型的更新定义<span class=\"math inline\">\\(g_{t}^i=w_{t+\\frac{1}{2}}^i-w_{t+1-E}^i-m^i_{t+1-E}\\)</span></p>\n<p>这里和传统FL的区别就是，我们减去了一个<span class=\"math inline\">\\(m\\)</span>，这个<span class=\"math inline\">\\(m\\)</span>就是补偿误差（去缓解压缩带来的误差）</p>\n<p><span class=\"math inline\">\\(Top_k\\)</span>算法其实就是设定一个阈值，如果模型更改的大小没有超过这个阈值，我们就认为这次更改并不是一个大更新，就不会将这次更新上传。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210251541759.png\" /></p>\n<ul>\n<li>这里<span class=\"math inline\">\\(g^i_t\\)</span>是更新的梯度，其中应该有多个参数（和模型的维度<span class=\"math inline\">\\(d\\)</span>一样）</li>\n<li>这里的阈值<span class=\"math inline\">\\(\\phi\\)</span>就是这<span class=\"math inline\">\\(d\\)</span>个更新梯度中的第<span class=\"math inline\">\\(k+1\\)</span>个，也就是说，在这<span class=\"math inline\">\\(d\\)</span>个维度数据中，我们只取其前<span class=\"math inline\">\\(k\\)</span>大个数据，其他维度的国内新能数据设置为0。</li>\n</ul></li>\n<li><p><strong>模型上传</strong></p>\n<p>假设模型的维度是<span class=\"math inline\">\\(d\\)</span>（每一个维度对应一个更新梯度）每个维度更新的通信量为<span class=\"math inline\">\\(s\\)</span>字节</p>\n<p>在BFCL中，k个模型上传所需要上传的字节为：<span class=\"math inline\">\\(k(s+\\frac{log_2d}{8})\\)</span>，传统的模型需要上传<span class=\"math inline\">\\(ds\\)</span>字节</p>\n<ul>\n<li><p><span class=\"math inline\">\\(k\\)</span>是我们选择的更新最大的<span class=\"math inline\">\\(k\\)</span>个维度，每个维度是<span class=\"math inline\">\\(s\\)</span>字节，剩下的一项是其索引的字节数。</p></li>\n<li><p>中间相差的误差由<span class=\"math inline\">\\(m\\)</span>来弥补。</p></li>\n</ul></li>\n<li><p><strong>跨事务</strong></p>\n<p>在这一步骤中，客户端上传的所有模型更新都将存储在候选块中，之后每一个矿工（连接着一个服务器）将其服务器上的模型更新分发给其他矿工。这样所有矿工都会拥有全部节点的模型更新参数。</p>\n<p>每一个矿工收取数据所需要的时间： <span class=\"math display\">\\[\nT_{cross,j}=\\frac{(N-N_j)k(s+\\frac{log_2d}{8})}{u_j}\n\\]</span></p>\n<ul>\n<li><span class=\"math inline\">\\(N-N_j\\)</span>代表有多少个服务器没有连接到矿工<span class=\"math inline\">\\(j\\)</span>上</li>\n<li><span class=\"math inline\">\\(u_j\\)</span>就是下载速率</li>\n<li>上式：除去连接到矿工上的服务器，矿工需要下载其他所有服务器的更新数据，更新数据大小为2中定义</li>\n</ul></li>\n<li><p><strong>挖矿和广播</strong></p>\n<p>在这一步骤中，每个矿工尝试生成一个区块（挖矿）来将客户端的所有模型更新存储到区块链上。所需要的时间是挖矿时间和传播时间。</p>\n<blockquote>\n<p><strong>Fork:</strong></p>\n<p>在有一个矿工挖矿成功过后，要将区块进行广播，在广播的期间，如果别的矿工也挖矿成功，就会出现fork情况。</p>\n</blockquote>\n<ul>\n<li>挖矿时间：如果使用POW进行共识，挖矿过程的时间是不好进行确定的，所以只可以通过调整哈希难度来获得期望值，<span class=\"math inline\">\\(T_{mine}=E[x_{mine}]=\\frac{1}{\\lambda}\\)</span></li>\n<li>传播时间：传播的数据量为：<span class=\"math inline\">\\(\\Omega=Nk(s+\\frac{log_2d}{8})\\)</span>，每个client生成的梯度大小。</li>\n<li>总的时间：<span class=\"math inline\">\\(T=\\frac{1}{\\lambda}+max_{j\\in M/j_w}\\frac{\\Omega}{u_j}\\)</span>，<span class=\"math inline\">\\(M/j_w\\)</span>为除去挖到框的那个矿工。</li>\n</ul>\n<p>如果在这个过程中，出现了fork现象，那么这个过程将会重新开始。为了避免分叉，矿工<span class=\"math inline\">\\(j_w\\)</span>的信息必须在矿工<span class=\"math inline\">\\(j\\)</span>挖到矿之前到达<span class=\"math inline\">\\(j\\)</span>。即：<span class=\"math inline\">\\(x_{mine,j}-x_{mine,j_w}&gt;\\frac{\\Omega}{u_j}\\)</span></p>\n<p>所以分叉的可能性为：<span class=\"math inline\">\\(p_{fork}=1-\\prod_{j\\in M/j_w}Pr(x_{mine,j}-x_{mine,j_w}&gt;\\frac{\\Omega}{u_j})\\)</span></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211141832025.png\" style=\"zoom:50%;\" /></p>\n<p>最终得出的运行时间为：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211141832493.png\" style=\"zoom:50%;\" /></p></li>\n<li><p><strong>模型下载</strong></p>\n<p>获胜的矿工将成功生成一个区块，所有的客户端都需要从区块链上下载最新的区块来更新自己的训练模型。</p>\n<p>下载时间：<span class=\"math inline\">\\(T_{\\downarrow,i}=\\frac{\\Omega}{u_{\\downarrow,i}}\\)</span></p></li>\n<li><p><strong>模型聚合</strong></p>\n<p>一旦客户端获取到了最新的区块，他们就可以聚合模型更新来获得模型参数。</p></li>\n</ol>\n<p><strong>那么其最终消耗的时间为：</strong> <span class=\"math display\">\\[\nh(k,\\lambda)=T_{local}+T_{aggre}+maxT_{\\uparrow,i}+maxT_{cross,j}+(T_{mine}+T_{pro})/(1-p_{fork})+maxT_{\\downarrow,i}\n\\]</span></p>\n<blockquote>\n<p>Remark 1：</p>\n<p>假设一开始每个client和矿工的计算和通信能力是可以预测的，所以在给定<span class=\"math inline\">\\(\\Omega\\)</span>的情况，是可以估算出<span class=\"math inline\">\\(h(k,\\lambda)\\)</span></p>\n<p>Remark 2：</p>\n<p>总时间受业务量<span class=\"math inline\">\\(\\Omega\\)</span>的影响很大，如果k较少，那么较小的业务量会有效降低开销</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210251555677.png\" alt=\"image-20221025155542639\" style=\"zoom:100%;\" /><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202210251555980.png\" alt=\"image-20221025155556825\" style=\"zoom:100%;\" /></p>\n<h3 id=\"收敛性证明\">收敛性证明</h3>\n<blockquote>\n<p>之后会补上的，这块真没看明白……o(╥﹏╥)o</p>\n</blockquote>\n<h3 id=\"结果分析\">结果分析</h3>\n<p><strong>Comparison of Model Accuracy:</strong></p>\n<p>我们分别在CIFAR-10和FEMNIST上比较了BCFL与固定训练时间跨度500s和400s内的baseline的模型精度</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211151846193.png\" /></p>\n<ul>\n<li>在BFL中压缩模型更新可以有效提高训练效率。只要k是比d小得多的任意数字，在所有实验场景下，BCFL都可以实现比BFL高得多的模型精度。<strong>原因是BFL中沉重的通信负载消耗了过多的训练时间。</strong></li>\n<li>在BCFL中设置k<em>和 λ </em>，模型的效果比其他所有的效果都要好</li>\n<li>因为FEMNIST的维度很高，因此需要更多的全局迭代来训练有效的模型。在给定的时间跨度中训练的模型对于没有压缩的BFL而言性能不佳</li>\n</ul>\n<p><strong>Comparison of Model Accuracy with Fixed λ:</strong></p>\n<p>在BCFL中，λ 是控制块生成速率的参数。可以将 λ 固定为任意数字以控制块生成速率。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211151851528.png\" /></p>\n<ul>\n<li>BCFL的模型精度始终优于所有其他基线。</li>\n<li>注意，在非IID CIFAR-10情况下BCFL的改进不如先前实验中的显著。原因是 λ 是一个固定的数字，没有分配其最优值。</li>\n</ul>\n<p><strong>Varying Compression Rates:</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211151854900.png\" /></p>\n<ul>\n<li>x轴表示压缩率，y轴表示训练时间后的最终模型精度</li>\n<li>文章的理论最佳设置可以在所有压缩率的基线中实现最高的最终模型精度。</li>\n</ul>\n<p><strong>Comparison of Training Time Consumption:</strong></p>\n<p>文章将目标模型精度分别固定为61%，58% 和82%，比较了每种算法的训练时间以达到目标模型精度</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211151857063.png\" style=\"zoom:50%;\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211151857019.png\" style=\"zoom:50%;\" /></p>\n<ul>\n<li>BCFL算法总能以最短的训练时间达到目标最终模型精度。尽管BCFL可能不是通信流量最少的一个，但它需要较少的全局迭代来完成模型训练，从而使总训练时间成本最小化。更重要的是，与BFL相比，BCFL可以将消耗的训练时间减少90% 以上。</li>\n</ul>\n<p><strong>Varying Client and Miner Population:</strong></p>\n<p>通过将客户端和矿工的数量分别设置为<span class=\"math inline\">\\(N = M = 20、30、40、50\\)</span>来改变系统规模，以研究系统规模对模型精度性能的影响。同时，为了评估BCFL的鲁棒性，我们通过假设每个客户端在每次全局迭代中由于网络状况的突然变化 (例如网络拥塞或故障) 而没有返回模型更新的10% 概率来考虑网络的动态性。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202211151859786.png\" /></p>\n<ul>\n<li>即使网络是动态的，偶尔有离线客户端，BCFL仍然可以实现比BFL更高的模型训练性能。</li>\n<li>随着客户端数量的增加，前两种情况下BCFL的模型精度会更高。<strong>原因在于更多的客户端可以为系统带来更多的计算能力。随着分配给每个客户端的样本数量减少，客户端可以更快地完成本地迭代。</strong>因此，通过在固定的训练时间范围内进行更多的全局迭代，可以提高最终模型的准确性。</li>\n<li>在使用FEMNIST进行的实验中，无法观察到BCFL的模型准确性随客户群体的增加而增加。<strong>原因是每个客户的样本总体随着客户总体的增加而保持不变，从而无法减少本地培训时间。</strong></li>\n<li>BFL的模型准确性随着客户人数的增加而变差。<strong>原因是BFL不能有效地禁止通信流量的增加。随着更多的客户端驻留在系统中，会产生更多的通信流量，这会严重延长通信时间，从而最终导致较低的模型精度。</strong></li>\n</ul>\n","categories":["XF-TANK"],"tags":["Top-Papers"]},{"title":"Digital Stippling Survey","url":"/2022/05/09/Digital%20Stippling%20Survey/","content":"<blockquote>\n<p>Martín, Domingo, et al. \"A survey of digital stippling.\" <em>Computers &amp; Graphics</em> 67 (2017): 24-44.</p>\n</blockquote>\n<ul>\n<li>传统点画</li>\n<li>数字点画</li>\n<li>点画技术</li>\n<li>数字点画和半色调</li>\n</ul>\n<p><span id=\"more\"></span></p>\n<h2 id=\"传统点画\">传统点画</h2>\n<p>传统的点画的目标是：<strong>使用点来表示主题的色调、形状、纹理等</strong></p>\n<p>但是这是一个耗时的过程，需要大量小时才能得出结果，这也就导致了点画艺术品的大小相对较小。并且点画的观察是需要有35cm-65cm的观看距离，在这个距离上，<strong>点的颜色和形状都是可以被辨别的</strong>。——艺术家秉承着<strong>“每一个点都自己的目的”</strong></p>\n<p>这种对单个点的点画和与放置更多点、像素的半色调形成对比。</p>\n<p>在半色调中：<strong>每一个点、像素都应该不被观察到，这样只有他对色调的贡献才是最重要的</strong></p>\n<p>点画图像是静态的，在创建之后不能更改，这就意味着点画的<strong>布局模式</strong>非常重要，它传达了图像中的局部色调。<strong>点画艺术家通常旨在避免任何可见的点图案</strong>，但是一些特征可以有意地以线的形式进行放置点，比如说<code>hedcut</code>变体。</p>\n<p>点画艺术家经常将“点画”和“线条”组合在一起，用点画来表现色调和纹理、用线条来强调边缘和轮廓</p>\n<h2 id=\"数字点画\">数字点画</h2>\n<h3 id=\"点的排列\">点的排列</h3>\n<p>点放置的基本特征是：</p>\n<ol type=\"1\">\n<li>对于给定的色调，点应该均匀放置</li>\n<li>点的放置不能规则，要保持随机</li>\n<li>点的密度表示图像中给定区域的阴影强度</li>\n</ol>\n<hr />\n<p>在第一条特征中，默认是点与点不应该重叠，但是后来NPAR发现，某些传统点画技术依赖色调范围内点画的重叠和合并</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205091938072.png\" style=\"zoom:67%;\" /></p>\n<p>早期的点画还是会在放置的点画上产生了规则的<strong>伪影（人为制造出来的pattern）</strong>。由于 Lloyd 方法的固有特性以及使用其未加权和加权质心 Voronoi 图进行点分布的点画。</p>\n<blockquote>\n<p>伪影一般是不可取的，因为他们暗示了一些不存在的结构</p>\n</blockquote>\n<p>现在避免伪影的办法有如下几种：</p>\n<ol type=\"1\">\n<li><p>随机性/噪声</p></li>\n<li><p>概率密度函数</p></li>\n<li><p>泊松盘分布</p></li>\n<li><p>非重复平铺</p></li>\n<li><p>容量受限的松弛</p></li>\n<li><p>基于示例的点放置：这种方法试图从真实示例中复制分布特征，不仅可以捕捉个别点画艺术家的风格，还避免了纯粹算法点画放置可能传达的过于完美的印象。例如泊松盘，虽然具有均匀但随机的点分布，但是在黑暗区域，点的灵活度较低，导致产生“自动放置”的印象。</p>\n<p>但是为了能匹配真实图片，必须考虑示例的原始尺寸和数字输出的尺寸和分辨率，所以<strong>这种办法不能选择任意数量的点画点</strong>，而是基于示例的点画密度从预期输出图像的空间大小中导出。</p></li>\n</ol>\n<p>但是也可以有意引入伪影来强调线性特征，比如图像或线条中的边缘。</p>\n<p>在采取预防措施后，点会自动、或多或少沿着特征排列。例如：Deussen通过使用色调阈值来实现这个效果。</p>\n<p>在加权的Voronoi点画中，可以通过增加源图像的对比度实现边缘。</p>\n<p>还有一种是将此类线放置作为算法的一部分，比如说<code>hedcut</code>点画就是一种几乎完全依赖于沿线性结构排列的点画的特殊形式</p>\n<p>除去这个方面，数字点画为动态交互开辟了很多可能，人们可以通过放大点画图像来获得更多的细节，但是这个目标需要一种在适当点添加或删除点画的方法，从而不引入可见的伪影。</p>\n<h3 id=\"点的特征\">点的特征</h3>\n<p>一般来说，大多数数字点画方法都是假设所有点都是白纸上的黑色标记，许多早期的方法都是将点画点当做理想圆圈。</p>\n<p>不使用圆圈的第一步是：使用任意点画形状来代替圆圈的位置（直接替换），但是对于一些考虑到点形状的算法不再适用：比如，Hiller扩展了Lloyd的方法来考虑点画标记的形状，Dalal使用了基于频率的包装方法来放置任意点</p>\n<p>其他人一般使用平面图案的一般分布的创建，或者放置一些类似于特定类型的hatch插图的短标记，这些短标记是支持overlap的。这些技术都不需要形状感知。</p>\n<p>除了上述的形式，很多研究人员将点画点用<strong>像素</strong>表示，渲染像素点是不需要复杂的计算的，并且提供了一种将点画点减少到只有其分布能被感知到的可能</p>\n<p>还有一种方法不仅考虑点画的位置，还要尝试将形状建立在手工点画的基础上；最近的工作认为，还需要考虑点的灰度和颜色纹理。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205101547051.png\" /></p>\n<h2 id=\"点画技术\">点画技术</h2>\n<h3 id=\"质心voronoi图\">质心Voronoi图</h3>\n<p>这一类方法的主要目标：<strong>均匀分布点画点，同时避免他们彼此靠得太近</strong></p>\n<p>Lloyd方法提供了一个机制：</p>\n<ol type=\"1\">\n<li>计算初始点分布的Voronoi图</li>\n<li>将点移动到Voronoi图的质心</li>\n<li>迭代1,2步骤</li>\n</ol>\n<p>但是会出现一些链伪影。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205101601277.png\" style=\"zoom:50%;\" /></p>\n<p>Deussen是第一个将这种方法应用与点画的人：如果有参考图像则先生成一个半色调的图（图像的黑暗部分是密集区域，较亮的部分是稀疏的区域），如果没就通过特殊的<code>brush</code>手动添加点， 然后在这个半色调的基础上利用手动控制的<code>brush</code>进行基于CVD的松弛。</p>\n<p><strong>brush的种类：</strong></p>\n<ol type=\"1\">\n<li><p>Edit brush</p>\n<p>添加或删除点是在逐点的基础上完成的，也可以通过在每个时间步长以给定数量的点进行操作的画笔来完成的。也可以将点标记为固定的，这可以防止它们受到后续移动操作的影响。</p></li>\n<li><p>Relaxation brush</p>\n<p>使用此刷子，用户能够放松点画点的位置，以实现均匀分布。</p></li>\n<li><p>Jitter brush</p>\n<p>有时候点太规则了，如果用户想要消除视觉边界或更改区域中的均匀间距，就可以使用该<code>brush</code>来获得一个小的随机偏移（点到点距离的百分比）</p></li>\n<li><p>Shape brush</p>\n<p>形状画笔允许修改点的参数。 用户可以按给定的百分比放大/缩小点或直接设置它们的大小。 这有助于稍微改变区域的色调或生成强烈的深色边框。</p></li>\n</ol>\n<hr />\n<p>Secord将Deussen的方法进行了更新：<strong>根据要复制的图像的色调来权衡Voronoi区域的计算</strong>。</p>\n<p>使用这种加权的质心Voronoi图 (wcvd) 的主要优点是：现在在迭代放置点画时会自动考虑图像的颜色/灰度值——不再需要交互式使用<code>brush</code>。</p>\n<p>这种方法引入了密度函数，也就是每一个图像的位置根据初始图像的深浅会给定一个密度值，那么质心的位置就应该是 <span class=\"math display\">\\[\nC_i=\\frac{\\int_Ax\\rho(x,y)dA}{\\int_A\\rho(x,y)dA}\n\\]</span> <strong>这里的<span class=\"math inline\">\\(\\rho(x,y)\\)</span>是每个像素点的密度值</strong></p>\n<p>这样再迭代过程中，质心会不断向高密度区域靠拢，会导致点不断在高密度区域聚集，这样就能区别高低密度的区域。</p>\n<p>Secord还提出了一个基于预先计算点画点分布的快速点画过程。</p>\n<p>将恒定色调的图像结果成为点画等级：<span class=\"math inline\">\\(0\\leq t \\leq 1\\)</span>，最高的度是纯黑色的度，其余逐渐递减</p>\n<p>下图是一个从黑色到白色的九个等级，分布有1000个点画，每个图相差125个点。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205101649573.png\" style=\"zoom:50%;\" /></p>\n<p>在预先计算好的点画等级，就可以快速stipple一个图像：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">for all pixel positions (x,y) ∈ [0,1]×[0,1] do</span><br><span class=\"line\">\tMap image value at (x,y) to stipple level l</span><br><span class=\"line\">\tCopy stipples on level l inside (x − 1/2, y − 1/2) × (x + 1/2, y + 1/2)</span><br><span class=\"line\">\tto output</span><br><span class=\"line\">end for</span><br></pre></td></tr></table></figure>\n<p>将图像切分成很多小region，然后检查每个像素的值，确定哪个点画的级别是合适的，并将落在像素覆盖区域的所有点画复制输出。</p>\n<blockquote>\n<p>会降低图像的分辨率。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205101656670.png\" style=\"zoom:50%;\" /></p>\n</blockquote>\n<hr />\n<p>Hiller基于像素的方法计算WCVD，将其扩展到了线和多边形。</p>\n<p>这个方法让对象可以旋转，需要去确定几何距和主要惯性轴。</p>\n<p>算法的输入是一组在平面上的对象<span class=\"math inline\">\\(\\{Q_i\\}_{i=1}^k\\)</span>和一个密度函数<span class=\"math inline\">\\(\\rho\\)</span></p>\n<p>输出是松弛的质心Voronoi镶嵌和松弛的对象分布</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">确定对象Q的质心和对象的主要惯性轴</span><br><span class=\"line\">repeat</span><br><span class=\"line\">\t确定每一个对象的Voronoi图</span><br><span class=\"line\">\tfor i=1 to k do begin</span><br><span class=\"line\">\t\t计算每一个Voronoi图的质心z</span><br><span class=\"line\">\t\t将对象的质心c移动到Voronoi图的质心z中</span><br><span class=\"line\">\t\t调用ORIENTATION(根据角度phi调整对象的主轴角度)</span><br><span class=\"line\">\tend</span><br><span class=\"line\">until 点z满足收敛准则</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ORIENTAION():</span><br><span class=\"line\">\t输入：Voronoi区域V和对象Q，他们俩的质心重叠</span><br><span class=\"line\">\t输出：对象Q围绕着其质心旋转角度phi</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205101806374.png\" style=\"zoom:50%;\" /></p>\n<hr />\n<p>Balzer等人解决了WCVD的主要问题之一——<strong>结果倾向于规律的伪影，例如可见链</strong></p>\n<p>他们证明：传统的WCVD会产生规律的伪影是因为迭代乜有及时停止，似乎没有理想的时间点来停止迭代。</p>\n<p>他们在松弛过程中为每个区域引入了容量约束来使得约束收敛到无伪影分布。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205101809281.png\" style=\"zoom:50%;\" /></p>\n<p>定义站点<span class=\"math inline\">\\(s_i\\)</span>对应的Voronoi <span class=\"math inline\">\\(V_i\\)</span>的容量计算如下： <span class=\"math display\">\\[\nc(s_i)=\\int_{V_i}\\rho(x)dx\n\\]</span> 所有点的分布最佳适应密度函数<span class=\"math inline\">\\(c^*\\)</span>为： <span class=\"math display\">\\[\nc^*=\\frac{\\int_\\Omega\\rho(x)dx}{n}\n\\]</span> 容量约束就是<span class=\"math inline\">\\(c(s_i)=c^*\\)</span></p>\n<p>一个站点的容量相当于其相应的Voronoi区域的面积，该区域用密度函数加权。因此，我们的容量限制要求分布中的每个站点都同等重要。</p>\n<ol type=\"1\">\n<li>先从随机分配开始：<span class=\"math inline\">\\(A: X \\to S\\)</span>，其中X有m个点，S有n个站点，这些都满足容量约束</li>\n<li>在初始化之后，最小化<span class=\"math inline\">\\(F&#39;(X,A)=\\sum^m_{i=1}|x_i-A(x_i)|^2\\)</span>，通过交换X中属于不同站点的点来最小化<span class=\"math inline\">\\(F&#39;\\)</span></li>\n<li>对交换操作的限制保证了容量约束 C 在整个最小化过程中保持不变。</li>\n<li>执行分配交换，直到没有进一步的交换减少能量并且算法停止在代表 <span class=\"math inline\">\\(F&#39;\\)</span> 的局部最小值的稳定状态。</li>\n</ol>\n<blockquote>\n<p>这种局部最小值是通过优化分配A来实现的，而不是像Lloyd放法那样通过重新放置站点s来实现的。</p>\n</blockquote>\n<h3 id=\"分布函数\">分布函数</h3>\n<p>Secord基于从输入图像派生的概率密度函数，该函数用于重新分布一组初始均匀分布的随机点。这种方法不仅消除了迭代处理，而且还允许创建帧连贯动画，因为 PDF 会针对动画图像序列不断变化。</p>\n<p><strong>从一维PDF中获得随机点（二维同理）：</strong></p>\n<p>已知PDF为<span class=\"math inline\">\\(p(x)\\)</span></p>\n<ol type=\"1\">\n<li>将<span class=\"math inline\">\\(p(x)\\)</span>进行积分:<span class=\"math inline\">\\(C(x)=\\int_0^xp(t)dt\\)</span></li>\n<li>将<span class=\"math inline\">\\(C(x)\\)</span>进行反函数操作得到：<span class=\"math inline\">\\(x&#39;=C^{-1}(x)\\)</span></li>\n<li>在y轴等距离采点，在x轴上就可以得到密度分布</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205101937995.png\" style=\"zoom:50%;\" /></p>\n<hr />\n<p>Kopf提出了一种快速算法：渐进式蓝噪声<code>Wang tile</code></p>\n<p>通过使用飞镖投掷算法来生成蓝噪声图块，其中飞镖的半径会逐渐减少来获得一个密度增加的点的渐进序列。这样的图块可以快速生成具有任意非均匀密度的点集。</p>\n<p>为了避免伪影重复，我们使用<code>Wang tile</code>，<strong>难点在于，不同密度的<code>Wang tile</code>相互拼接会导致边缘不符合泊松盘属性。</strong></p>\n<p>因此，我们的想法是：通过合并几个渐进的环形源块来创建一组<code>Wang tile</code></p>\n<p>目标是生成：<span class=\"math inline\">\\(2K^2\\)</span>个<code>Wang tile</code></p>\n<ol type=\"1\">\n<li>首先应该为每一个K创建一个源砖</li>\n<li>将其余对应边缘的源砖合并</li>\n<li>合并后，我们定义结果点的顺序排序来使得图块渐进</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205102015127.png\" /></p>\n<blockquote>\n<p>按照上文所述，我们先创建一个源砖T，并合并到与其边缘颜色对应的其他四个源砖N、E、S、W。</p>\n<p>为了合并两个图块，我们需要计算连接的接缝，由于两个源砖都是蓝噪声砖，所以接缝两侧的点都较好的分离</p>\n<p>所以目标是：<strong>寻找一个接缝，避免缝左右的点不符合蓝噪声</strong></p>\n</blockquote>\n<p>做法就是：将两个源砖做并集，然后利用Voronoi图来将集中的相邻点分开，最后的缝就是用Voronoi图的边构成。我们使用Dijkstra的最短路径来计算s,t的最短路径（s，t就是两个砖拼接起来的端点）。</p>\n<p>这样的好处是：防止接缝进入瓷砖的内部太深</p>\n<hr />\n<p>Jones介绍了一种基于 Voronoi 图的<span class=\"math inline\">\\(O(NlogN)\\)</span> 算法，但没有松弛。在每一步中，算法都会搜索剩余空间最多的区域来放置一个新点。</p>\n<p>Dunbar 和 Humphreys描述了一种类似的增量算法来计算泊松盘分布，该算法基于专用数据结构以及对仅具有线性运行时间的类泊松磁盘分布的修改。</p>\n<hr />\n<p>Xu 开发了一种基于 Delaunay 三角剖分的容量受限版本的方法。 在某种程度上，这形成了和 Balzer 等人引入的容量受限的 Voronoi 镶嵌一样的效果。但计算时间更快。</p>\n<p>Delaunay三角就是将站点当做点，然后和相邻的两个点连接起来形成一个三角形，优化的目标函数如下： <span class=\"math display\">\\[\nT=argmin\\frac{1}{m}\\sum_{t\\in T}(A_t-\\frac{1}{m}\\sum_{t\\in T}A_t)^2\n\\]</span> <span class=\"math inline\">\\(A_t\\)</span>是三角形的面积，<span class=\"math inline\">\\(m\\)</span>是三角形的数量。</p>\n<p>如果是不均匀的图像，则优化的目标函数如下： <span class=\"math display\">\\[\nT=argmin\\frac{1}{m}\\sum_{t\\in T}(A_td_t-\\frac{1}{m}\\sum_{t\\in T}A_td_t)^2\n\\]</span> <span class=\"math inline\">\\(d_t\\)</span>表示的是每个三角形t内的平均像素密度。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205102048762.png\" /></p>\n<h3 id=\"通用分布函数\">通用分布函数</h3>\n<p>在平面上分布点的问题，其应用远不止点画。 例如，点分布的通常目标是符合一些数学属性，例如蓝噪声。 然后，它们可以用于多种应用，如纹理、基于点的渲染、蒙特卡洛方法等； 点画只是其中一种可能性。</p>\n<hr />\n<p>Ebeida展示了一种计算均匀泊松盘分布的方法，该分布既是最大的又是无偏差的，并且可以在非凸域上使用。</p>\n<p>算法有如下步骤：</p>\n<ol type=\"1\">\n<li>建立一个背景网格；标注好内部网格和边缘网格</li>\n<li>阶段一，向网格中扔飞镖，去除掉击中的飞镖</li>\n<li>生成剩余空隙的多边形近似值</li>\n<li>阶段二，向空隙扔飞镖，更新剩余区域</li>\n</ol>\n<p>我们通过生成覆盖输入域边界框的统一网格来启动算法。单元边为长度<span class=\"math inline\">\\(r/\\sqrt{2}\\)</span>，单元对角线为长度<span class=\"math inline\">\\(r\\)</span>，因此<strong>每个单元只能容纳单个样本。</strong>每个单元格都有两个属性。有效单元格是可能接受样本的单元格；边界单元格与一个或多个输入边相交。</p>\n<p>在有效的单元格中扔飞镖，如果这个飞镖命中了非空盘区域或者边界之外，就认定此次迭代未命中，如果命中则将其命中的网格更改为无效。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205120933946.png\" style=\"zoom:67%;\" /></p>\n<p>第二步就是对于每一个有效的网格，去找其空盘的区域，也就是说<strong>圆弧与网格线界定的封闭区域，</strong>为了方便计算，用弦来代替弧</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205120936965.png\" /></p>\n<p>第三步和第一步类似，就是将第二步产生的多边形去代替步骤一中的网格。</p>\n<hr />\n<p>施洛默提出了一种方法，该方法应用将点从样本迭代移动到最远点或样本中所有点的策略，以增加每对点之间的总距离，从而获得几乎最佳的蓝噪声特性。</p>\n<p>基本算法非常简单：每一步从一组点<span class=\"math inline\">\\(X\\)</span>中去一个点，并试图将其移动到一个新的位置，该位置尽可能原理其余点，即最远点。</p>\n<p>本文利用Delaunay三角剖分，最远距离计时所有Delaunay三角剖分中的最大外接圆圆心。即要移动<span class=\"math inline\">\\(x\\)</span>，则将其从三角剖分中移除，然后检查剩余的三角形来找到最远的点<span class=\"math inline\">\\(f\\)</span>，将<span class=\"math inline\">\\(x\\)</span>插入到<span class=\"math inline\">\\(f\\)</span>中</p>\n<hr />\n<p>Heck等人解决了点分布中的混叠问题，并根据高频中的振荡水平定义了两种新类型的蓝噪声采样模式: <u>步进蓝噪声和单峰蓝噪声</u>。它们产生的模式防止了结构化的混叠。</p>\n<h3 id=\"基于示例\">基于示例</h3>\n<blockquote>\n<p>旨在直接从特定示例中提取特定属性，并在基于示例的方法中使用这些属性来生成新图像，或者通过使用用于分布点画点的示例 (即，基于示例的点画) 或通过使用示例创建点画点 (即基于示例的点画)。</p>\n</blockquote>\n<p>Barla使用基于示例的方法来捕获绘制的输入图案的样式，然后以相同的样式合成更大的图案。他们通过评估元素集群及其分布来捕获输入模式的组织特征。基于此分析，他们使用<strong>邻域匹配算法</strong>合成了新的模式，以生成新的感知相似的笔画簇以及其中的几组。合成依赖于Lloyd的方法来生成种子位置，然后将学习到的特征用于实际元素和笔画放置。Barla等人的技术存在的问题是：<em>它只生成模式本身，而不考虑目标色调</em>。</p>\n<p>Kim在示例图中考虑了一整套点画图案，为不同的色调提取不同的补丁。 然后，他们提取点画的中心，计算得到的分布纹理的<strong>灰度共生矩阵 (GLCM)</strong>，并使用它来记录几个纹理统计数据。 然后，他们可以使用拒绝采样为每个不同的色调级别合成新的分布纹理，从而最大限度地减少样本和合成补丁之间的统计测量之间的误差。 他们要么直接使用合成结果，要么根据来自示例的扫描将点画点纹理放置在新位置。 这种整体方法适用于浅色调和深色调，但<em>在手绘示例中点画可以合并的中间色调存在问题</em>。</p>\n<blockquote>\n<p>灰度共生矩阵：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205121202273.png\" style=\"zoom:50%;\" /></p>\n<p>以（1，1）点为例，GLCM（1，1）值为1说明只有一对灰度为1的像素水平相邻。GLCM（1，2）值为2，是因为有两对灰度为1和2的像素水平相邻。</p>\n</blockquote>\n<p>Martín通过将点不再视为完全黑色的标记来解决后一问题-它们捕获并使用点画点示例作为灰度/彩色纹理。</p>\n<h3 id=\"结构感知\">结构感知</h3>\n<p><strong>强调图像边缘，</strong>Mould提出了一种方法：</p>\n<p>首先从输入图像中构造一个图：图中的每一个像素都是一个节点，每个节点的重要性计算为<span class=\"math inline\">\\(\\alpha d+\\beta g\\)</span>，其中<span class=\"math inline\">\\(d\\)</span>是黑暗程度，<span class=\"math inline\">\\(g\\)</span>是梯度幅度，<span class=\"math inline\">\\(\\alpha=1/\\sum d\\)</span>，<span class=\"math inline\">\\(\\beta = 1/\\sum g\\)</span>。</p>\n<blockquote>\n<p>渐进式算法从距离为零的单个站点 (例如，图像的一个角) 开始，并向外扩散，从而计算图形中的最短路径。当最短路径超过阈值长度时，将放置距离为零的新站点; 我们继续直到探索整个图。</p>\n</blockquote>\n<p>初始种子放置在图像中的某个位置。Dijkstra的算法用于扩展种子周围的区域；当新扩展的节点的路径成本超过阈值时，扩展步骤会触发添加新的点画。<strong>新的点画位置是具有最高梯度幅度的前沿节点，因为我们希望将点画优先放置在图像边缘上</strong>。至关重要的是，新站点的距离设置为零，因此扩展最初发生在新站点附近 (因为堆中的所有其他节点都具有至少阈值的距离)。当图形的任何部分都没有待扩展时，渐进算法终止。</p>\n<ol type=\"1\">\n<li>围绕第一个中心展开一个区域；</li>\n<li>在边界上选择了一个新的中心；</li>\n<li>新区域被扩展，直到再次达到阈值；</li>\n<li>第三个中心被放置，并扩展</li>\n</ol>\n<p>在图中，黑色轮廓表示距离中心点画最近的节点集，类似于Voronoi区域。在放置新点画时，边界是灰色和白色区域之间的边界。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205121125327.png\" /></p>\n<hr />\n<p>Li和mould后来推出了一种方法，该方法在强调线性特征的同时，产生了更好地保留原始图像的色调和对比度的结果。他们的总体方法是按照输入图像的像素对对比度和结构极端 (黑色或白色) 像素的重要性得出的优先级顺序来处理输入图像的像素。然后，如果放置点画点，则引入的误差将分布在相邻像素之间，从而导致其优先级的更新。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205121138807.png\" /></p>\n<h3 id=\"hedcut\">Hedcut</h3>\n<p>Kim通过提取图像中的特征线来模拟手动过程，使用这些特征线生成距离场，然后依次使用这些特征线生成平行的引导线，沿着这些引导线，点画点使用约束Lloyd算法进行排列。对于最终的图像，作者通过基于色调图像调节点画的大小来控制色调。</p>\n<p>之后他们不仅使用图像特征提取引导线，还考虑了等照度线。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205121143390.png\" /></p>\n<p>Son等人进一步改进了结果，不仅从特征图中提取了一组平行线，而且提取了一个特征矢量场，并从中提取了一个结构网格用于<kbd>hatch</kbd>,此结构网格遵循垂直和平行于从图像中提取的特征的方向。然后在网格线相交的位置排列点画点，并根据结构网格和色调图对点进行参数化。</p>\n<h3 id=\"衡量与基准\">衡量与基准</h3>\n<p>Halper研究了心理学和NPR之间的关系，从而提出了关于不同渲染风格如何改变观看者对各自图像的感知和交互的建议。</p>\n<p>研究人员使用了知觉研究（即使用人类参与者）或对结果进行物理分析（即不涉及人类；例如光谱分析）。</p>\n<p>Isenberg等人进行了一项实验，比较了手绘插图和计算机生成的插图，包括点画作为插图风格。他们发现，<strong>人们可以很容易地区分这两种类型的点画，特别是由于WCVD驱动的点画放置伪影，以及在计算机生成的图像中使用大量点画点的倾向</strong>。然而，参与者表示，他们欣赏计算机生成的图像的准确性，而他们喜欢手绘图像的“角色”</p>\n<h2 id=\"数字点画与半色调\">数字点画与半色调</h2>\n<p>点画和半色调都有共同的目标，即代表二进制介质的连续色调图像。</p>\n<p>然而，我们从观察到手工点画是一种艺术形式，与其他用于双调再现的技术 (例如半色调) 相反，半色调纯粹是转换图像的算法方法。</p>\n<p>前者导致相对规则的表示，而后者产生更随机的结果。在这两个极端之间，绿色噪声半色调结合了这两种方法的特性。</p>\n<p>尽管如此，所有形式的半色调都使用像素或打印机点作为它们的主要原语，他的目的是放置点，使它们的图案导致<strong>对正确色调的感知</strong>，理想情况下根本<strong>看不到各个点</strong>。</p>\n<p>传统点画的目标与其相反：每个点都更大，并且有一个目的： 除了简单地再现色调外，圆点还经常被放置在图像中的特征和细节引导下，有时会与其他基元 (例如线条) 组合并相互作用。</p>\n<p>然而，在迄今为止的数字点画中，这种控制是缺乏的——仅存在部分 (算法) 解决方案 。因此，今天的数字点画在很大程度上缺乏传统艺术中的美学控制，就像半色调一样，虽然它能够再现通常以艺术示例的方式放置的大点的方面。</p>\n","categories":["Vis_Lab"],"tags":["Overview"]},{"title":"NLP Knowledge Tutorial","url":"/2022/05/06/NLP-Knowledge-Tutorial/","content":"<ul>\n<li>CRF技术</li>\n<li>Viterbi（维特比）算法</li>\n<li>Word Embedding 词嵌入</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"preliminaries\">Preliminaries</h2>\n<h3 id=\"crf\">CRF</h3>\n<p>CRF，全称 Conditional Random Fields，中文名：条件随机场。</p>\n<h4 id=\"什么时候用crf\">什么时候用CRF</h4>\n<p>当输出序列的每一个位置的状态，需要考虑到<em>相邻位置</em>的状态的时候。举两个例子：</p>\n<ol type=\"1\">\n<li>假设有一堆小明日常生活的照片，可能的状态有吃饭、洗澡、刷牙等，大部分情况，我们是能够识别出小明的状态的，但是如果你看到一张小明露出牙齿的照片，在没有相邻的小明的状态为条件的情况下，是很难判断他是在吃饭还是刷牙的。这时，就可以用CRF。</li>\n<li>假设有一句话，这里假设是英文，我们要判断每个词的词性，那么对于一些词来说，如果不知道相邻词的词性的情况下，是很难准确判断每个词的词性的。这时，也可以用CRF。</li>\n</ol>\n<h4 id=\"什么是随机场\">什么是随机场</h4>\n<p>随机变量的集合称为随机过程。由一个空间变量索引的随机过程，称为随机场。</p>\n<p>一组随机变量按照某种概率分布随机赋值到某个空间的一组位置上时，这些赋予了随机变量的位置就是一个随机场。</p>\n<p>比如上面的例子中，小明的一系列照片分别是：什么状态组成了一组位置，我们从一组随机变量{吃饭、洗澡、刷牙}中取值，随机变量遵循某种概率分布，随机赋给一组照片的某一张的输出位置，并完成这组照片的所有输出位置的状态赋值后，这些状态和所在的位置全体称为随机场。</p>\n<h4 id=\"为什么叫条件随机场\">为什么叫条件随机场</h4>\n<p><strong>马尔可夫随机场：</strong></p>\n<p>如果一个位置的赋值只和与它相邻的位置的值有关，与和它不相邻的位置的值无关，那么这个随机场就是一个马尔可夫随机场。</p>\n<p>这个假设用在小明和词性标注的例子中的话就是我们是通过前一张照片或者后一张照片的状态来判断当前照片的状态是刷牙还是吃饭，我们是根据前一个词的词性或者后一个词的词性来判断当前词的词性是什么。</p>\n<p><strong>条件随机场(CRF)：</strong></p>\n<p>给定了一组观测状态(照片可能的状态/可能出现的词)下的马尔可夫随机场。</p>\n<p><strong>CRF考虑到了观测状态这个<u>先验条件</u></strong></p>\n<h4 id=\"crf如何提取特征\">CRF如何提取特征</h4>\n<p>CRF中有两类特征函数，分别是状态特征和转移特征</p>\n<p>​ 状态特征用当前节点(某个输出位置可能的状态中的某个状态称为一个节点)的状态分数表示</p>\n<p>​ 转移特征用上一个节点到当前节点的转移分数表示。</p>\n<p><strong>损失函数：</strong> <span class=\"math display\">\\[\nLossFunction = \\frac{P_{RealPath}}{P_1+P_2+...+P_N}\n\\]</span> <span class=\"math inline\">\\(P_{RealPath}\\)</span>表示真实路径分数(包括状态分数和转移分数)，<span class=\"math inline\">\\(P_i\\)</span>表示其他所有可能的路径的分数(包括状态分数和转移分数)。</p>\n<p>这里的路径用词性来举例就是一句话对应的词性序列，真实路径表示真实的词性序列，其他可能的路径表示其他的词性序列。</p>\n<hr />\n<p>对于词性标注来说，给定一句话和其对应的词性序列，那么其似然性的计算公式：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205062241917.png\" /></p>\n<ul>\n<li><span class=\"math inline\">\\(l\\)</span>表示某个词上定义的状态特征的个数，<span class=\"math inline\">\\(k\\)</span>表示转移特征的个数，<span class=\"math inline\">\\(i\\)</span>表示词在句子中的位置。</li>\n<li><strong><span class=\"math inline\">\\(t_k\\)</span>和<span class=\"math inline\">\\(s_l\\)</span>分别是转移特征函数和状态特征函数。</strong></li>\n<li><span class=\"math inline\">\\(λ_k\\)</span>和<span class=\"math inline\">\\(μ_l\\)</span>分别是转移特征函数和状态特征函数的权重系数，通过最大似然估计可以得到。</li>\n<li>上面提到的状态分数和转移分数都是非规范化的对数概率，所以概率计算都是加法，这里加上一个exp是为了将对数概率转为正常概率。实际计算时还会除以一个规范化因子<span class=\"math inline\">\\(Z(x)\\)</span>，其实就是一个softmax过程。</li>\n</ul>\n<p>在只有CRF的情况下，上面说的两类特征函数都是人工设定好的：人工设定了观测序列的特征</p>\n<ul>\n<li><p>人为设定状态特征模板，比如设定“某个词是名词”等。</p></li>\n<li><p>人为设定转移特征模板，比如设定“某个词是名词时，上一个词是形容词”等。</p></li>\n</ul>\n<p>给定一句话的时候，就根据上面设定的特征模板来计算这句话的特征分数，计算的时候，如果这句话符合特征模板中的特征规则，则那个特征规则的值就为1，否则就为0。</p>\n<p><kbd>所以如果我们能使用深度神经网络的方式，特征就可以由模型自己学习得到，这就是使用BERT+CRF的原因。</kbd></p>\n<h4 id=\"命名实体识别中的bert和crf是怎么配合的\">命名实体识别中的BERT和CRF是怎么配合的</h4>\n<p>由BERT学习序列的状态特征（实体标注），从而得到一个状态分数（每个可能的状态的softmax前的概率），该分数直接输入到CRF层，省去了人工设置状态特征模板。</p>\n<p><strong>实体标注</strong>：</p>\n<p>​ 通常用<span class=\"math inline\">\\(BIO\\)</span>标注，<span class=\"math inline\">\\(B\\)</span>表示词的开始，<span class=\"math inline\">\\(I\\)</span>表示词的延续，<span class=\"math inline\">\\(O\\)</span>表示非实体词</p>\n<p>​ 比如我们要识别人名和地点</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>小</th>\n<th>明</th>\n<th>爱</th>\n<th>北</th>\n<th>京</th>\n<th>的</th>\n<th>天</th>\n<th>安</th>\n<th>门</th>\n<th>。</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>B-Person</td>\n<td>I-Person</td>\n<td>O</td>\n<td>B-Location</td>\n<td>I-Location</td>\n<td>O</td>\n<td>B-Location</td>\n<td>I-Location</td>\n<td>I-Location</td>\n<td>O</td>\n</tr>\n</tbody>\n</table>\n<p>BERT层学到了句子中每个字符最可能对应的实体标注是什么，这个过程是考虑到了每个字符左边和右边的上下文信息的，但是输出的最大分数对应的实体标注依然可能有误，不会100%正确的。所以需要CRF</p>\n<p>CRF需要的两个特征函数，其中状态特征函数BERT已经提供了，所以CRF需要特征转移函数（特征转移矩阵），该矩阵表示了所有标注状态之间的组合。</p>\n<p>比如上述一共5个状态，加上START和END就是7种状态，那么这个矩阵就是一个<span class=\"math inline\">\\(7\\times 7\\)</span>的矩阵。这个矩阵一开始是随机初始化的，通过训练后慢慢会知道哪些组合更符合规则，哪些更不符合规则。</p>\n<h3 id=\"viterbi维特比算法\">Viterbi(维特比)算法</h3>\n<p>举个例子：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>小</th>\n<th>明</th>\n<th>爱</th>\n<th>北</th>\n<th>京</th>\n<th>。</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>B-Person</td>\n<td>I-Person</td>\n<td>O</td>\n<td>O</td>\n<td>O</td>\n<td>O</td>\n</tr>\n</tbody>\n</table>\n<p>状态集合：<span class=\"math inline\">\\(\\{B-P,I-P,O\\}\\)</span></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205062328986.png\" style=\"zoom:50%;\" /></p>\n<p>首先，我们分别计算红、黄、蓝三个节点的输入连线的概率，以红色节点举例，我们先假设红色节点在最优路径上，那么输入到该节点的三条连线中，概率最大的那条一定在最优路径上，同理得出黄、蓝的连线。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205062331071.png\" style=\"zoom:50%;\" /></p>\n<p>最后递归获得所有的最优路线。由于就有三个起始状态，所以最后就有三条路径。</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>路线1</th>\n<th>B-P</th>\n<th>I-P</th>\n<th>O</th>\n<th>O</th>\n<th>O</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><strong>路线2</strong></td>\n<td><strong>B-P</strong></td>\n<td><strong>O</strong></td>\n<td><strong>I-P</strong></td>\n<td><strong>B-P</strong></td>\n<td><strong>I-P</strong></td>\n</tr>\n<tr class=\"even\">\n<td><strong>路线3</strong></td>\n<td><strong>O</strong></td>\n<td><strong>B-P</strong></td>\n<td><strong>B-P</strong></td>\n<td><strong>I-P</strong></td>\n<td><strong>B-P</strong></td>\n</tr>\n</tbody>\n</table>\n<p>然后利用上文所提到的状态转移矩阵：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205062340513.png\" /></p>\n<p>初始节点的概率计算为：<span class=\"math inline\">\\(Π(B-P) \\times P(小|B-P)\\)</span></p>\n<p>迭代方式是：$ P_{上一层} P_{转移概率} P(明|B-P)$</p>\n<p>最后选取概率最大的路径。</p>\n<h2 id=\"word-embedding-词嵌入\">Word Embedding 词嵌入</h2>\n<p>Embedding在数学上表示一个maping，<span class=\"math inline\">\\(f: X \\to Y\\)</span>， 也就是一个function，其中该函数是injective（就是我们所说的单射函数，每个<span class=\"math inline\">\\(Y\\)</span>只有唯一的<span class=\"math inline\">\\(X\\)</span>对应，反之亦然）和structure-preserving (结构保存，比如在X所属的空间上<span class=\"math inline\">\\(X1 &lt; X2\\)</span>,那么映射后在<span class=\"math inline\">\\(Y\\)</span>所属空间上同理 <span class=\"math inline\">\\(Y1 &lt; Y2\\)</span>)。</p>\n<p><strong>那么对于word embedding，就是将单词word映射到另外一个空间，其中这个映射具有injective和structure-preserving的特点。</strong></p>\n<blockquote>\n<p>通俗的翻译可以认为是单词嵌入，就是把X所属空间的单词映射为到Y空间的多维向量，那么该多维向量相当于嵌入到Y所属空间中，一个萝卜一个坑。</p>\n</blockquote>\n","categories":["Wenge"],"tags":["Base-Knowledge"]},{"title":"Deep Learning for NER Survey","url":"/2022/05/06/Deep-Learning-for-NER-Survey/","content":"<blockquote>\n<p>Li, Jing, et al. \"A survey on deep learning for named entity recognition.\" <em>IEEE Transactions on Knowledge and Data Engineering</em> 34.1 (2020): 50-70.</p>\n</blockquote>\n<ul>\n<li>我们将深入研究深度学习技术在NER中的应用，以启发和指导该领域的研究人员和从业人员。</li>\n<li>我们以表格形式整合了NER语料库，即现成的NER系统 (来自学术界和工业界)，为NER研究社区提供有用的资源。</li>\n<li>我们提出了一种新的分类法，该分类法沿着三个轴系统地组织基于DL的NER方法: 输入的分布式表示，上下文编码器 (用于捕获标签解码器的上下文相关性) 和标签解码器 (用于预测给定序列中的单词标签)。</li>\n<li>此外，我们还调查了在新的NER问题设置和应用程序中最近应用的深度学习技术的最具代表性的方法。</li>\n<li>最后，我们向读者介绍了NER系统面临的挑战，并概述了该领域的未来方向。</li>\n</ul>\n<p><span id=\"more\"></span></p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>英文简称</th>\n<th>英文全称</th>\n<th>中文</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>NER</td>\n<td>Named Entity Recognition</td>\n<td>命名实体识别</td>\n</tr>\n<tr class=\"even\">\n<td>NE</td>\n<td>Named Entity</td>\n<td>命名实体</td>\n</tr>\n<tr class=\"odd\">\n<td>DL</td>\n<td>Deep Learning</td>\n<td>深度学习</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"背景\">背景</h2>\n<p><strong>应用与NER的技术：</strong></p>\n<ol type=\"1\">\n<li>基于规则的方法，它们不需要带注释的数据，因为它们依赖于手工编制的规则；</li>\n<li>无监督学习方法，依赖无监督算法，无需手动标记训练示例；</li>\n<li>基于特征的监督学习方法，依赖于监督学习算法和仔细的特征工程；</li>\n<li>基于深度学习的方法，自动从原始输入中以端到端的方式发现分类和/或检测所需的表示。我</li>\n</ol>\n<p><strong>什么是NER？</strong></p>\n<p>命名实体是一个单词或短语，可以从一组具有相似属性的其他项目中清楚地识别一个项目。</p>\n<p>命名实体的示例是一般域中的组织、人员和位置名称；生物医学领域的基因、蛋白质、药物和疾病名称。</p>\n<p><strong>NER 是将文本中的命名实体定位和分类为预定义实体类别的过程。</strong></p>\n<blockquote>\n<p>例如给了一个序列<span class=\"math inline\">\\(s = &lt;w_1,w_2,...,w_N&gt;\\)</span>，NER是一个tuples <span class=\"math inline\">\\(&lt;I_s,I_e,t&gt;\\)</span>。</p>\n<p><span class=\"math inline\">\\(I_s,I_e\\)</span>分别表示这个NE的起始和结束的index</p>\n<p><span class=\"math inline\">\\(t\\)</span>代表这个NE属于哪一类</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205061024751.png\" /></p>\n</blockquote>\n<h3 id=\"ner-评估指标\">NER 评估指标</h3>\n<h4 id=\"精确匹配评估\">精确匹配评估</h4>\n<p>NER涉及到识别实体边界和实体类型：当使用”精确匹配评估“时，只有边界和类型都正确的时候才算识别正确。</p>\n<ul>\n<li>真阳性<strong>(TP)</strong>：被NER识别并符合基本事实的实体。</li>\n<li><img src=\"../../../Library/Application%20Support/typora-user-images/image-20220507083943009.png\" alt=\"image-20220507083943009\" />假阳性<strong>(FP)</strong>：被NER识别但不符合基本事实的实体。</li>\n<li>假阴性<strong>(FN)</strong>：在基本事实中注释的实体，未被NER识别。</li>\n</ul>\n<p><strong>Precision 衡量NER系统呈现正确实体的能力</strong> <span class=\"math display\">\\[\nPrecision = \\frac{TP}{TP+FP}\n\\]</span> <strong>Recall 衡量NER系统识别语料库中所有实体的能力</strong> <span class=\"math display\">\\[\nRecall = \\frac{TP}{TP+FN}\n\\]</span> <strong>F-Score是Precision和Recall的调和平均值</strong> <span class=\"math display\">\\[\nF-score = 2\\times \\frac{Precision \\times Recall}{Precision + Recall}\n\\]</span> 由于大多数NER系统涉及多种实体类型，因此需要评估所有实体类的性能。目前有两种测量方法：</p>\n<ol type=\"1\">\n<li><p>宏观平均F-score</p>\n<p>独立计算每一个实体类型的F-score，最后去平均值（同等对待所有的实体类型）</p></li>\n<li><p>微观平均F-score</p>\n<p>聚合来自所有类的实体的贡献来计算平均值（平等对待所有实体），<strong>可能会受到大类实体识别质量的严重影响</strong></p></li>\n</ol>\n<h4 id=\"宽松匹配评估\">宽松匹配评估</h4>\n<p>如果一个实体被分配了其正确的类型，不管其边界，只要与真实情况的边界冲得，就认为正确类型是可信的；无论实体的类型分配，都计入了正确的边界。</p>\n<h3 id=\"ner的传统方法\">NER的传统方法</h3>\n<ol type=\"1\">\n<li>基于规则</li>\n<li>无监督学习</li>\n<li>基于特征的监督学习</li>\n</ol>\n<h4 id=\"基于规则\">基于规则</h4>\n<p>基于规则的 NER 系统依赖于手工制定的规则，可以根据特定领域的地名词典和句法词汇模式设计规则。</p>\n<ul>\n<li>使用 Brill 规则推理方法进行语音输入：该系统根据 Brill 的词性标注器自动生成规则。</li>\n<li>在生物医学领域，提出了 ProMiner，它利用预处理的同义词词典来识别生物医学文本中的蛋白质提及和潜在基因。</li>\n<li>在电子健康记录中提出了一种基于字典的 NER 方法。实验结果表明，该方法提高了召回率，同时对精度的影响有限。</li>\n</ul>\n<p>这些系统<kbd>LaSIE-II, NetOwl, Facile, SAR, FASTUS, LTG</kbd>主要是基于手工编制的语义和语法字典来识别实体。当字典非常详细时，基于规则的系统工作得很好；由于特定领域的规则和不完整的字典，系统通常有高精度和低召回率，并且无法转移到其他领域</p>\n<h4 id=\"无监督\">无监督</h4>\n<p>无监督学习的一种典型方法是聚类。 基于聚类的 NER 系统根据上下文相似性从聚类组中提取命名实体。 关键思想是，在大型语料库上计算的词汇资源、词汇模式和统计数据可用于推断命名实体的提及。</p>\n<ul>\n<li>柯林斯等人观察到，使用未标记数据将监督要求减少到仅 7 个简单的“种子”规则。 然后，提出了两种用于命名实体分类的无监督算法。</li>\n<li>KNOWITALL利用一组谓词名称作为输入，并从一小组通用提取模式中引导其识别过程</li>\n<li>Nadeau 等人提出了一种用于地名录构建和命名实体歧义解决的无监督系统。该系统基于简单而高效的启发式方法结合了实体提取和消歧。</li>\n<li>Zhang 和 Elhadad提出了一种从生物医学文本中提取命名实体的无监督方法。他们的模型不是监督，而是使用术语、语料库统计（例如，逆文档频率和上下文向量）和浅句法知识（例如，名词短语分块）</li>\n</ul>\n<h4 id=\"基于特征的监督学习\">基于特征的监督学习</h4>\n<p>NER 被转换为多类分类或序列标记任务。给定带注释的数据样本，精心设计特征来表示每个训练示例。然后使用机器学习算法来学习一个模型，以从看不见的数据中识别出相似的模式。</p>\n<p><strong>特征向量表示的是对文本的抽象，其中一个词由一个或多个布尔值、数字或标称值表示。</strong></p>\n<p>许多机器学习算法已应用于监督 NER：</p>\n<ol type=\"1\">\n<li>隐马尔可夫模型 <strong>(HMM)</strong></li>\n<li>决策树</li>\n<li>最大熵模型</li>\n<li>支持向量机 <strong>(SVM)</strong></li>\n<li>条件随机场 <strong>((CRF)</strong>。</li>\n</ol>\n<ul>\n<li><p>比克尔等人提出了第一个<strong>基于 HMM</strong> 的 NER 系统，名为 IdentiFinder，用于识别和分类名称、日期、时间表达式和数字量</p></li>\n<li><p>Szarvas 等人使用 <strong>C4.5 决策树</strong>和 <strong>AdaBoostM1 学习算法</strong>开发了一个多语言 NER 系统。一个主要优点是它提供了一个机会，可以通过不同的特征子集训练几个独立的决策树分类器，然后通过多数投票方案组合它们的决策。</p></li>\n<li><p>Borthwick 等人通过应用最大熵理论提出了<strong>“最大熵命名实体”（MENE）</strong>。 MENE 能够在做出标记决策时利用极其多样化的知识源。</p></li>\n<li><p>McNamee和Mayfield训练<strong>SVM分类器</strong>。每个分类器都会做出二进制决定，当前令牌是否属于八个类之一，SVM在预测实体标签时不考虑 “相邻” 词；CRF考虑了上下文。</p></li>\n<li><p>McCallum和Li提出了NER中<strong>CRFs</strong>的特征归纳法。</p></li>\n<li><p>Krishnan和Manning提出了一种<strong>基于两个耦合CRF分类器的两阶段方法</strong>。第二个CRF利用从第一个CRF的输出导出的潜在表示</p></li>\n</ul>\n<h2 id=\"ner中的深度学习\">NER中的深度学习</h2>\n<p><strong>三大优势：</strong></p>\n<ol type=\"1\">\n<li>NER受益于非线性变换，该变换生成从输入到输出的非线性映射。与线性模型（如对数线性HMM和线性链CRF）相比，基于DL的模型能够通过非线性激活函数从数据中学习复杂的特征。</li>\n<li>深度学习节省了大量设计NER功能的精力。传统的基于特征的方法需要大量的工程技能和领域专业知识。另一方面，基于DL的模型可以有效地从原始数据中自动学习有用的表示和潜在因素。</li>\n<li>通过梯度下降，可以在端到端的范例中训练深层神经网络模型。这个特性使我们能够设计可能复杂的NER系统。</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205061528670.png\" /></p>\n<p>上图就是基于DL的NER的分类</p>\n<ol type=\"1\">\n<li><p>输入的分布式表示考虑了单词和字符级别的嵌入，以及结合了在特征方面有效的附加特征</p></li>\n<li><p>上下文编码器是使用 CNN、RNN 或其他网络来捕获上下文依赖关系</p></li>\n<li><p>标签解码器预测输入序列中标记的标签</p></li>\n</ol>\n<h4 id=\"输入的分布式表示\">输入的分布式表示</h4>\n<p>最简单的单词表示是利用one-hot向量：该向量两两正交并且每个单词还唯一</p>\n<h5 id=\"单词级别表示\">单词级别表示</h5>\n<blockquote>\n<p><strong>什么是word embedding（词嵌入）</strong></p>\n<p>Embedding在数学上表示一个maping, f: X -&gt; Y， 也就是一个function，其中该函数是injective（就是我们所说的单射函数，每个Y只有唯一的X对应，反之亦然）和structure-preserving (结构保存，比如在X所属的空间上X1 &lt; X2,那么映射后在Y所属空间上同理 Y1 &lt; Y2</p>\n<p>通俗的翻译可以认为是单词嵌入，就是把X所属空间的单词映射为到Y空间的多维向量，那么该多维向量相当于嵌入到Y所属空间中，一个萝卜一个坑。</p>\n<p>word embedding，就是找到一个映射或者函数，生成在一个新的空间上的表达，该表达就是word representation。</p>\n</blockquote>\n<p>常用的词嵌入：Google Word2Vec、Stanford GloVe、Facebook fastText、SENNA</p>\n<h5 id=\"字符级别表示\">字符级别表示</h5>\n<p>字符级表示对于利用显式子词级信息（例如前缀和后缀）很有用。字符级表示的另一个优点是它自然地处理词汇外。因此，基于字符的模型能够推断未见过单词的表示并共享语素级规则的信息。</p>\n<p>提取字符级表示有两种广泛使用的架构：基于 CNN 的模型和基于 RNN 的模型。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205061543428.png\" /></p>\n<p>对于基于 RNN 的模型，长短期记忆 (LSTM) 和门控循环单元 (GRU) 是基本单元的两个典型选择。</p>\n<h5 id=\"混合表示\">混合表示</h5>\n<p>基于 DL 的表示与基于特征的方法以混合方式相结合。 添加额外信息可能会提高 NER 性能，但代价是损害这些系统的通用性。</p>\n<h4 id=\"上下文encoder\">上下文Encoder</h4>\n<p>广泛使用的上下文编码器体系结构: 卷积神经网络，循环神经网络，递归神经网络和深度Transformer</p>\n<h5 id=\"神经语言模型\">神经语言模型</h5>\n<p>语言模型是描述序列生成的一系列模型，给定一个序列<span class=\"math inline\">\\((t_1,t_2,..t_N)\\)</span>，通过前向语言模型计算给定历史序列<span class=\"math inline\">\\((t_1,t_2,...t_{k-1})\\)</span>下<span class=\"math inline\">\\(t_k\\)</span>的概率 <span class=\"math display\">\\[\n{p(t_1,t_2,..t_N) = \\prod_{k=1}^Np(t_k|t_1,...t_{k-1}})\n\\]</span> 后向语言模型和前向语言模型很像，只不过是相反的顺序 <span class=\"math display\">\\[\n{p(t_1,t_2,..t_N) = \\prod_{k=1}^Np(t_k|t_{k+1},...t_{N}})\n\\]</span> 对于神经语言模型，token<span class=\"math inline\">\\(t_k\\)</span>的概率可以通过递归神经网络的输出来计算。在每个位置 k，我们可以获得两个上下文相关的表示（前向和后向），然后将它们组合为令牌<span class=\"math inline\">\\(t_k\\)</span>的最终语言模型嵌入。这种语言模型增强的知识已被经验证明有助于许多序列标记任务。</p>\n<h5 id=\"深度transformer\">深度Transformer</h5>\n<p>神经序列标记模型通常基于复杂的卷积或递归网络，该网络由编码器和解码器组成。由Vaswani等人提出的Transformer<strong>完全免除递归和卷积</strong>。Transformer利用堆叠的自我注意和逐点的全连接层来构建编码器和解码器的基本块。对各种任务的实验表明Transformer在质量上优越，同时需要更少的时间来训练。</p>\n<h4 id=\"标签解码器\">标签解码器</h4>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205061643457.png\" /></p>\n<p>标签解码器是 NER 模型的最后阶段。它将上下文相关的表示作为输入，并生成与输入序列相对应的标签序列。总结了标签解码器的四种架构：</p>\n<ol type=\"1\">\n<li>MLP + softmax 层</li>\n<li>条件随机场 (CRF)</li>\n<li>循环神经网络</li>\n<li>指针网络。</li>\n</ol>\n<p>NER 通常被表述为一个序列标记问题。 使用多层 Perceptron + Softmax 层作为标签解码器层，将序列标注任务转换为多类分类问题。 每个单词的标签是根据上下文相关的表示独立预测的，而不考虑其邻居。</p>\n<p>条件随机场是全局以观测序列为条件的随机场。CRF已广泛用于基于特征的监督学习方法。许多基于深度学习的NER模型使用CRF层作为标签解码器。然而，CRF 不能充分利用段级信息，因为段的内部属性不能用词级表示完全编码</p>\n<p>RNN标签解码器的性能优于CRF，并且在实体类型数量较多时训练速度更快，其用作贪婪地产生标签序列的语言模型。</p>\n<p>指针网络应用 RNN 来学习输出序列的条件概率，其元素是与输入序列中的位置相对应的离散标记。 它通过使用 softmax 概率分布作为“指针”来表示可变长度字典。</p>\n<h2 id=\"ner最新技术\">NER最新技术</h2>\n<h4 id=\"ner深度多任务学习\">NER深度多任务学习</h4>\n<p>多任务学习是一种将一组相关任务一起学习的方法。通过考虑不同任务之间的关系，多任务学习算法有望获得比单独学习每个任务的算法更好的结果。</p>\n<p>除了与其他序列标记任务一起考虑神经网络误差外，多任务学习框架可用于实体和关系的联合提取，或者将神经网络建模为两个相关的子任务：实体分割和实体类别预测。</p>\n<h4 id=\"ner深度迁移学习\">NER深度迁移学习</h4>\n<p>迁移学习旨在通过利用从源域学习的知识在目标域上执行机器学习任务。 在 NLP 中，迁移学习也称为域适应。</p>\n<h4 id=\"ner深度主动学习\">NER深度主动学习</h4>\n<p>主动学习背后的关键思想是：如果允许机器学习算法选择从中学习的数据，那么机器学习算法可以用更少的训练数据表现得更好。</p>\n<p>深度学习通常需要大量的训练数据，这些数据的获取成本很高。因此，将深度学习与主动学习相结合有望减少数据注释工作。</p>\n<h4 id=\"ner深度强化学习\">NER深度强化学习</h4>\n<p>强化学习 (RL) 是受行为主义心理学启发的机器学习的一个分支，它关注软件代理如何在环境中采取行动以最大化一些累积奖励。</p>\n<p>这个想法是一个代理将通过与环境交互并获得执行动作的奖励来从环境中学习。</p>\n<p>具体来说，RL 问题可以表述如下：环境被建模为具有输入（来自代理的动作）和输出（对代理的观察和奖励）的随机有限状态机。 它由三个关键部分组成：</p>\n<ol type=\"1\">\n<li>状态转换函数</li>\n<li>观察（即输出）函数</li>\n<li>奖励函数。</li>\n</ol>\n<p>代理也被建模为具有输入（来自环境的观察/奖励）和输出（对环境的动作）的随机有限状态机。 它由两部分组成：</p>\n<ol type=\"1\">\n<li>状态转换函数</li>\n<li>策略/输出函数。</li>\n</ol>\n<p><strong>代理的最终目标是通过尝试最大化累积奖励来学习良好的状态更新函数和策略。</strong></p>\n<h4 id=\"ner深度对抗网络\">NER深度对抗网络</h4>\n<p>对抗性学习是明确训练对抗性示例模型的过程。<strong>目的是使模型更易于攻击或减少其在干净输入上的测试误差</strong>。</p>\n<p>对抗性网络通过2人游戏学习从训练分发中生成: 一个网络生成候选人 (生成网络)，另一个对其进行评估 (判别网络)。</p>\n<p>生成网络学习从潜在空间映射到感兴趣的特定数据分布，而判别网络区分由生成器生成的候选和来自现实世界数据分布的实例。</p>\n<h4 id=\"ner神经注意\">NER神经注意</h4>\n<p><strong>注意机制</strong>基于人类中发现的视觉注意机制。例如，人们通常以“高分辨率”关注图像的某个区域，而以“低分辨率”感知周围区域。神经注意力机制允许神经网络有能力专注于其输入的一个子集。通过应用注意力机制，NER 模型可以捕获输入中信息量最大的元素。</p>\n","categories":["Wenge"],"tags":["Overview"]},{"title":"Handscript of 《Lyapunov-Guided Deep Reinforcement Learning...》","url":"/2022/05/04/Handscript-of-%E3%80%8ALyapunov-Guided-Deep-Reinforcement-Learning-%E3%80%8B/","content":"<blockquote>\n<p>Bi, Suzhi, et al. \"Lyapunov-guided deep reinforcement learning for stable online computation offloading in mobile-edge computing networks.\" <em>IEEE Transactions on Wireless Communications</em> 20.11 (2021): 7519-7537.</p>\n</blockquote>\n<p>机会计算卸载是提高动态边缘环境下移动边缘计算（MEC）网络计算性能的有效方法。</p>\n<p>在本文中，我们考虑了<strong>一个多用户 MEC 网络</strong>，该网络具有随时间变化的无线信道和在连续时间帧中随机用户任务数据到达。</p>\n<p>特别是，我们旨在设计一种在线计算负载算法，以在长期数据队列稳定性和平均功率约束下最大化网络数据处理能力。我们将问题表述为一个多阶段随机混合整数非线性规划 (MINLP) 问题，该问题共同决定了二进制卸载（每个用户在本地或在边缘服务器上计算任务）和系统资源分配决策在连续的时间范围内。</p>\n<p>为了解决不同时间框架决策中的耦合问题，我们提出了一个名为 <strong>LyDROO</strong> 的新框架，它结合了 Lyapunov 优化和深度强化学习 (DRL) 的优势。</p>\n<p><span id=\"more\"></span></p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>缩略单词</th>\n<th>英文</th>\n<th>中文</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>MEC</td>\n<td>mobile-edge computing</td>\n<td>移动边缘计算</td>\n</tr>\n<tr class=\"even\">\n<td>WD</td>\n<td>wireless devices</td>\n<td>无线设备</td>\n</tr>\n<tr class=\"odd\">\n<td>ES</td>\n<td>edge server</td>\n<td>边缘服务器</td>\n</tr>\n<tr class=\"even\">\n<td>MINLP</td>\n<td>mixed integer non-liner programming</td>\n<td>非线性整数规划</td>\n</tr>\n<tr class=\"odd\">\n<td>DRL</td>\n<td>deep reinforcement learning</td>\n<td>深度强化学习</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"预知识\">预知识</h2>\n<p>一般来说，边缘计算系统有两种常见的加载模型：</p>\n<ol type=\"1\">\n<li>Binary：要求将计算任务的<strong>整个</strong>数据集作为一个整体在无线设备上本地处理或者在边缘服务器上远程处理</li>\n<li>Partial：允许在无线设备和边缘服务器上对数据集进行分区并行处理</li>\n</ol>\n<h3 id=\"lyapunov\">Lyapunov</h3>\n<blockquote>\n<p>参考 <a href=\"http://cslabcms.nju.edu.cn/problem_solving/images/c/c0/2018-zhao.pdf\">Lyapunov Optimization: An Introduction</a></p>\n</blockquote>\n<p>使用function来优化控制一个动态的系统，系统在某一个特定的时间节点的状态是可以使用一个<strong>多维向量</strong>来描述，而funcion则是对这个多维向量所表达的状态的一个<strong>非负的、标量的描述</strong>，我们常常采用：<em>所有状态在各自权重下的平方和</em> 来实行这一点。</p>\n<p>如果系统的状态朝向一个不被期望的方向发展，那么function的数值就会变大，这样我们就可以将function沿着x轴的负方向逼近0使系统趋于稳定。</p>\n<h4 id=\"例\">例</h4>\n<p>不妨将第t个time slot内产生的随机事件标为<span class=\"math inline\">\\(w(t) = [w_1(t),w_2(t),...,w_n(t)]\\in \\Omega^n\\)</span>，每一个w是满足独立同分布的，<span class=\"math inline\">\\(\\Omega\\)</span>为随机事件集合；系统在每个时间片使用的策略为<span class=\"math inline\">\\(\\alpha(t) = [\\alpha_1(t),...,\\alpha_n(t)]\\in A^m\\)</span>，A为控制决策集合。</p>\n<p>在第t个time slot，根绝发生的随机事件采取一系列的控制决策，所以对于优化的目标函数<span class=\"math inline\">\\(p(t)\\)</span>而言，会生成相应的数值 <span class=\"math display\">\\[\np(t) = P(w(t),\\alpha(t))\n\\]</span> 系统中的一系列变量<span class=\"math inline\">\\(y_k(t)\\)</span>也会收到采取的决策的影响，可以描述为： <span class=\"math display\">\\[\ny_k(t)=Y_k(w(t),\\alpha(t))\n\\]</span> 在随机优化问题中，优化目标应该在time average中表现，所以优化问题标准式子为： <span class=\"math display\">\\[\nmin_{\\alpha(t)\\in A^m}lim_{T\\to \\infty}\\frac{1}{T}\\sum_{t=0}^{T-1}E[p(t)]\n\\]</span></p>\n<p><span class=\"math display\">\\[\ns.t.\\space lim_{T\\to \\infty}\\frac{1}{T}\\sum_{t=0}^{T-1}E[y_k(t)]\\leq0\n\\]</span></p>\n<hr />\n<p><strong>我们希望把满足这些长期的约束 条件所应当采取的操作分解到每每一个时间片内进行</strong>所以要建立虚拟队列</p>\n<p>因此，对每一个约束条件<span class=\"math inline\">\\(y_k(t)\\)</span>定义一个对应的、初始值为0的队列<span class=\"math inline\">\\(Q_k(t)\\)</span> <span class=\"math display\">\\[\nQ_k(t+1)=max\\{Q_k(t)+y_k(t),0\\}\n\\]</span></p>\n<ul>\n<li>这里的Q并不是队列本身，而是队列的储备量</li>\n<li>这里就可以看出队列有进有出，我们总是希望<strong>能处理的尽可能大于新抵达的</strong>，因为约束条件希望y不大于0</li>\n</ul>\n<p>上式可以推到出 <span class=\"math display\">\\[\nlim_{T\\to\\infty}\\frac{E(Q_k(T))}{T}=0\n\\]</span> (5)将代替(3)中的约束成为新的约束</p>\n<hr />\n<p>Lyapunov function 定义为： <span class=\"math display\">\\[\nL(\\Theta(t))=\\frac{1}{2}\\sum_{k=1}^KQ_k(t)^2\n\\]</span> 我们可以使用<span class=\"math inline\">\\(\\Delta(\\Theta(t))=L(\\Theta(t+1))-L(\\Theta(t))\\)</span>来表示从t到t+1全体队列的增加量，这也叫<strong>Lyapunov漂移</strong></p>\n<p>要在每一个时间片内求解<span class=\"math inline\">\\(\\Delta(\\Theta(t))+V·p(t)\\)</span>的最小值，也就是分别求两者的最小值，借助V来控制对二者的重视程度。</p>\n<p>最后的最终式子为： <span class=\"math display\">\\[\nmin_{\\alpha(t)\\in A^m}E[B+V·p(t)+\\sum_{k=1}^KQ_k(t)y_k(t)|\\Theta(t)]\n\\]</span></p>\n<h2 id=\"model-problem-formulation\">Model &amp; Problem Formulation</h2>\n<h3 id=\"model\">Model</h3>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/20220504125540.png\"/></p>\n<p>如上图所示，我们考虑一个ES在相等的连续时间T中帮助N个WD</p>\n<ul>\n<li><p><span class=\"math inline\">\\(A^t_i\\)</span>：我们定义<span class=\"math inline\">\\(A^t_i\\)</span>为在第t个时间点原始任务到达第<span class=\"math inline\">\\(i\\)</span>个WD的队列中，每个<span class=\"math inline\">\\(A_i\\)</span>是独立同分布的，并且<span class=\"math inline\">\\(E((A_i^t)^2) = \\eta_i\\)</span>，这里的<span class=\"math inline\">\\(\\eta_i\\)</span>是已知的。</p></li>\n<li><p><span class=\"math inline\">\\(h_i^t\\)</span>：我们定义在第i个WD和ES中间的信道增益为<span class=\"math inline\">\\(h_i^t\\)</span>，该信道增益在一个时间帧内保持不变，但是在不同的帧之间独立变化</p></li>\n<li><p><span class=\"math inline\">\\(D_i^t\\)</span>：表示在t时间帧内，第i个WD处理了<span class=\"math inline\">\\(D_i^t\\)</span>个bits，并在时间帧的最后输出</p>\n<p><strong>注意：这里只考虑Binary卸载规则，即智能选择WD或ES进行处理</strong></p></li>\n<li><p><span class=\"math inline\">\\(x_i^t\\)</span>：表示卸载决策</p>\n<ul>\n<li>​ 1：计算卸载，分配给ES</li>\n<li>0：本地计算</li>\n</ul></li>\n</ul>\n<p>本地处理的原始数据 (以位为单位) 和时间范围内消耗的能量是： <span class=\"math display\">\\[\nD^t_{i,L}=f_i^t\\frac{T}{\\phi}\n\\]</span></p>\n<p><span class=\"math display\">\\[\nE_{i,L}t=\\kappa(f^t_i)T\n\\]</span></p>\n<p><span class=\"math display\">\\[\n\\forall x_i^t=0\n\\]</span></p>\n<ul>\n<li><span class=\"math inline\">\\(f_i^t\\)</span>：本地CPU的处理数据速率</li>\n<li><span class=\"math inline\">\\(\\phi &gt;0\\)</span>：表示处理1<em>bit</em> 所需要的计算周期</li>\n<li><span class=\"math inline\">\\(\\kappa &gt; 0\\)</span>：表示计算能效参数</li>\n</ul>\n<p>当我们把数据卸载到边缘处理的时候：</p>\n<ul>\n<li><span class=\"math inline\">\\(P_i^t\\)</span>：表示传输功率</li>\n<li><span class=\"math inline\">\\(\\tau^t_iT\\)</span>：表示分配给第i个WD用于卸载的时间，<span class=\"math inline\">\\(\\tau\\in[0,1] \\&amp;\\sum_{i=1}^N\\tau_i^t \\leq1\\)</span></li>\n</ul>\n<hr />\n<p>在时间范围内边缘处理的数据量为： <span class=\"math display\">\\[\nD_{i,O}^t=\\frac{W\\tau_i^tT}{v_u}log_2(1+\\frac{E_{i,O}^th^t_i}{\\tau^t_iTN_0})\n\\]</span> <span class=\"math inline\">\\(v_u\\geq 1\\)</span>表示计算开销，<span class=\"math inline\">\\(N_0\\)</span>表示噪声</p>\n<p>所以我们表示在时间t内总共的比特计算和能量消耗： <span class=\"math display\">\\[\nD_i^t=(1-x)D_{i,L}+xD_{i,O}\n\\]</span></p>\n<p><span class=\"math display\">\\[\nE_i^t=(1-x)E_{i,L}+xE_{i,O}\n\\]</span></p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20220504151327870.png\"/></p>\n<ul>\n<li><span class=\"math inline\">\\(r\\)</span>代表计算速度</li>\n<li><span class=\"math inline\">\\(e\\)</span>代表功率消耗</li>\n<li>我们假设T = 1</li>\n</ul>\n<hr />\n<p>我们定义WD的队列长度为Q，那么对于一个队列：</p>\n<p>​ <span class=\"math inline\">\\(t+1\\)</span>时刻的队列长度为t时刻的队列长度 - <span class=\"math inline\">\\(t\\)</span>时刻WD能处理的数据量 + 到来的数据量。（大于0的数） <span class=\"math display\">\\[\nQ_i(t+1) = max\\{Q_i(t)-\\tilde{D}^t_i+A^t_i,0\\}\n\\]</span> 其中<span class=\"math inline\">\\(\\tilde{D}^t_i=min(Q_i(t),D_i^t)\\)</span>，即处理量最多就是队列中的数据量，因为我们假设这个队列是无限长的，所以<span class=\"math inline\">\\(D &lt; Q\\)</span>，所以动态队列被简化成以下形式： <span class=\"math display\">\\[\nQ_i(t+1) = Q_i(t)-D^t_i+A^t_i\n\\]</span> <strong>根据利特尔定律，平均延迟与平均队列长度成正比。因此，强稳定的数据队列转化为每个任务数据bit的有限处理延迟。</strong></p>\n<h3 id=\"问题表述\">问题表述</h3>\n<p>在本文中，我们旨在设计一种在线算法，以<strong>在数据队列稳定性和平均功率约束下，最大化所有 WD 的<kbd>long-term average weighted sum compution rate</kbd></strong>。特别是，我们在每个时间帧内做出在线决策，我们<strong>在不假设知道随机信道条件和数据到达的未来情况下，优化任务卸载和特定时间帧的资源分配决策</strong>。</p>\n<p>多层级随机MINLP问题表述如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20220504153135305.png\" alt=\"image-20220504153135305\"  /></p>\n<ul>\n<li><span class=\"math inline\">\\(c_i\\)</span>表示WD的固定权重，<span class=\"math inline\">\\(r^t_i\\)</span>代表WD在每一时刻的计算速度</li>\n<li>(6a)表示卸载时间限制，即在一个时间帧之内，每一个WD所获得的卸载时间比例的和不能超过1</li>\n<li>(6b) 对应于数据因果约束，数据处理不完：处理数据量<span class=\"math inline\">\\(D\\)</span> &lt; 队列数据量<span class=\"math inline\">\\(Q\\)</span></li>\n<li>(6c) 对应于平均功率约束，<span class=\"math inline\">\\(γ_i\\)</span> 是功率阈值。</li>\n<li>(6d) 是数据队列稳定性约束。</li>\n</ul>\n<p>在不知道随机信道条件和未来数据到达量的情况下在时间帧之内做出决策是很难满足长期约束的。此外，快速变化的信道条件需要在每个短时间帧内（例如，在信道相干时间内）进行实时决策。</p>\n<h2 id=\"基于-lyapunov-的多级-minlp-解耦\">基于 LYAPUNOV 的多级 MINLP 解耦</h2>\n<blockquote>\n<p>我们应用 Lyapunov 优化将 (P1) 解耦为每帧确定性问题</p>\n</blockquote>\n<p>为了解决平均功率约束(6c)，文章定义了N个虚拟的能量队列<span class=\"math inline\">\\(Y_i(t)\\)</span>，每个WD有一个虚拟队列，队列的初始化为0，更新公式为<span class=\"math inline\">\\(Y_i(t+1)=max(Y_i(t)+ve_i^t-v\\gamma_i,0)\\)</span>；<span class=\"math inline\">\\(v\\)</span>是正比例因子，<span class=\"math inline\">\\(e\\)</span>是在t时间帧的能量消耗。</p>\n<p>这个队列可以被看做是具有随机“能量到达”和固定的“服务比率”，当虚拟能量队列稳定的时候，平均功率<span class=\"math inline\">\\(e\\)</span>不会超过<span class=\"math inline\">\\(\\gamma\\)</span></p>\n<p>我们把数据队列<span class=\"math inline\">\\(Q\\)</span>和虚拟的能量队列<span class=\"math inline\">\\(Y\\)</span>放到一起，然后引入Lyapunov方程和Lyapunov漂移</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/image-20220504160018485.png\" /></p>\n<p>为了在稳定队列<span class=\"math inline\">\\(Z(t)\\)</span>的同时最大化时间平均计算率，我们使用最小化<kbd>drift-plus-penalty</kbd>的办法。具体来说就是要在每个时间帧下最小化<kbd>drift-plus-penalty</kbd>的上界。<kbd>drift-plus-penalty</kbd>的表达式如下： <span class=\"math display\">\\[\n\\Lambda(Z(t))=\\Delta L(Z(t))-V·\\sum_{i=1}^N\\mathbb{E}\\{c_ir_i^t|Z(t)\\}\n\\]</span></p>\n<h3 id=\"求drift-plus-penalty的上界\">求<kbd>drift-plus-penalty</kbd>的上界</h3>\n<p><span class=\"math display\">\\[\nQ_i(t+1)^2=Q_i(t)^2+2Q_i(t)(A_i^t-D_i^t)+(A_i^t-D_i^t)^2\n\\]</span></p>\n<p><span class=\"math display\">\\[\nY_i(t+1)^2=Y_i(t)^2+2Y_i(t)(e_i^t-\\gamma_i)+(e_i^t-\\gamma_i)^2\n\\]</span></p>\n<p>之后两边同时对N个队列进行求和，并将带有<span class=\"math inline\">\\(Q\\)</span>和<span class=\"math inline\">\\(Y\\)</span>的平方项合并到等式左侧，得到 <span class=\"math display\">\\[\n0.5\\sum_{i=1}^NQ_i(t+1)^2-0.5\\sum_{i=1}^NQ_i(t)^2 =\\sum_{i=1}^NQ_i(t)(A_i^t-D_i^t)+0.5\\sum_{i=1}^N(A_i^t-D_i^t)^2\n\\]</span> <span class=\"math display\">\\[\n0.5\\sum_{i=1}^NY_i(t+1)^2-0.5\\sum_{i=1}^NY_i(t)^2=\\sum_{i=1}^NY_i(t)(e_i^t-\\gamma_i)+0.5\\sum_{i=1}^N(e_i^t-\\gamma_i)^2\n\\]</span></p>\n<p>我们定义<span class=\"math inline\">\\(L(Q(t))=0.5\\sum_{i=1}^NQ_i(t)^2\\)</span>，并且<span class=\"math inline\">\\(\\Delta L(Q(t)) = \\mathbb{E}\\{L(Q(t+1))-L(Q(t))|Z(t)\\}\\)</span></p>\n<p>对15式子两边同时取期望可以得到 <span class=\"math display\">\\[\n\\Delta L(Q(t)) \\leq B_1 +\\sum_{i=1}^NQ_i(t) \\mathbb{E}\\{A_i^t-D_i^t|Z(t)\\}\n\\]</span> 类似的能获得： <span class=\"math display\">\\[\n\\Delta L(Y(t)) \\leq B_2 +\\sum_{i=1}^NY_i(t) \\mathbb{E}\\{e_i^t-\\gamma_i|Z(t)\\}\n\\]</span> 结合（16）（17）能得到最后的式子 <span class=\"math display\">\\[\n\\Delta L(Z(t)) \\leq \\hat{B}+\\sum_{i=1}^NQ_i(t) \\mathbb{E}\\{A_i^t-D_i^t|Z(t)\\} +\\sum_{i=1}^NY_i(t) \\mathbb{E}\\{e_i^t-\\gamma_i|Z(t)\\}\n\\]</span> 因此这个<kbd>drift-plus-penalty</kbd>的上界就是等式右侧的式子。通过移除常数项，最后算法通过最大化如下式子来决定action： <span class=\"math display\">\\[\n\\sum_{i=1}^N(Q_i(t) +Vc_i)r_i^t-\\sum^N_{i=1}Y_i(t)e_i^t\n\\]</span></p>\n<hr />\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205091640571.png\" style=\"zoom: 67%;\" /></p>\n<p>最后将<a href=\"#问题表述\">上文的式子</a>，转化成了这个式子，可以看出，在这个式子中没有对于<span class=\"math inline\">\\(t\\)</span>的积分了，就简化了计算。</p>\n<h2 id=\"lyapunov指导的drl\">Lyapunov指导的DRL</h2>\n<p>在每一个时间帧中我们观察到的数据是 <span class=\"math display\">\\[\n\\xi^t=\\{h^t_i,Q_i(t),Y_i(t)\\}_{i=1}^N\n\\]</span></p>\n<ul>\n<li><span class=\"math inline\">\\(h^t_i\\)</span>：信道收益</li>\n<li><span class=\"math inline\">\\(Q_i(t),Y_i(t)\\)</span>：队列信息</li>\n</ul>\n<p>通过这个我们得出最后的控制动作：是否卸载、持续资源分配 <span class=\"math display\">\\[\n\\{x^t,y^t\\}\n\\]</span></p>\n<p><span class=\"math display\">\\[\ny^t=\\{\\tau_i^t,f_i^t,e_{i,O}^t,r_{i,O}^t\\}\n\\]</span></p>\n<p>我们发现，虽然最后的公式不是一个凸优化，但是如果<span class=\"math inline\">\\(X\\)</span>的状态是确定的，那么上述公式就会转变成凸优化，所以我们要先去确定<span class=\"math inline\">\\(X\\)</span>。一般来说，枚举获得<span class=\"math inline\">\\(X\\)</span>是需要枚举<span class=\"math inline\">\\(N^2\\)</span>个决策，这样的复杂度很高，所以我们使用DRL来构建一个策略<span class=\"math inline\">\\(\\pi\\)</span>，通过这个策略来将输入映射到最优的动作<span class=\"math inline\">\\(x^t\\)</span>上。</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205091657934.png\" /></p>\n<h3 id=\"actor\">actor：</h3>\n<p>接受输入的<span class=\"math inline\">\\(\\xi\\)</span>并输出候选的卸载动作<span class=\"math inline\">\\(x_i^t\\)</span></p>\n<p>Actor模块由一个DNN和一个动作量化器组成。 在第 t 个时间帧的开始，我们将 DNN 的参数表示为<span class=\"math inline\">\\(θ_t\\)</span>，当<span class=\"math inline\">\\(t =1\\)</span>时按照标准正态分布随机初始化。以观测值<span class=\"math inline\">\\(ξ_t\\)</span>作为输入，DNN 输出一个松弛的卸载决策<span class=\"math inline\">\\(\\hat{x}^t\\in [0, 1]^N\\)</span>，这个决策稍后将被量化为可行的二元动作。<strong>此时是连续变量</strong></p>\n<p>之后将连续的<span class=\"math inline\">\\(\\hat{x}^t\\)</span>量化为可行的卸载动作<span class=\"math inline\">\\(\\Omega_t\\)</span>，<span class=\"math inline\">\\(x_j^t\\in\\{0,1\\}^N\\)</span>，<strong>为离散变量数组</strong></p>\n<p>对于前<span class=\"math inline\">\\(\\frac{M_t}{2}\\)</span>个变量，我们按照如下策略<strong>(NOP)</strong>进行赋值：</p>\n<p>对于第一个变量，很简单的赋值就是，如果其大于0.5，就是1，否则就是0；剩下的变量将其按照到0.5的距离进行有大到小的排序，获得<span class=\"math inline\">\\(\\hat{x}_{(n)}^t\\)</span>序列，这些将会用做判断阈值：</p>\n<p><img src=\"https://raw.githubusercontent.com/ZimingDai/Picture/main/img/202205091729042.png\" style=\"zoom:50%;\" /></p>\n<hr />\n<p>对于剩下的一半变量，我们给其一个噪声，然后用<code>sigmoid</code>进行激活：<span class=\"math inline\">\\(x^t=sigmoid(x^t+n)\\)</span>，激活后重复前一半的步骤</p>\n<blockquote>\n<p>第一次得到的是一个连续值一维数组，每一个用户对应一个连续值；之后变成了一个二维数组，每一个用户对应着一维数组（每个数组的元素都是离散值）</p>\n</blockquote>\n<h3 id=\"critic\">critic:</h3>\n<p>测评输出的<span class=\"math inline\">\\(x_i^t\\)</span>并选择最优的卸载动作<span class=\"math inline\">\\(x^t\\)</span>。</p>\n<p>其实就是通过最后的方程进行反向推导，此时已经知道<span class=\"math inline\">\\(x\\)</span>的值了，就可以进行凸函数优化了。 <span class=\"math display\">\\[\nx^t=arg max_{x_j^t\\in \\Omega_t}G(x_j^t,\\xi^t)\n\\]</span></p>\n<h3 id=\"policy-update\">policy update：</h3>\n<p>提升actor模块的策略</p>\n<h3 id=\"queue\">queue：</h3>\n<p>在卸载策略已经执行过后更新系统队列</p>\n","categories":["XF-TANK"],"tags":["Top-Papers"]},{"title":"Handscript of 《Auction-Based VM Allocation...》","url":"/2022/05/02/Handscript-of-%E3%80%8AAuction-Based-VM-Allocation-%E3%80%8B/","content":"<blockquote>\n<p>Gao, Guoju, et al. \"Auction-based VM allocation for deadline-sensitive tasks in distributed edge cloud.\" <em>IEEE Transactions on Services Computing</em> (2019).</p>\n</blockquote>\n<ol type=\"1\">\n<li>我们形式化了三层边缘云结构中对期限敏感的任务的竞争性虚拟机资源分配问题，并提出了基于拍卖的虚拟机资源分配（AVA）机制，该机制主要由<strong>贪婪中标选择算法</strong>和<strong>支付确定算法</strong>组成.</li>\n<li>我们证明了AVA的中标选择问题是NP难问题。我们首先去除最后期限约束，然后将三层边缘云结构转换为两层边缘云结构。在此基础上，提出了一种贪婪中标选择算法，并进一步分析了其近似比。</li>\n<li>我们还设计了一个真实支付判定算法。然后，我们证明了AVA机制具有真实性、个体合理性和计算效率。</li>\n<li>我们对真实轨迹进行了广泛的模拟，以评估所提出的 AVA 机制的性能。结果表明，AVA不仅比对比算法取得了更好的社会福利性能，而且保证了真实性、个体理性和计算效率。</li>\n</ol>\n<p><span id=\"more\"></span></p>\n<h2 id=\"模型-问题描述\">模型 &amp; 问题描述</h2>\n<p><strong>三个身份</strong></p>\n<ol type=\"1\">\n<li>ECN（CC）</li>\n<li>platform</li>\n<li>users</li>\n</ol>\n<h3 id=\"三方交互\">三方交互</h3>\n<ol type=\"1\">\n<li><p>当移动用户希望租用虚拟机资源来运行其对期限敏感的云计算应用程序时，它首先会生成一个请求，然后将请求提交给平台。 该请求由用户的<strong>最大可容忍延迟（即截止日期）、所需的 VM 资源量和输入数据量</strong>组成。</p>\n<p>我们使用<span class=\"math inline\">\\(r_i = \\{T_i,A_i,I_i\\}\\)</span>来表示第 i 个移动用户的请求，其中 T<sub>i</sub>、A<sub>i</sub> 和 I<sub>i</sub> 表示截止日期、VM 资源总量和输入数据量。 此外，所有请求的集合用 R 表示。 <span class=\"math display\">\\[\nr_i = \\{T_i,A_i,I_i\\}\n\\]</span></p></li>\n<li><p>平台会定期收集每个ECN的状态信息，然后公示给提交请求的移动用户。状态信息包括几个主要参数：<strong>VM资源容量、带宽、租用VM资源的单位成本和向CC传输数据的单位成本</strong>。</p>\n<blockquote>\n<p>这里，ECN的带宽包括与CC相关的带宽和与移动用户相关的带宽。</p>\n</blockquote>\n<p><span class=\"math display\">\\[\ns_j=\\{L_j,c_j^v,c_j^t,b_j^上,b_j^下\\}\n\\]</span></p>\n<p>我们用<span class=\"math inline\">\\(s_j=\\{L_j,c_j^v,c_j^t,b_j^上,b_j^下\\}\\)</span>表示第 j 个 ECN 的状态信息，其中 L<sub>j</sub> 表示 ECN (s<sub>j</sub>) 的 VM 资源容量。<span class=\"math inline\">\\(c_j^v\\)</span>和<span class=\"math inline\">\\(c_j^t\\)</span>表示 VM 资源的单位成本、分别为向CC传输数据的单位成本。<span class=\"math inline\">\\(b_j^上\\)</span>表示VM to CC的带宽，而<span class=\"math inline\">\\(b_j^下\\)</span>表示s<sub>j</sub>和用户之间的带宽。所有 ECN 的集合用 S 表示。此外，我们让 <span class=\"math inline\">\\(c^v_0\\)</span>表示 CC 中 VM 资源的单位成本。这里，<span class=\"math inline\">\\(c^v_0\\)</span> 远小于$ c^v_j<span class=\"math inline\">\\(（对于S中的所有\\)</span>s_j$）。</p></li>\n<li><p>然后，移动用户根据状态信息对ecn进行不同的取值。同时，移动用户确定每个ECN的出价。对于每个请求r<sub>i</sub>，<strong>我们使用<span class=\"math inline\">\\(b_{ij}\\)</span>和<span class=\"math inline\">\\(v_{ij}\\)</span>分别表示第i个移动用户对第j个ECN的出价和估值。</strong>所有出价的集合由B表示。移动用户将向平台发送他们的出价。</p>\n<blockquote>\n<p>注意：</p>\n<p>这里的b<sub>ij</sub>是用户为了得到ECN的资源锁支付的金额，v<sub>ij</sub>是用户在进行使用时对于这些资源的真实评估值，这个值只有用户自身知道，用户可能会操纵b<sub>ij</sub>，导致平台和ECN获得更少的奖励，所以整个Model要满足移动用户不会操纵其出价</p>\n</blockquote></li>\n<li><p>该平台根据收到的来自移动用户的出价和请求，确定拍卖的获胜者，为获胜者做出调度决策，并计算相应的付款。</p>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li>每个请求只能分配给一个ECN</li>\n<li>每个ECN在容量和期限限制下可以服务多个请求</li>\n<li>中标：首先上传的ECN，然后ECN要么自己完成任务，要么上传CC</li>\n</ul>\n</blockquote></li>\n<li><p>移动用户将输入数据上传到 ECN 以运行他们的云计算应用程序，然后支付相应的奖励。 根据中标的调度决策，ECN决定将一些任务上传到CC并支付CC</p></li>\n</ol>\n<p>为了方便处理，我们只允许一个用户在一个拍卖环节内发送一个请求（如果有多个请求的需求，可以等价为多个虚拟用户）我们使用d<sub>ij</sub>来表示请求与ECN之间的延迟，计算公式如下： <span class=\"math display\">\\[\nd_{ij}=\\left\\{\n\\begin{aligned}\n&amp;\\frac{I_i}{b_j^下}；&amp;(r_i \\to s_j)\\\\\n&amp;\\frac{I_i}{b_j^下}+\\frac{I_i}{b_j^上}；&amp;(r_i \\to s_j \\to CC)\n\\end{aligned}\n\\right.\n\\]</span> 上式表明ECN可以单独完成任务，并不需要进行上传；下式表示ECN无法单独完成任务，需要CC的参与；<strong><span class=\"math inline\">\\(I_i\\)</span>指的是输入数据量+输出数据量。</strong>所以<span class=\"math inline\">\\(d_{ij}\\)</span>包括了从ECN(CC)下载数据到user的延迟。</p>\n<h3 id=\"中标选择问题wbs\">中标选择问题WBS</h3>\n<ul>\n<li>我们定义<span class=\"math inline\">\\(\\Phi\\)</span>为WBS问题的解集，称为中标集<span class=\"math inline\">\\(b_{ij} \\in \\Phi\\)</span></li>\n<li><span class=\"math inline\">\\(\\Phi^E\\)</span>为ECN可以单独解决的中标集合</li>\n<li><span class=\"math inline\">\\(\\Phi^C\\)</span>表示需要上传到CC的中标集合</li>\n<li><span class=\"math inline\">\\(\\Phi^C \\bigcap \\Phi^E = \\oslash\\)</span></li>\n<li><span class=\"math inline\">\\(\\Phi^C \\bigcup \\Phi^E = \\Phi\\)</span></li>\n</ul>\n<h4 id=\"social-welfare\">Social Welfare</h4>\n<p><strong>中标的总估值 - 总成本</strong> <span class=\"math display\">\\[\n\\sum_{b_{ij} \\in \\Phi^E}(v_{ij}-A_i·c_j^v) + \\sum_{b_{ij} \\in \\Phi^C}(v_{ij}-A_i·(c_j^t+c_0^v) )\n\\]</span></p>\n<ul>\n<li><p>$A_i·c_j^v $ 表示ECN节点s<sub>j</sub>执行请求r<sub>i</sub>的花费</p></li>\n<li><p><span class=\"math inline\">\\(A_i·(c_j^t+c_0^v)\\)</span>表示请求传输到CC以及CC计算的成本</p></li>\n</ul>\n<p><span class=\"math display\">\\[\nmax \\sum_{b_{ij} \\in \\Phi^E}(v_{ij}-A_i·c_j^v) + \\sum_{b_{ij} \\in \\Phi^C}(v_{ij}-A_i·(c_j^t+c_0^v) )\n\\]</span> 方程4可以等价为： <span class=\"math display\">\\[\nmax \\sum_{b_{ij} \\in \\Phi^E}(b_{ij}-A_i·c_j^v) + \\sum_{b_{ij} \\in \\Phi^C}(b_{ij}-A_i·(c_j^t+c_0^v) )\n\\]</span></p>\n<h3 id=\"pd问题\">PD问题</h3>\n<p>PD问题是确定每次中标的付款，使整个拍卖模型满足真实性和个体理性</p>\n<h4 id=\"truthfulness\">Truthfulness</h4>\n<p><strong>定义<span class=\"math inline\">\\(p_{ij}(b_{ij})\\)</span>为由拍卖机制的支付计算算法确定的相应支付</strong></p>\n<p>用户对真实出价和不真实出价的报酬率分别为<span class=\"math inline\">\\(v_{ij}-p_{ij}(v_{ij})\\)</span>，<span class=\"math inline\">\\(v_{ij}-p_{ij}(b_{ij})\\)</span> <span class=\"math display\">\\[\nv_{ij}-p_{ij}(v_{ij}) &gt; v_{ij}-p_{ij}(b_{ij})\n\\]</span> 拍卖机制的真实性可以确保每个用户报告其真实估值，因为不真实的出价将导致更糟糕的回报。</p>\n<h4 id=\"individual-reationality\">Individual Reationality</h4>\n<p>user的支付不应该超过其对应的估计值，即<span class=\"math inline\">\\(v_{ij} &gt; p_{ij}(b_{ij})\\)</span></p>\n<p>在这里，每个移动用户的真实估值必须涵盖其相应的支付。</p>\n<h4 id=\"efficiency\">Efficiency</h4>\n<p>具有计算效率的算法比具有高计算复杂度的最优算法==更重要==</p>\n<h2 id=\"ava-机制\">AVA 机制</h2>\n<h3 id=\"证明是np-hard问题\">证明是NP-Hard问题</h3>\n<p>假设只有一个ECN。并且该ECN无法上传CC，公式限制如下： <span class=\"math display\">\\[\nmax \\sum_{b_{i1} \\in \\Phi^E}(b_{i1}-A_i·c_1^v)\n\\]</span> <span class=\"math display\">\\[\n\\sum_{b_{i1} \\in \\Phi^E}A_i &lt;L_1\n\\]</span></p>\n<p>这个可以直接映射到0-1背包问题，所以最简单的情况就是NP难问题，复杂情况一定是NP难问题。</p>\n<h3 id=\"wbs问题的基础解\">WBS问题的基础解</h3>\n<h4 id=\"first-phase\">First Phase</h4>\n<p>由于上传CC的传输耗时肯定高于上传ECN的耗时，所以我们将上传ECN为good传输延迟，而CC为bad传输延迟，根据T<sub>i</sub>与两个传输延时的关系，我们可以更新<span class=\"math inline\">\\(B\\)</span>、<span class=\"math inline\">\\(S\\)</span>集合</p>\n<p>我们将移除那些不能满足ddl限制的bid，并且添加一些虚拟bids和ECNs，如果这个ddl比bad传输延迟要大。主要有以下三种情况</p>\n<ol type=\"1\">\n<li><p>如果<span class=\"math inline\">\\(ddl &lt; good\\)</span>，就删除这个bid，因为无论如何不能满足截止时间约束</p></li>\n<li><p>如果<span class=\"math inline\">\\(good &lt; ddl &lt; bad\\)</span>，我们不做处理</p></li>\n<li><p>如果<span class=\"math inline\">\\(ddl &gt; bad\\)</span>，我们就会创建一个虚拟的ECN(<span class=\"math inline\">\\(s_{j*}\\)</span>)和虚拟的投标(<span class=\"math inline\">\\(b_{ij*}\\)</span>) <span class=\"math display\">\\[\ns_{j*}=\\{L_{j*}=A_i，c_{j*}^v=c_j^t+c_o^v，c_{j*}^t = b_{j*}^上= b_{j*}^下 = 0\\}\n\\]</span> 新添加的ECN，资源容量 = 请求i所需要的容量，VM资源成本为一开始的上传CC成本+CC中的VM资源成本，虚拟的上传CC成本 = 0，<strong>带宽都为0</strong>。</p>\n<p>在这里，生成虚拟ECN和bid的过程意味着从边缘云计算场景中删除CC，并将三层边缘云结构转换为两层结构。</p></li>\n</ol>\n<h4 id=\"second-phase\">Second Phase</h4>\n<p>我们集中讨论了具有容量限制的WBS问题。我们首先将中标选择建模为一个<strong>带有0-1背包约束的n对1加权二部图</strong>匹配问题。由于容量限制，该问题是NP难问题，因此我们采用贪婪策略来确定最大匹配，其总权重约为最大。</p>\n<p>建立图： <span class=\"math display\">\\[\nG = \\{R,\\widehat{S},\\varepsilon:\\widehat{B}\\}\n\\]</span></p>\n<ul>\n<li><p><span class=\"math inline\">\\(R\\)</span>和<span class=\"math inline\">\\(\\widehat{S}\\)</span>是两个独立的点集；</p></li>\n<li><p><span class=\"math inline\">\\(\\varepsilon\\)</span>指的是图中的边，其中包含了边<span class=\"math inline\">\\(&lt;r_i,s_j&gt;\\)</span></p></li>\n<li><p><span class=\"math inline\">\\(\\widehat{B}\\)</span>是<span class=\"math inline\">\\(b_{ij}\\)</span>的集合，每一个bid对应一个边</p></li>\n<li><p>对于每一个请求r，其需要的资源容量就是背包问题中每个物品的重量</p></li>\n<li><p>每一个s的VM资源容量就相当于背包的大小</p></li>\n<li><p>每一条边都有自己的权重，即weight（每个资源的social welfare） <span class=\"math display\">\\[\nw_{ij} = \\frac{b_{ij}}{A_i} - c_j^v\n\\]</span></p></li>\n</ul>\n<blockquote>\n<p>每一个unit的需求得到的利益（目标函数÷<span class=\"math inline\">\\(A_i\\)</span>）</p>\n</blockquote>\n<p>由于我们在前文已经将虚拟的ECN和bid放入，将CC排除，所以<span class=\"math inline\">\\(\\Phi^C = \\oslash\\)</span>，<span class=\"math inline\">\\(\\Phi^E = \\Phi\\)</span></p>\n<p>WBS目标函数转换如下： <span class=\"math display\">\\[\nmax \\sum_{b_{ij} \\in \\Phi}(b_{ij}-A_i·c_j^v)\n\\]</span></p>\n<p>第二步，就是在图的基础上，我们贪婪的选择一些边来形成具有<strong>近似最大权重</strong>的G的最大匹配：在每一轮中，我们选择权重最大的边。由以下两种情况：</p>\n<ol type=\"1\">\n<li><span class=\"math inline\">\\(A_i &lt; L_j\\)</span>：即ECN的剩余容量大于该请求所需要的VM容量。\n<ol type=\"1\">\n<li>我们就要将相应的<span class=\"math inline\">\\(b_{ij}\\)</span>放到最后的解决方案<span class=\"math inline\">\\(\\Phi\\)</span>中；</li>\n<li>同时要从<span class=\"math inline\">\\(R\\)</span>中删除该请求节点<span class=\"math inline\">\\(r_i\\)</span>，并且在图中的<span class=\"math inline\">\\(\\varepsilon\\)</span>中删除所有与<span class=\"math inline\">\\(r_i\\)</span>有关的边；</li>\n<li>更新顶点<span class=\"math inline\">\\(s_j\\)</span>的<span class=\"math inline\">\\(L_j = L_j - A_i\\)</span></li>\n</ol></li>\n<li><span class=\"math inline\">\\(A_i&gt;L_j\\)</span>：删除边<span class=\"math inline\">\\(&lt;r_i,s_j&gt;\\)</span>，继续寻找下一个最大的权重</li>\n</ol>\n<p>直到<span class=\"math inline\">\\(R\\)</span>、<span class=\"math inline\">\\(\\widehat{B}\\)</span>、<span class=\"math inline\">\\(\\varepsilon\\)</span>为空，最后得到<span class=\"math inline\">\\(\\Phi\\)</span>就是最终解，如果<span class=\"math inline\">\\(b_{ij} \\in \\Phi\\)</span>则说明投标成功。</p>\n<p>得到中标集后，在对每一个中标进行调度，是让ECN完成还是让CC完成</p>\n<h3 id=\"pd问题基础解\">PD问题基础解</h3>\n<h4 id=\"critical-payment\"><a href=\"#Truthfulness\">Critical Payment</a></h4>\n<p>对投标<span class=\"math inline\">\\(b_{ij}\\)</span>的付款<span class=\"math inline\">\\(p_{ij(b_{ij})}\\)</span>为临界值，如果用户宣布的投标小于该临界值，则一定不会中标。</p>\n<p>为了能确定<span class=\"math inline\">\\(b_{ij}\\)</span>的<kbd>critical payment</kbd>，我们首先要确定<span class=\"math inline\">\\(b_{ij}\\)</span>的<strong>代替投标</strong>（当我们从<span class=\"math inline\">\\(\\widehat{B}\\)</span>中删除<span class=\"math inline\">\\(b_{ij}\\)</span>的时候，它将取代其成为中标）</p>\n<p>步骤如下：</p>\n<ol type=\"1\">\n<li>我们首先删除<span class=\"math inline\">\\(&lt;r_i,s_j&gt;\\)</span>的边，来获得一个没有<span class=\"math inline\">\\(b_{ij}\\)</span>的新加权二分图</li>\n<li>为了方便，我们使用<span class=\"math inline\">\\(\\varepsilon_{-ij}\\)</span>来表示更新后的边，<span class=\"math inline\">\\(G_{-ij}\\)</span>来表示新的二分图</li>\n<li>利用之前的算法重新再找最大的权重边，获得中标；<span class=\"math inline\">\\(\\Phi_{-ij}\\)</span>表示新的分配解决问题方案。<span class=\"math inline\">\\(b_{ij}\\)</span>的备选bid一定在<span class=\"math inline\">\\(\\Phi_{-ij}\\)</span>内</li>\n</ol>\n<p>现在有两种情况：</p>\n<ol type=\"1\">\n<li>需求<span class=\"math inline\">\\(r_i\\)</span>被分配到了其他的ECN<span class=\"math inline\">\\(s_{j&#39;}\\)</span></li>\n<li>ECN已经拥有了很多的需求，导致没有过多的资源提供给<span class=\"math inline\">\\(r_i\\)</span></li>\n</ol>\n<p>对于备选中标，我们假设<span class=\"math inline\">\\(b_{ij&#39;}\\)</span>为是<span class=\"math inline\">\\(r_i\\)</span>的相关赢家；<span class=\"math inline\">\\(b_{i_1j},b_{i_2j}...\\)</span>为ECN<span class=\"math inline\">\\(s_j\\)</span>接受到的赢家</p>\n<p>对于第一种情况，<span class=\"math inline\">\\(b_{ij&#39;}\\)</span>是<span class=\"math inline\">\\(b_{ij}\\)</span>的候选</p>\n<p>对于第二种情况，我们可以找到ECN的<kbd>critical payment</kbd>，表示为<span class=\"math inline\">\\(b_{i_{min}j}\\)</span> <span class=\"math display\">\\[\nb_{i_{min}j} = min\\{ w_{i_1j},w_{i_2j}...:L_j-\\sum_{w_{i_{x}j}-w_{i_{y}j}}A_{i_{x}} \\geq A_i\\}\n\\]</span> <span class=\"math inline\">\\(s_j\\)</span>总是选择权重相对较大的请求，直到它没有足够的剩余容量来满足请求<span class=\"math inline\">\\(r_i\\)</span>。因此，<span class=\"math inline\">\\(b_{i_{min}j}\\)</span>投标正是<span class=\"math inline\">\\(b_{ij}\\)</span>的另一个备选投标。</p>\n<p>此外，如果<span class=\"math inline\">\\(w_{ij&#39;}\\geq w_{i_{min}j}\\)</span>，<span class=\"math inline\">\\(b_{ij&#39;}\\)</span>将成为<span class=\"math inline\">\\(b_{ij}\\)</span>的替代出价。否则，如果<span class=\"math inline\">\\(w_{ij&#39;}&lt; w_{i_{min}j}\\)</span>，<span class=\"math inline\">\\(b_{ij}\\)</span>的备选投标将为<span class=\"math inline\">\\(b_{i_{min}j}\\)</span>。 <span class=\"math display\">\\[\np_{ij}(b_{ij})=A_i·(C_j^v+max\\{w_{ij&#39;},w_{i_{min}j}\\})\n\\]</span></p>\n","categories":["XF-TANK"],"tags":["Top-Papers"]}]